#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SIG_AIM				2
#define SIG_AIM2			4
#define SIG_RESTORE			8

piece  missile1, missile2, barrel1, barrel2, base, thrusta1, thrusta2;

static-var  Static_Var_1, Static_Var_2, OpenClosed, restore_delay, statechg_DesiredState, statechg_StateChanging;


activatescr()
{
	sleep 23;
	return (0);
}

deactivatescr()
{
	sleep 24;
	return (0);
}

Go()
{
	turn barrel1 to y-axis <0.00000> speed <400.00000>;
	turn barrel1 to x-axis <0.00000> speed <400.00000>;
	wait-for-turn barrel1 around y-axis;
	wait-for-turn barrel1 around x-axis;
	OpenClosed = 1;
}

Stop()
{
	OpenClosed = 0;
	turn barrel1 to y-axis <0.00000> speed <400.00000>;
	turn barrel1 to x-axis <0.00000> speed <400.00000>;
	wait-for-turn barrel1 around y-axis;
	wait-for-turn barrel1 around x-axis;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

MoveRate2()
{
	if( Rand( 1, 10 ) == 1 AND ( !Static_Var_1 ) )
	{
		Static_Var_1 = 1;
		turn base to z-axis <240.054945> speed <120.027473>;
		wait-for-turn base around z-axis;
		turn base to z-axis <120.027473> speed <180.043956>;
		wait-for-turn base around z-axis;
		turn base to z-axis <0.000000> speed <120.027473>;
		Static_Var_1 = 0;
	}
	return (0);
}

Create()
{
	Static_Var_1 = 0;
	Static_Var_2 = 0;
	restore_delay = 300;
	OpenClosed = 1;	
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

RestoreAfterDelay()
{
	signal SIG_RESTORE;
	set-signal-mask SIG_RESTORE;
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

//======

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	turn barrel1 to y-axis heading speed <600.00000>;
	turn barrel1 to x-axis <0.00000> - pitch speed <600.00000>;
	wait-for-turn barrel1 around y-axis;
	wait-for-turn barrel1 around x-axis;
	start-script RestoreAfterDelay();		
	return (1);
}


// -- The piece that the bullet/laser/whatever comes out of.
QueryPrimary(piecenum)
{
	piecenum = Static_Var_2;
	return (0);
}

// -- The unit looks from this piece down the QueryWeapon piece, to see whether it's aiming at anything.
AimFromPrimary(piecenum)
{
	piecenum = barrel1;
}

FirePrimary(Func_Var_1)
{
	Static_Var_2 = !Static_Var_2;
	return (0);
}

//---------
//  A2G
//---------

AimSecondary(heading, pitch)
{
	signal SIG_AIM2;
	set-signal-mask SIG_AIM2;

	turn barrel2 to y-axis heading speed <600.00000>;
	turn barrel2 to x-axis <0.00000> - pitch speed <600.00000>;
	wait-for-turn barrel2 around y-axis;
	wait-for-turn barrel2 around x-axis;
	start-script RestoreAfterDelay();		
	return (1);
}


QuerySecondary(piecenum)
{
	piecenum = Static_Var_2;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = barrel2;
}


FireSecondary(Func_Var_1)
{
	Static_Var_2 = !Static_Var_2;
	return (0);
}


//----------------

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode missile1 type BITMAPONLY | BITMAP1;
		explode missile2 type BITMAPONLY | BITMAP1;
		explode thrusta1 type BITMAPONLY | BITMAP1;
		explode thrusta2 type BITMAPONLY | BITMAP1;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode missile1 type FALL | BITMAP1;
		explode missile2 type FALL | BITMAP1;
		explode thrusta1 type FALL | BITMAP1;
		explode thrusta2 type FALL | BITMAP1;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode missile1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode missile2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode thrusta1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode thrusta2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode missile1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode missile2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode thrusta1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode thrusta2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	return (corpsetype);
}
