piece base, body, head,tail,lthigh,lknee,lshin,lfoot,rthigh,rknee,rshin,rfoot,rsack,lsack,rblade,lblade,mblade,spike1,spike2,spike3, aimy1;


// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4

#include "sfxtype.h"
#include "exptype.h"


static-var maxSpeed, animFramesPerKeyframe, bMoving, animSpeed,isDying,gun_1;

// For N:\animations\Chickens\chicken_walk_remaster_v2.blend Created by https://github.com/Beherith/Skeletor_S3O V((0, 3, 5))
#define MOVESCALE 64 //Higher values are bigger, 100 is default
#define MOVESPEED 3
#define animAmplitude 150
#define LUHAND lsack  //define these as the left and right head thingies
#define RUHAND rsack  
#define LLHAND lsack  //define these as the left and right head thingies
#define RLHAND rsack  
#define SIG_WALK 64 //these defines are needed before includes!
#include "chicken_walk_2legged_v2.h"


#define IDLEMOVESCALE 64
#define IDLEAMPLITUDE 100
#define IDLESPEED 14
#include "chicken_idle_2legged_v2.h"


#define DEATHSCALE 64 //Higher values are bigger, 100 is default
#define DEATHAMPLIDUTE 100 //Higher values are bigger, 100 is default
#define DEATHSPEED 9
#include "chicken_death_2legged_v2.h"
#include "chicken_death_2legged_ptaq.h"

//use call-script DeathAnim(); from Killed()

#define BASEPIECE body //needed for HitByWeapon
#define HITSPEED <45.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 6
#define MAXTILT 100
#include "chicken_hitbyweapon.h"

#include "chicken_death_2legged_ptaq.h"

#include "chicken_killed_2legged.h"

#include "chicken_create_move.h"

AimFromPrimary(piecenum)
	{	piecenum=head;	}

QueryPrimary(piecenum)
	{	piecenum=head; }
	
		
AimFromSecondary(piecenum)
	{	piecenum=head;	}

QuerySecondary(piecenum)
	{	piecenum=head; }

AimPrimary(heading,pitch)
	{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;	
	
	if (heading > <60> ) heading = <60>;
	if (heading < <-60> ) heading = <-60>;
	if (pitch > <60> ) pitch = <60>;
	if (pitch < <-60> ) pitch = <-60>;
	turn aimy1 to y-axis heading speed <250.000000>;
	turn aimy1 to x-axis <0.000000> - pitch speed <200.000000>;
		
	wait-for-turn head around y-axis;
	start-script RestoreAfterDelay();
	
	return(TRUE);
	}
	
AimSecondary(heading,pitch)
	{
	if ( get IN_WATER(0) == 0 )
    {
     return (0);
    }
	signal SIG_AIM;
	set-signal-mask SIG_AIM;	
	
	if (heading > <60> ) heading = <60>;
	if (heading < <-60> ) heading = <-60>;
	if (pitch > <60> ) pitch = <60>;
	if (pitch < <-60> ) pitch = <-60>;
	turn aimy1 to y-axis heading speed <250.000000>;
	turn aimy1 to x-axis <0.000000> - pitch speed <200.000000>;
		
	wait-for-turn head around y-axis;
	start-script RestoreAfterDelay();
	
	return(TRUE);
	}
	
Shot1()
	{
	turn lsack to y-axis <40> speed [1];
	turn rsack to y-axis <-40> speed [1];
	move rsack to x-axis [-1] speed [1];
	move lsack to x-axis [1] speed [1];
	move mblade to z-axis [-16] now;
	wait-for-turn lsack around y-axis;
	turn lsack to y-axis <0> speed [0.3];
	turn rsack to y-axis <0> speed [0.3];
	move rsack to x-axis [0] speed [0.3];
	move lsack to x-axis [0] speed [0.3];
	move mblade to z-axis <0> speed [6];
	}
	
Shot2()
	{
	turn lsack to y-axis <40> speed [1];
	turn rsack to y-axis <-40> speed [1];
	move rsack to x-axis [-1] speed [1];
	move lsack to x-axis [1] speed [1];
	move mblade to z-axis [-16] now;
	wait-for-turn lsack around y-axis;
	turn lsack to y-axis <0> speed [0.3];
	turn rsack to y-axis <0> speed [0.3];
	move rsack to x-axis [0] speed [0.3];
	move lsack to x-axis [0] speed [0.3];
	move mblade to z-axis <0> speed [6];
	}
	





