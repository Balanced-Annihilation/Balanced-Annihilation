piece base, body, head,tail,rblade,lblade, flare, aimy1,
		lfthigh, lbthigh, rfthigh, rbthigh, 
		lfknee, lbknee, rfknee, rbknee, 
		lfshin, lbshin, rfshin, rbshin, 
		lffoot, lbfoot, rffoot, rbfoot;


// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			16

#include "sfxtype.h"
#include "exptype.h"

static-var maxSpeed, animFramesPerKeyframe, bMoving, animSpeed, gun_1, isDying;

// For N:\animations\Chickens\chicken_walk_remaster_v2.blend Created by https://github.com/Beherith/Skeletor_S3O V((0, 3, 5))
#define MOVESCALE 60 //Higher values are bigger, 100 is default
#define MOVESPEED 3
#define animAmplitude 110
#define LUHAND lupperarm  //define these as the left and right head thingies
#define RUHAND rupperarm  
#define LLHAND lupperarm  //define these as the left and right head thingies
#define RLHAND rupperarm  
#define SIG_WALK 64 //these defines are needed before includes!
#include "chicken_walk_allterrain.h"


#define IDLEMOVESCALE 60
#define IDLEAMPLITUDE 100
#define IDLESPEED 15
#include "chicken_idle_allterrain.h"


#define DEATHSCALE 60 //Higher values are bigger, 100 is default
#define DEATHAMPLIDUTE 100 //Higher values are bigger, 100 is default
#define DEATHSPEED 10
#include "chicken_death_allterrain.h"
//use call-script DeathAnim(); from Killed()


#define BASEPIECE body //needed for HitByWeapon
#define HITSPEED <35.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 4
#define MAXTILT 100
#include "chicken_hitbyweapon.h"

#include "chicken_create_move.h"

#include "chicken_killed_allterrain.h"

AimFromPrimary(piecenum)
	{	piecenum=head;	}

QueryPrimary(piecenum)
	{	piecenum=head; }

AimPrimary(heading,pitch)
	{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if (heading > <60> ) heading = <60>;
	if (heading < <-60> ) heading = <-60>;
	if (pitch > <60> ) pitch = <60>;
	if (pitch < <-60> ) pitch = <-60>;
	turn aimy1 to y-axis heading speed <250.000000>;
	turn aimy1 to x-axis <0.000000> - pitch speed <200.000000>;
		
	wait-for-turn aimy1 around y-axis;
	start-script RestoreAfterDelay();
	
	return(TRUE);
	}
	
Shot1()
	{
	turn lblade to y-axis <40> speed [1];
	turn rblade to y-axis <-40> speed [1];
	wait-for-turn lblade around y-axis;
	turn lblade to y-axis <0> speed [0.3];
	turn rblade to y-axis <0> speed [0.3];
	}
	

