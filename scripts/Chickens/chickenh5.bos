#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, head, tail, lthigh, lknee, lshin, lfoot, rthigh,
       rknee, rshin, rfoot, lforearm, lupperarm, lblade, rforearm, rupperarm, head_emit,
       rblade, aimy1;

// Signal definitions
#define SIG_AIM				2

#define SIG_AIM_2			4

static-var maxSpeed, animFramesPerKeyframe, bMoving, animSpeed,isDying,gun_1;

// For N:\animations\Chickens\chicken_walk_remaster_v2.blend Created by https://github.com/Beherith/Skeletor_S3O V((0, 3, 5))
#define MOVESCALE 108 //Higher values are bigger, 100 is default
#define MOVESPEED 6
#define animAmplitude 79
#define LUHAND lupperarm  //define these as the left and right head thingies
#define RUHAND rupperarm  
#define LLHAND lupperarm  //define these as the left and right head thingies
#define RLHAND rupperarm  
#define SIG_WALK 64 //these defines are needed before includes!
#include "chicken_walk_2legged_v2.h"


#define IDLEMOVESCALE 108
#define IDLEAMPLITUDE 50
#define IDLESPEED 20
#include "chicken_idle_2legged_v2.h"


#define DEATHSCALE 105 //Higher values are bigger, 100 is default
#define DEATHAMPLIDUTE 100 //Higher values are bigger, 100 is default
#define DEATHSPEED 14
#include "chicken_death_2legged_v2.h"
//use call-script DeathAnim(); from Killed()

#define BASEPIECE body //needed for HitByWeapon
#define HITSPEED <55.0>
//how 'heavy' the unit is, on a scale of 1-10
#define UNITSIZE 2
#define MAXTILT 100
#include "chicken_hitbyweapon.h"

#include "chicken_death_2legged_ptaq.h"

#include "chicken_killed_2legged.h"

#include "chicken_create_move.h"

//----
FxEmit()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		emit-sfx 1024+3 from head_emit;
		sleep 600;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = head;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = head;
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if (heading > <60> ) heading = <60>;
	if (heading < <-60> ) heading = <-60>;
	if (pitch > <60> ) pitch = <60>;
	if (pitch < <-60> ) pitch = <-60>;
	turn aimy1 to y-axis heading speed <250.000000>;
	turn aimy1 to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn aimy1 around y-axis;
	
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	if (heading > <60> ) heading = <60>;
	if (heading < <-60> ) heading = <-60>;
	if (pitch > <60> ) pitch = <60>;
	if (pitch < <-60> ) pitch = <-60>;
	turn aimy1 to y-axis heading speed <250.000000>;
	turn aimy1 to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn aimy1 around y-axis;
	
	start-script RestoreAfterDelay();
	return (1);
}

Shot1()
	{
	turn lforearm to y-axis <-140> speed <600>;
	turn rforearm to y-axis <140> speed <600>;
	turn lblade to y-axis <140> speed <600>;
	turn rblade to y-axis <-140> speed <600>;
	wait-for-turn rblade around y-axis;
	turn lforearm to y-axis <0> speed <120>;
	turn rforearm to y-axis <0> speed <120>;
	turn lblade to y-axis <0> speed <120>;
	turn rblade to y-axis <0> speed <120>;
	}
	
Shot2()
	{
	turn lforearm to y-axis <-450> speed <600>;
	turn rforearm to y-axis <45> speed <600>;
	turn lblade to y-axis <45> speed <600>;
	turn rblade to y-axis <-45> speed <600>;
	wait-for-turn rblade around y-axis;
	turn lforearm to y-axis <0> speed <120>;
	turn rforearm to y-axis <0> speed <120>;
	turn lblade to y-axis <0> speed <120>;
	turn rblade to y-axis <0> speed <120>;
	set CHANGE_TARGET to 2;
	}

QuerySecondary(piecenum)
	{	piecenum=head; }
	
AimFromSecondary(piecenum)
	{	piecenum=head;	}

StartBuilding(heading, pitch)
{
	if (heading > <60> ) heading = <60>;
	if (heading < <-60> ) heading = <-60>;
	turn head to y-axis heading speed <250.000000>;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
}

QueryNanoPiece(piecenum)
{
	piecenum = head_emit;
}

