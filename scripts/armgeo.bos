#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, smoke, pieces;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Create()
{
	start-script SmokeUnit();
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed( severity, corpsetype )
{
	corpsetype = 1;
	return(corpsetype);
}

//Killed(severity, corpsetype)
//{
//	if( severity <= 25 )
//	{
//		corpsetype = 1;
//		explode base type BITMAPONLY | BITMAP1;
//		explode smoke type BITMAPONLY | BITMAP2;
//		explode pieces type BITMAPONLY | BITMAP2;
//	return corpsetype;
//}
//	if( severity <= 50 )
//	{
//		corpsetype = 2;
//		explode base type BITMAPONLY | BITMAP1;
//		explode smoke type FALL | BITMAP2;
//		explode pieces type BITMAPONLY | BITMAP2;
//		return (corpsetype);
//	}
//	if( severity <= 99 )
//	{
//		corpsetype = 3;
//		explode base type BITMAPONLY | BITMAP1;
//		explode smoke type FALL | BITMAP2;
//		explode pieces type SHATTER | BITMAP2;
//		return (corpsetype);
//	}
//	corpsetype = 3;
//	explode base type BITMAPONLY | BITMAP1;
//	explode smoke type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
//	explode pieces type SHATTER | EXPLODE_ON_HIT | BITMAP2;
//	return (corpsetype);
//}
