#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, post, spikes, barrel, flare;

static-var  Static_Var_1, restore_delay, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Go()
{
	move post to y-axis [0.00000] speed [375.00000];
	wait-for-move post along y-axis;
	Static_Var_1 = 1;
	set ARMORED to 0;
	return (0);
}

Stop()
{
	set ARMORED to 1;
	Static_Var_1 = 0;
	turn barrel to x-axis <90.02198> speed <300.00000>;
	turn post to y-axis <0.00000> speed <300.00000>;
	wait-for-turn barrel around x-axis;
	wait-for-turn post around y-axis;
	move post to y-axis [-42.50000] speed [375.00000];
	wait-for-move post along y-axis;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

Create()
{
	hide flare;
	dont-shade flare;
	dont-cache flare;
	restore_delay = 2000;
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
	start-script RequestState(0);
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (0);
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn post to y-axis heading speed <300.00000>;
	turn barrel to x-axis <0.00000> - pitch speed <300.00000>;
	wait-for-turn post around y-axis;
	wait-for-turn barrel around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	show flare;
	sleep 150;
	hide flare;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = barrel;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP3;
		explode spikes type BITMAPONLY | BITMAP1;
		explode post type BITMAPONLY | BITMAP2;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type FALL | BITMAP1;
		explode base type SHATTER | BITMAP1;
		explode spikes type BITMAPONLY | BITMAP3;
		explode post type BITMAPONLY | BITMAP2;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP3;
		explode post type SHATTER | BITMAP1;
		explode spikes type BITMAPONLY | BITMAP2;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP3;
	explode post type SHATTER | BITMAP1;
	explode spikes type BITMAPONLY | BITMAP2;
	return (corpsetype);
}
