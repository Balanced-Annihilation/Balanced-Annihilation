#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, body, extractor, arm1, arm2, arm3, arm4, arm5,
       arm6, arm7, arm8, pillar, pipe1, pipe2, pipe3, pipe4,
       pipe5, pipe6, pipe7, pipe8;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging, accelbrakerate;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	spin extractor around y-axis speed Static_Var_1 accelerate accelbrakerate; //0.5
	set ARMORED to 1;
}

Stop()
{
	stop-spin extractor around y-axis decelerate accelbrakerate; //<0.500000>;
	wait-for-turn extractor around y-axis;
	set ARMORED to 0;
}

SetSpeed(Func_Var_1)
{
	Static_Var_1 = Func_Var_1 * 1;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade arm1;
	dont-shade arm2;
	dont-shade arm3;
	dont-shade arm4;
	dont-shade arm5;
	dont-shade arm6;
	dont-shade arm7;
	dont-shade arm8;
	dont-cache arm1;
	dont-cache arm2;
	dont-cache arm3;
	dont-cache arm4;
	dont-cache arm5;
	dont-cache arm6;
	dont-cache arm7;
	dont-cache arm8;
	dont-cache pillar;
	dont-cache extractor;
	set ARMORED to 0;
	set accelbrakerate to 1;
	call-script InitState();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 250;
	}
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

AimWeapon1(Func_Var_1, Func_Var_2)
{
	if( get ACTIVATION )
	{
		return (1);
	}
	if( !get ACTIVATION )
	{
		return (0);
	}
}

QueryWeapon1(Func_Var_1)
{
	Func_Var_1 = 11;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode arm3 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode arm7 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode arm2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode arm3 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode arm2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode arm3 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	}
	corpsetype = 3;
	explode arm1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode arm2 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode arm3 type SHATTER | EXPLODE_ON_HIT | BITMAP1;
}
