#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  ground, pelvis, rthigh, rleg, lthigh, lleg, torso, turret,
       flak, flak_fire, turret_fire, rmiss, rmiss_fire, lmiss, lmiss_fire;

static-var  bMoving, bAiming;

walk()
{
        while( bMoving )
        {
                // right leg move forward left some back - start
                if( !bMoving ) {return;}
                {
                        turn rthigh to x-axis <-20.000000> now;
                        turn rleg to x-axis <20.000000> now;
                        turn lthigh to x-axis <10.000000> now;
                        turn lleg to x-axis <-10.000000> now;
                        sleep 20;
                }
                if( !bMoving ) {return;}
                {
                        turn rthigh to x-axis <-40.000000> now;
                        turn rleg to x-axis <40.000000> now;
                        sleep 20;
                }
                if( !bMoving ) {return;}
                {
                        turn rthigh to x-axis <-50.000000> now;
                        turn rleg to x-axis <50.000000> now;
                        turn lthigh to x-axis <20.000000> now;
                        turn lleg to x-axis <-20.000000> now;
                        sleep 10;
                }
                if( !bMoving ) {return;}
                {
                        turn rthigh to x-axis <-60.000000> now;
                        turn rleg to x-axis <60.000000> now;
                        sleep 10;
                }
                // right leg move forward left some back - end

                // return to initial position (right far, left near) - start
                if( !bMoving ) {return;}
                {
                        turn rthigh to x-axis <-50.000000> now;
                        turn rleg to x-axis <50.000000> now;
                        sleep 10;
                }
                if( !bMoving ) {return;}
                {
                        turn rthigh to x-axis <-40.000000> now;
                        turn rleg to x-axis <40.000000> now;
                        sleep 10;
                }
                if( !bMoving ) {return;}
                {
                        turn rthigh to x-axis <-20.000000> now;
                        turn rleg to x-axis <20.000000> now;
                        turn lthigh to x-axis <10.000000> now;
                        turn lleg to x-axis <-10.000000> now;
                        sleep 20;
                }
                if( !bMoving ) {return;}
                {
                    turn rthigh to x-axis <0.000000> now;
                    turn rleg to x-axis <0.000000> now;
                    turn lthigh to x-axis <0.000000> now;
                    turn lleg to x-axis <0.000000> now;
                    sleep 20;
                }
                // return to initial position (right far, left near) - end

                // left leg move forward right some back - start
                if( !bMoving ) {return;}
                {
                        turn lthigh to x-axis <-20.000000> now;
                        turn lleg to x-axis <20.000000> now;
                        turn rthigh to x-axis <10.000000> now;
                        turn rleg to x-axis <-10.000000> now;
                        sleep 20;
                }
                if( !bMoving ) {return;}
                {
                        turn lthigh to x-axis <-40.000000> now;
                        turn lleg to x-axis <40.000000> now;
                        sleep 20;
                }
                if( !bMoving ) {return;}
                {
                        turn lthigh to x-axis <-50.000000> now;
                        turn lleg to x-axis <50.000000> now;
                        turn rthigh to x-axis <20.000000> now;
                        turn rleg to x-axis <-20.000000> now;
                        sleep 10;
                }
                if( !bMoving ) {return;}
                {
                        turn lthigh to x-axis <-60.000000> now;
                        turn lleg to x-axis <60.000000> now;
                        sleep 10;
                }
                // left leg move forward right some back - end

                // return to initial position (left far, right near) - start
                if( !bMoving ) {return;}
                {
                        turn lthigh to x-axis <-50.000000> now;
                        turn lleg to x-axis <50.000000> now;
                        sleep 10;
                }
                if( !bMoving ) {return;}
                {
                        turn lthigh to x-axis <-40.000000> now;
                        turn lleg to x-axis <40.000000> now;
                        sleep 10;
                }
                if( !bMoving ) {return;}
                {
                        turn lthigh to x-axis <-20.000000> now;
                        turn lleg to x-axis <20.000000> now;
                        turn rthigh to x-axis <10.000000> now;
                        turn rleg to x-axis <-10.000000> now;
                        sleep 20;
                }
                if( !bMoving ) {return;}
                {
                    turn lthigh to x-axis <0.000000> now;
                    turn lleg to x-axis <0.000000> now;
                    turn rthigh to x-axis <0.000000> now;
                    turn rleg to x-axis <0.000000> now;
                    sleep 20;
                }
                // return to initial position (left far, right near) - end
        }
}

MotionControl(moving, aiming, justmoved)
{
        justmoved = TRUE;
        while( TRUE )
        {
                moving = bMoving;
                aiming = bAiming; //bAiming not change in script because this unit doesn't have different walk scripts when aiming or no.
                if( moving )
                {
                        call-script walk();
                        justmoved = TRUE;
                }
                if( !moving )
                {
                        if( justmoved )
                        {
                                move pelvis to y-axis [0.000000] speed [1.000000];
                                turn rthigh to x-axis <0.000000> speed <200.000000>;
                                turn rleg to x-axis <0.000000> speed <200.000000>;
                                turn lthigh to x-axis <0.000000> speed <200.000000>;
                                turn lleg to x-axis <0.000000> speed <200.000000>;
                                if( !aiming )
                                {
                                        turn torso to y-axis <0.000000> speed <90.000000>;
                                }
                                justmoved = FALSE;
                        }
                        sleep 100;
                }
        }
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
        while( get BUILD_PERCENT_LEFT )
        {
                sleep 400;
        }
        while( TRUE )
        {
                healthpercent = get HEALTH;
                if( healthpercent < 66 )
                {
                        smoketype = 256 | 2;
                        if( Rand( 1, 66 ) < healthpercent )
                        {
                                smoketype = 256 | 1;
                        }
                        emit-sfx smoketype from torso;
                }
                sleeptime = healthpercent * 50;
                if( sleeptime < 200 )
                {
                        sleeptime = 200;
                }
                sleep sleeptime;
        }
}

Create()
{
        hide flak_fire;
        hide turret_fire;
        hide lmiss_fire;
        hide rmiss_fire;
        bMoving = FALSE;
        start-script MotionControl();
        start-script SmokeUnit();
}

StartMoving()
{
        bMoving = TRUE;
}

StopMoving()
{
        bMoving = FALSE;
}

SweetSpot(piecenum)
{
        piecenum = torso;
}

RestoreAfterDelay()
{
        sleep 5000;
        set-signal-mask 0;
        turn turret to y-axis <0.000000> speed <90.000000>;
        turn flak to x-axis <0.000000> speed <90.000000>;
        turn lmiss to x-axis <0.000000> speed <90.000000>;
        turn rmiss to x-axis <0.000000> speed <90.000000>;
        turn torso to y-axis <0.000000> speed <90.000000>;
}

QueryWeapon1(piecenum)
{
        piecenum = turret_fire;
}

AimFromWeapon1(piecenum)
{
        piecenum = turret;
}

QueryWeapon2(piecenum)
{
        piecenum = turret_fire;
}

AimFromWeapon2(piecenum)
{
        piecenum = turret;
}

AimWeapon2(heading, pitch)
{
        signal 2;
        set-signal-mask 2;
        turn turret to y-axis heading speed <250.000000>;
        wait-for-turn turret around y-axis;
        start-script RestoreAfterDelay();
        return (1);
}

FireWeapon2()
{
}

QueryWeapon3(piecenum)
{
        piecenum = rmiss_fire;
}

AimFromWeapon3(piecenum)
{
        piecenum = torso;
}

AimWeapon3(heading, pitch)
{
        signal 4;
        set-signal-mask 4;
        turn torso to y-axis heading speed <300.000000>;
        turn lmiss to x-axis <0.000000> - pitch speed <250.000000>;
        wait-for-turn torso around y-axis;
        wait-for-turn lmiss around x-axis;
        start-script RestoreAfterDelay();
        return (1);
}

FireWeapon3()
{
}

QueryWeapon4(piecenum)
{
        piecenum = lmiss_fire;
}

AimFromWeapon4(piecenum)
{
        piecenum = torso;
}

AimWeapon4(heading, pitch)
{
        signal 8;
        set-signal-mask 8;
        turn torso to y-axis heading speed <300.000000>;
        turn rmiss to x-axis <0.000000> - pitch speed <250.000000>;
        wait-for-turn torso around y-axis;
        wait-for-turn rmiss around x-axis;
        start-script RestoreAfterDelay();
        return (1);
}

FireWeapon4()
{
}

QueryWeapon5(piecenum)
{
        piecenum = flak_fire;
}

AimFromWeapon5(piecenum)
{
        piecenum = flak;
}

AimWeapon5(heading, pitch)
{
        signal 16;
        set-signal-mask 16;
        turn flak to x-axis <0.000000> - pitch speed <350.000000>;
        wait-for-turn flak around x-axis;
        start-script RestoreAfterDelay();
        return (1);
}

FireWeapon5()
{
        emit-sfx 1024 + 0 from flak_fire;
}

Killed(severity, corpsetype)
{
        if( severity <= 25 )
        {
                corpsetype = 1;
                return (corpsetype);
        }
        if( severity <= 50 )
        {
                corpsetype = 2;
                explode ground type FALL | BITMAP1 | NOHEATCLOUD;
                explode pelvis type FALL | BITMAP2 | NOHEATCLOUD;
                explode rthigh type FALL | BITMAP3 | NOHEATCLOUD;
                explode rleg type FALL | BITMAP4 | NOHEATCLOUD;
                explode lthigh type FALL | BITMAP5 | NOHEATCLOUD;
                explode lleg type FALL | BITMAP1 | NOHEATCLOUD;
                explode torso type FALL | BITMAP2 | NOHEATCLOUD;
                explode turret type FALL | BITMAP3 | NOHEATCLOUD;
                explode flak type FALL | BITMAP4 | NOHEATCLOUD;
                explode rmiss type FALL | BITMAP5 | NOHEATCLOUD;
                explode lmiss type FALL | BITMAP1 | NOHEATCLOUD;
                return (corpsetype);
        }
        if( severity <= 99 )
        {
                corpsetype = 3;
                explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
                explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
                explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
                explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
                explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
                explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
                explode torso type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
                explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
                explode flak type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
                explode rmiss type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
                explode lmiss type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
                return (corpsetype);
        }
        corpsetype = 3;
        explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
        explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
        explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
        explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
        explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
        explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
        explode torso type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
        explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
        explode flak type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
        explode rmiss type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
        explode lmiss type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
        return corpsetype;
}
