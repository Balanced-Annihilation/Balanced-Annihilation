#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flash, turret, sleeve, barrel;

static-var  restore_delay, statechg_DesiredState, statechg_StateChanging, CurrentHeading, bMoving, ShouldBuild, IsBuilding, TransitionToBuild;

// Signal definitions
#define SIG_AIM				2
#define SIG_BUILD	4

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

RockUnit(anglex, anglez)
{
	turn base to x-axis anglex speed <50.01099>;
	turn base to z-axis anglez speed <50.01099>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.00000> speed <20.00000>;
	turn base to x-axis <0.00000> speed <20.00000>;
	return (0);
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.02198>;
	turn base to x-axis anglex speed <105.02198>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.00000> speed <30.00549>;
	turn base to x-axis <0.00000> speed <30.00549>;
	return (0);
}

RestoreAfterDelay()
{
	if (IsBuilding) {
		sleep restore_delay / 2;
		start-script RestoreAfterDelay();
		return (0);
	}		
	sleep restore_delay;
	turn turret to y-axis <0.00000> speed <90.02198>;
	turn sleeve to x-axis <0.00000> speed <50.01099>;
	return (0);
}

RequestState()
{
	while( ( !TransitionToBuild ) AND ShouldBuild != IsBuilding )
	{
		TransitionToBuild = 1;
		if( ShouldBuild AND ( !IsBuilding ) )
		{
			set INBUILDSTANCE to 1;
			IsBuilding = 1;		
		}
		if( ( !ShouldBuild ) AND IsBuilding )
		{
			IsBuilding = 0;
			set INBUILDSTANCE to 0;
			start-script RestoreAfterDelay();			
		}
		TransitionToBuild = 0;				
	}
}

Create()
{
	CurrentHeading = 0;
	ShouldBuild = 0;
	IsBuilding = 0;
	TransitionToBuild = 0;	
	
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;	
	hide flash;
	restore_delay = 3000;
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

Activate()
{
	start-script RequestState(0); 
}

Deactivate()
{
	start-script RequestState(1);
}

//-------- Mine building

StartBuilding(heading)
{
	CurrentHeading = heading;
	ShouldBuild = 1;
	turn turret to y-axis CurrentHeading speed <600.000000>;
	turn sleeve to x-axis <0.00000> speed <300.000000>;
	wait-for-turn turret around y-axis;	
	start-script RequestState();
	
//	start-script RequestState(0);
//	while( notBuilding ) sleep 100;
//	signal SIG_BUILD;
//	turn turret to y-axis heading speed <600.000000>;
//	//turn sleeve to x-axis <0.00000>-pitch speed <600.000000>;	
//	wait-for-turn turret around y-axis;
//	//wait-for-turn sleeve around x-axis;
//	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	ShouldBuild = 0;
	sleep 3000;
	if( !ShouldBuild )
	{
		start-script RequestState();
	}
//	signal SIG_BUILD;	
//	set-signal-mask SIG_BUILD;
//	sleep 3000;
//	set-signal-mask 0;	
//	signal SIG_BUILD;
//	start-script RequestState(1);
//	set INBUILDSTANCE to 0;
//	
//	isbuilding = 0;		
//	turn turret to y-axis <0.00000> speed <90.02198>;
//	turn sleeve to x-axis <0.00000> speed <50.01099>;
//	wait-for-turn turret around y-axis;
//	wait-for-turn sleeve around x-axis;
}

QueryNanoPiece(piecenum)
{
	piecenum = flash;
}

//--------

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <600.00000>; //200 was too slow
	turn sleeve to x-axis <0.00000> - pitch speed <200.00000>;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	return (1);
}

FirePrimary()
{
	show flash;
	move barrel to z-axis [-6.00000] speed [1250.00000];
	sleep 150;
	hide flash;
	wait-for-move barrel along z-axis;
	move barrel to z-axis [0.00000] speed [7.50000];
	return (0);
	start-script RestoreAfterDelay();	
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flash;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	hide flash;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type BITMAPONLY | BITMAP1;
		explode sleeve type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flash type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type FALL | BITMAP1;
		explode sleeve type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flash type FALL | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode flash type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type SHATTER | BITMAP4;
		return (corpsetype);
	}
	corpsetype = 3;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode flash type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	return (corpsetype);
}
