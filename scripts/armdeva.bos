#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SIG_AIM				2

piece base, tower, arm1, arm2, arm3, arm4, turret, flare, sleeve, cap, firept, canonbarrel, light;

static-var gun_1;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Create()
{
	hide flare;
	dont-cache tower;
	dont-cache arm1;
	dont-cache arm2;
	dont-cache arm3;
	dont-cache arm4;	
	dont-cache turret;
	dont-cache sleeve;	
	dont-cache flare;
	dont-shade canonbarrel;
//	dont-shade sleeve;
//	dont-shade turret;
	dont-shade flare;
	gun_1 = 1;
	start-script SmokeUnit();
	return (0);
}

// We only actually aim and fire from Weapons 2 & 3 (1 is bogus)

AimSecondary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if( gun_1 == 1 )
	{
		turn canonbarrel to z-axis <0.00000> speed <400.00000>;
	}
	if( gun_1 == 2 )
	{
		turn canonbarrel to z-axis <120.02747> speed <400.00000>;
	}
	if( gun_1 == 3 )
	{
		turn canonbarrel to z-axis <-120.02747> speed <400.00000>;
	}
	turn turret to y-axis heading speed <450.00000>;
	turn sleeve to x-axis <0.00000> - pitch speed <450.00000>;
	wait-for-turn canonbarrel around z-axis;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	return (1);
}



// Anti-air weapon

AimTertiary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if( gun_1 == 1 )
	{
		turn canonbarrel to z-axis <0.00000> speed <400.00000>;
	}
	if( gun_1 == 2 )
	{
		turn canonbarrel to z-axis <120.02747> speed <400.00000>;
	}
	if( gun_1 == 3 )
	{
		turn canonbarrel to z-axis <-120.02747> speed <400.00000>;
	}
	turn turret to y-axis heading speed <450.00000>;
	turn sleeve to x-axis <0.00000> - pitch speed <450.00000>;
	wait-for-turn canonbarrel around z-axis;
	wait-for-turn turret around y-axis;
	wait-for-turn sleeve around x-axis;
	return (1);
}

// What to do after firing
AfterFiring()
{
	++gun_1;
	if( gun_1 == 4 )
	{
		gun_1 = 1;
	}
	move canonbarrel to z-axis [-1.000000] now;
	move canonbarrel to z-axis [0.000000] speed <320.00000>;
}

FireSecondary()
{
	start-script AfterFiring();	
}

FireTertiary()
{
	start-script AfterFiring();
}

//------------------



// -- The piece that the bullet/laser/whatever comes out of.
QueryPrimary(piecenum)
{
	piecenum = firept;
}

// -- The unit looks from this piece down the QueryWeapon piece, to see whether it's aiming at anything.
AimFromPrimary(piecenum)
{
	piecenum = canonbarrel;
}


//--

QuerySecondary(piecenum)
{
	piecenum = firept;
}

AimFromSecondary(piecenum)
{
	piecenum = canonbarrel;
}

//--

QueryTertiary(piecenum)
{
	piecenum = firept;
}

AimFromTertiary(piecenum)
{
	piecenum = canonbarrel;
}








SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode canonbarrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode cap type BITMAPONLY | BITMAP3;
		explode sleeve type BITMAPONLY | BITMAP4;
		explode turret type BITMAPONLY | BITMAP5;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode canonbarrel type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode cap type FALL | BITMAP3;
		explode sleeve type SHATTER | BITMAP4;
		explode turret type FALL | BITMAP5;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode canonbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode cap type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode sleeve type SHATTER | BITMAP4;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (corpsetype);
	}
	corpsetype = 3;
	explode canonbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode cap type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode sleeve type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	return (corpsetype);
}