#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret1, turret2, rocket, radar, barrel1, barrel2, flare1,
       flare2, flare3, flare4, leg1, leg2, leg3, leg4, leg5,
       leg6;

static-var  bMoving, restore_delay, gun_1, gun_2, turn_speed;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4

walk2()
{
	turn_speed = 120.000000;
	while( bMoving )
	{
		if( bMoving )
		{
			turn leg1 to y-axis <43.005495> speed <120.000000>; //<40.000000>;
			turn leg1 to y-axis <0.000000> speed <120.000000>; //<40.000000>;
			turn leg1 to z-axis <0.000000> speed <120.000000>; //<40.000000>;
			turn leg1 to z-axis <0.000000> speed <120.000000>; //<40.000000>;
			turn leg2 to z-axis <0.000000> speed <120.000000>; //<40.000000>;
			turn leg2 to z-axis <31.005495> speed <120.000000>; //<40.000000>;
			turn leg3 to y-axis <34.005495> speed <120.000000>; //<40.000000>;
			turn leg3 to y-axis <34.005495> speed <120.000000>; //<40.000000>;
			turn leg3 to z-axis <31.005495> speed <120.000000>; //<40.000000>;
			turn leg3 to z-axis <0.000000> speed <120.000000>; //<40.000000>;
			turn leg4 to y-axis <-40.005495> speed <120.000000>; //<40.000000>;
			turn leg4 to y-axis <-40.005495> speed <120.000000>; //<40.000000>;
			turn leg4 to z-axis <-31.005495> speed <120.000000>; //<40.000000>;
			turn leg4 to z-axis <0.000000> speed <120.000000>; //<40.000000>;
			turn leg5 to y-axis <-37.005495> speed <120.000000>; //<40.000000>;
			turn leg5 to y-axis <0.000000> speed <120.000000>; //<40.000000>;
			turn leg5 to z-axis <0.000000> speed <120.000000>; //<40.000000>;
			turn leg5 to z-axis <0.000000> speed <120.000000>; //<40.000000>;
			turn leg6 to y-axis <0.000000> speed <120.000000>; //<40.000000>;
			turn leg6 to y-axis <-30.005495> speed <120.000000>; //<40.000000>;
			turn leg6 to z-axis <-45.010989> speed <120.000000>; //<40.000000>;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to z-axis <31.005495> speed <120.000000>; //<40.000000>;
			turn leg2 to y-axis <34.005495> speed <120.000000>; //<40.000000>;
			turn leg2 to z-axis <31.005495> speed <120.000000>; //<40.000000>;
			turn leg3 to y-axis <0.000000> speed <120.000000>; //<40.000000>;
			turn leg3 to z-axis <0.000000> speed <120.000000>; //<40.000000>;
			turn leg4 to y-axis <0.000000> speed <120.000000>; //<40.000000>;
			turn leg5 to z-axis <-31.005495> speed <120.000000>; //<40.000000>;
			turn leg6 to z-axis <2.000000> speed <120.000000>; //<40.000000>;
			sleep 200;
		}
		if( bMoving )
		{
			turn leg1 to y-axis <55.010989> speed <120.000000>; //<40.000000>;
			turn leg1 to z-axis <31.005495> speed <120.000000>; //<40.000000>;
			turn leg2 to y-axis <34.005495> speed <120.000000>; //<40.000000>;
			turn leg2 to z-axis <0.000000> speed <120.000000>; //<40.000000>;
			turn leg3 to z-axis <31.005495> speed <120.000000>; //<40.000000>;
			turn leg4 to y-axis <0.000000> speed <120.000000>; //<40.000000>;
			turn leg4 to z-axis <-31.005495> speed <120.000000>; //<40.000000>;
			turn leg5 to y-axis <-31.005495> speed <120.000000>; //<40.000000>;
			turn leg5 to z-axis <-31.005495> speed <120.000000>; //<40.000000>;
			turn leg6 to y-axis <3.000000> speed <120.000000>; //<40.000000>;
			sleep 200;
		}
		turn leg1 to y-axis <43.005495> speed <120.000000>; //<40.000000>;
		turn leg1 to z-axis <0.000000> speed <120.000000>; //<40.000000>;
		turn leg2 to y-axis <0.000000> speed <120.000000>; //<40.000000>;
		turn leg2 to z-axis <0.000000> speed <120.000000>; //<40.000000>;
		turn leg3 to y-axis <34.005495> speed <120.000000>; //<40.000000>;
		turn leg3 to z-axis <31.005495> speed <120.000000>; //<40.000000>;
		turn leg4 to y-axis <-40.005495> speed <120.000000>; //<40.000000>;
		turn leg4 to z-axis <-31.005495> speed <120.000000>; //<40.000000>;
		turn leg5 to y-axis <-37.005495> speed <120.000000>; //<40.000000>;
		turn leg5 to z-axis <0.000000> speed <120.000000>; //<40.000000>;
		turn leg6 to y-axis <0.000000> speed <120.000000>; //<40.000000>;
		turn leg6 to z-axis <-45.010989> speed <120.000000>; //<40.000000>;
		sleep 200;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walk2();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
			turn leg1 to y-axis <0.000000> speed <100.000000>;
			turn leg1 to z-axis <0.000000> speed <100.000000>;
			turn leg2 to y-axis <0.000000> speed <100.000000>;
			turn leg2 to z-axis <0.000000> speed <100.000000>;
			turn leg3 to y-axis <0.000000> speed <100.000000>;
			turn leg3 to z-axis <0.000000> speed <100.000000>;
			turn leg4 to y-axis <0.000000> speed <100.000000>;
			turn leg4 to z-axis <0.000000> speed <100.000000>;
			turn leg5 to y-axis <0.000000> speed <100.000000>;
			turn leg5 to z-axis <0.000000> speed <100.000000>;
			turn leg6 to y-axis <0.000000> speed <100.000000>;
			turn leg6 to z-axis <0.000000> speed <100.000000>;
		}
	}
}

Create()
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	dont-cache turret1;
	bMoving = FALSE;
	gun_1 = base;
	gun_2 = base;
	restore_delay = 6000;
	start-script SmokeUnit();
	start-script MotionControl();
	spin radar around y-axis speed <100.021978>;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret1 to y-axis <0.000000> speed <90.000000>;
}

RestoreAfterDelay1()
{
	sleep restore_delay;
	turn rocket to x-axis <0.000000> speed <90.000000>;
	turn turret2 to y-axis <0.000000> speed <90.000000>;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <90.000000>;
	wait-for-turn turret1 around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <450.000000>;
	turn rocket to x-axis heading speed <450.000000>;
	start-script RestoreAfterDelay1();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		emit-sfx 1024 from flare1;
		move barrel1 to z-axis [-3.000000] speed [500.000000];
		sleep 150;
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0.000000] speed [3.000000];
	}
	if( gun_1 == 1 )
	{
		emit-sfx 1024 from flare2;
		move barrel2 to z-axis [-3.000000] speed [500.000000];
		sleep 150;
		wait-for-move barrel2 along z-axis;
		move barrel2 to z-axis [0.000000] speed [3.000000];
	}
	gun_1 = !gun_1;
}

FireSecondary()
{
	if( gun_2 == 0 )
	{
		show flare3;
		sleep 100;
		hide flare3;
		gun_2 = turret1;
		return (0);
	}
	if( gun_2 == 1 )
	{
		show flare4;
		sleep 100;
		hide flare4;
		gun_2 = base;
		return (0);
	}
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = flare1;
	}
	if( gun_1 == 1 )
	{
		piecenum = flare2;
	}
}

QuerySecondary(piecenum)
{
	if( gun_2 == 0 )
	{
		piecenum = flare3;
	}
	if( gun_2 == 1 )
	{
		piecenum = flare4;
	}
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	hide flare3;
	hide flare4;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare1 type BITMAPONLY | BITMAP4;
		explode flare2 type BITMAPONLY | BITMAP5;
		explode flare3 type BITMAPONLY | BITMAP1;
		explode flare4 type BITMAPONLY | BITMAP2;
		explode leg1 type BITMAPONLY | BITMAP3;
		explode leg2 type BITMAPONLY | BITMAP4;
		explode leg3 type BITMAPONLY | BITMAP5;
		explode leg4 type BITMAPONLY | BITMAP1;
		explode leg5 type BITMAPONLY | BITMAP2;
		explode leg6 type BITMAPONLY | BITMAP3;
		explode turret1 type BITMAPONLY | BITMAP4;
		explode turret2 type BITMAPONLY | BITMAP5;
		explode radar type BITMAPONLY | BITMAP1;
		explode rocket type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel1 type FALL | BITMAP1;
		explode barrel2 type FALL | BITMAP2;
		explode base type SHATTER | BITMAP3;
		explode flare1 type FALL | BITMAP4;
		explode flare2 type FALL | BITMAP5;
		explode flare3 type FALL | BITMAP1;
		explode flare4 type FALL | BITMAP2;
		explode leg1 type FALL | BITMAP3;
		explode leg2 type FALL | BITMAP4;
		explode leg3 type FALL | BITMAP5;
		explode leg4 type FALL | BITMAP1;
		explode leg5 type FALL | BITMAP2;
		explode leg6 type FALL | BITMAP3;
		explode turret1 type SHATTER | BITMAP4;
		explode turret2 type SHATTER | BITMAP5;
		explode radar type SHATTER | BITMAP1;
		explode rocket type SHATTER | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flare4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode leg5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode turret1 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode turret2 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode radar type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rocket type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode flare3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode flare4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode leg1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode leg2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leg3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode leg4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode leg5 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode leg6 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode turret1 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode turret2 type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode radar type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rocket type SHATTER | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
