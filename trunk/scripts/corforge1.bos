#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, upper2, upper1, lower1, lower2,
       ldoor2, udoor2, ldoor1, udoor1, lbox2, ubox2, lbox1, ubox1,
       gun2, gun1, blink;

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


activatescr()
{
	if( TRUE )
	{
		turn upper2 to x-axis <0.00000> now;
		turn upper2 to x-axis <180.03846> speed <194.63736>;
		turn upper1 to x-axis <0.00000> now;
		turn upper1 to x-axis <180.03846> speed <194.63736>;
		sleep 925;
	}
	if( TRUE )
	{
		move lower1 to x-axis [22.25000] speed [22.47476];
		move lower2 to x-axis [-22.37500] speed [22.60100];
		sleep 990;
	}
	if( TRUE )
	{
		move ldoor2 to y-axis [-0.37500] speed [4.62961];
		move udoor2 to y-axis [0.37500] speed [4.62961];
		move ldoor1 to y-axis [-0.37500] speed [4.62961];
		move udoor1 to y-axis [0.37500] speed [4.62961];
		turn udoor1 to y-axis <0.60440> speed <7.50549>;
		sleep 81;
	}
	if( TRUE )
	{
		move ldoor2 to x-axis [-9.12500] speed [19.17015];
		move udoor2 to x-axis [-9.12498] speed [19.17014];
		move ldoor1 to x-axis [9.12500] speed [19.17018];
		move udoor1 to x-axis [9.24998] speed [19.43275];
		sleep 476;
	}
	if( TRUE )
	{
		move pad to z-axis [15.62500] speed [27.22125];
		move lbox2 to y-axis [11.12500] speed [19.38152];
		move ubox2 to y-axis [-11.12500] speed [19.38150];
		move lbox1 to y-axis [11.12500] speed [19.38152];
		move ubox1 to y-axis [-11.12498] speed [19.38150];
		sleep 574;
	}
	if( TRUE )
	{
		move gun2 to z-axis [2.75000] speed [4.83302];
		move gun1 to z-axis [2.75000] speed [4.83302];
		turn gun2 to y-axis <90.01648> speed <158.20330>;
		turn gun1 to y-axis <-90.01648> speed <158.20330>;
		sleep 569;
	}
	sleep 29;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
		move pad to z-axis [15.62500] now;
		move lower1 to x-axis [22.25000] now;
		move lower2 to x-axis [-22.37500] now;
		move ldoor2 to x-axis [-9.12500] now;
		move ldoor2 to y-axis [-0.37500] now;
		move lbox2 to y-axis [11.12500] now;
		move udoor2 to x-axis [-9.12498] now;
		move udoor2 to y-axis [0.37500] now;
		move ubox2 to y-axis [-11.12500] now;
		move gun2 to z-axis [2.75000] now;
		move gun2 to z-axis [0.00000] speed [4.89323];
		move ldoor1 to x-axis [9.12500] now;
		move ldoor1 to y-axis [-0.37500] now;
		move lbox1 to y-axis [11.12500] now;
		move udoor1 to x-axis [9.24998] now;
		move udoor1 to y-axis [0.37500] now;
		move ubox1 to y-axis [-11.12498] now;
		move gun1 to z-axis [2.75000] now;
		move gun1 to z-axis [0.00000] speed [4.89323];
		turn upper2 to x-axis <180.03846> now;
		turn gun2 to y-axis <90.01648> now;
		turn gun2 to y-axis <0.00000> speed <160.18132>;
		turn upper1 to x-axis <180.03846> now;
		turn udoor1 to y-axis <0.60440> now;
		turn gun1 to y-axis <-90.01648> now;
		turn gun1 to y-axis <0.00000> speed <160.18132>;
		sleep 562;
	}
	if( TRUE )
	{
		move pad to z-axis [0.00000] speed [27.41228];
		move lbox2 to y-axis [0.00000] speed [19.51753];
		move ubox2 to y-axis [0.00000] speed [19.51753];
		move lbox1 to y-axis [0.00000] speed [19.51753];
		move ubox1 to y-axis [0.00000] speed [19.51753];
		sleep 570;
	}
	if( TRUE )
	{
		move ldoor2 to x-axis [0.00000] speed [15.95279];
		move udoor2 to x-axis [0.00000] speed [15.95279];
		move ldoor1 to x-axis [0.00000] speed [15.95280];
		move udoor1 to x-axis [0.00000] speed [16.17130];
		sleep 572;
	}
	if( TRUE )
	{
		move ldoor2 to y-axis [0.00000] speed [3.12500];
		move udoor2 to y-axis [0.00000] speed [3.12500];
		move ldoor1 to y-axis [0.00000] speed [3.12500];
		move udoor1 to y-axis [0.00000] speed [3.12500];
		turn udoor1 to y-axis <0.00000> speed <5.06044>;
		sleep 120;
	}
	if( TRUE )
	{
		move lower1 to x-axis [0.00000] speed [25.45767];
		move lower2 to x-axis [0.00000] speed [25.60068];
		sleep 874;
	}
	if( TRUE )
	{
		turn upper2 to x-axis <0.00000> speed <188.32418>;
		turn upper1 to x-axis <0.00000> speed <188.32418>;
		sleep 956;
	}
	sleep 31;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
	return (0);
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
	return (0);
}

Go()
{
	dont-cache beam1;
	dont-cache beam2;
	dont-cache gun1;
	dont-cache gun2;
	dont-cache lbox1;
	dont-cache lbox2;
	dont-cache ldoor1;
	dont-cache ldoor2;
	dont-cache lower1;
	dont-cache lower2;
	dont-cache pad;
	dont-cache ubox1;
	dont-cache ubox2;
	dont-cache udoor1;
	dont-cache udoor2;
	dont-cache upper1;
	dont-cache upper2;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache beam1;
	cache beam2;
	cache gun1;
	cache gun2;
	cache lbox1;
	cache lbox2;
	cache ldoor1;
	cache ldoor2;
	cache lower1;
	cache lower2;
	cache pad;
	cache ubox1;
	cache ubox2;
	cache udoor1;
	cache udoor2;
	cache upper1;
	cache upper2;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	dont-shade blink;
	dont-cache blink;
	dont-shade beam1;
	dont-shade beam2;
	dont-shade gun1;
	dont-shade gun2;
	dont-shade lbox1;
	dont-shade lbox2;
	dont-shade ldoor1;
	dont-shade ldoor2;
	dont-shade lower1;
	dont-shade lower2;
	dont-shade pad;
	dont-shade ubox1;
	dont-shade ubox2;
	dont-shade udoor1;
	dont-shade udoor2;
	dont-shade upper1;
	dont-shade upper2;
	unitviewer = FALSE;
	spray = base;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray != 0 )
	{
		piecenum = beam2;
	}
	spray = !spray;
	return (0);
}

Demo()
{
	unitviewer = TRUE;
	return (0);
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

StartBuilding()
{
	spin pad around y-axis speed <0.00000>;
	return (0);
}

StopBuilding()
{
	stop-spin pad around y-axis;
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		return (corpsetype);
	}
	corpsetype = 3;
	return (corpsetype);
}
