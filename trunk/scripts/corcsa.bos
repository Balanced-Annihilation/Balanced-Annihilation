#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, leftwing, rightwing, nanopoint;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE			2


activatescr()
{
	if( TRUE )
	{
		turn leftwing to z-axis <0.00000> now;
		turn leftwing to z-axis <90.02198> speed <98.48901>;
		turn rightwing to z-axis <0.00000> now;
		turn rightwing to z-axis <-90.02198> speed <98.48901>;
		sleep 914;
	}
	sleep 10;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
		turn leftwing to z-axis <90.02198> now;
		turn leftwing to z-axis <0.00000> speed <120.02747>;
		turn rightwing to z-axis <-90.02198> now;
		turn rightwing to z-axis <0.00000> speed <120.02747>;
		sleep 750;
	}
	sleep 10;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 == 3 )
		{
			emit-sfx 256 | 3 from base;
			emit-sfx 256 | 3 from leftwing;
			emit-sfx 256 | 3 from rightwing;
			emit-sfx 256 | 3 from nanopoint;
		}
		sleep 150;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

StartBuilding()
{
	set INBUILDSTANCE to 1;
	return (0);
}

StopBuilding()
{
	set INBUILDSTANCE to 0;
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = base;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		return (corpsetype);
	}
	corpsetype = 3;
	return (corpsetype);
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
	return (0);
}
