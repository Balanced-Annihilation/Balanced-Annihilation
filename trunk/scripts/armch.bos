#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, nanogun, door1, door2, plate, post, wake1,
       wake2, wake3, wake4, wake5, wake6, wake7, wake8, turret;

static-var  Static_Var_1, notBuilding, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE		2
#define SIG_BUILD		4	


activatescr()
{
	turn door1 to z-axis <0.000000> now;
	turn door1 to z-axis <-67.010989> speed <99.000000>;
	turn door2 to z-axis <0.000000> now;
	turn door2 to z-axis <67.010989> speed <99.000000>;
	sleep 677;

	move door1 to y-axis [-2.000000] speed [2.000000];
	move door2 to y-axis [-2.000000] speed [2.000000];
	move plate to y-axis [2.500000] speed [5.000000];
	sleep 688;

	turn post to x-axis <90.021978> speed <131.000000>;
	turn nanogun to x-axis <-90.021978> speed <131.000000>;
	sleep 687;
}

deactivatescr()
{
	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <160.000000>;
	wait-for-turn turret around y-axis;

	move door1 to y-axis [-2.000000] now;
	move door2 to y-axis [-2.000000] now;
	move plate to y-axis [2.500000] now;
	turn door1 to z-axis <-67.148352> now;
	turn door2 to z-axis <67.148352> now;
	turn post to x-axis <90.021978> now;
	turn post to x-axis <0.000000> speed <197.000000>;
	turn nanogun to x-axis <-90.021978> now;
	turn nanogun to x-axis <0.000000> speed <197.000000>;
	sleep 457;

	move door1 to y-axis [0.000000] speed [4.000000];
	move door2 to y-axis [0.000000] speed [4.000000];
	move plate to y-axis [0.000000] speed [8.000000];
	sleep 471;

	turn door1 to z-axis <0.000000> speed <143.000000>;
	turn door2 to z-axis <0.000000> speed <143.000000>;
	sleep 469;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 == 1 OR Static_Var_1 == 2)
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		sleep 300;
	}
}

StopMoving()
{
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script deactivatescr();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	notBuilding = 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(heading, pitch)
{
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	turn turret to y-axis heading speed <160.000000>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

/*
TargetHeading(Func_Var_1)
{
	Static_Var_2 = 0 - Func_Var_1;
}
*/

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( Static_Var_1 == 1 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode post type FALL | BITMAP1;
			explode base type BITMAPONLY | BITMAP2;
			explode beam type FALL | BITMAP3;
			explode door1 type BITMAPONLY | BITMAP4;
			explode door2 type BITMAPONLY | BITMAP5;
			explode nanogun type SHATTER | BITMAP1;
			explode plate type BITMAPONLY | BITMAP2;
			return (0);
		}
		corpsetype = 3;
		explode post type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nanogun type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( Static_Var_1 == 2 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode post type FALL | BITMAP1;
			explode base type BITMAPONLY | BITMAP2;
			explode beam type FALL | BITMAP3;
			explode door1 type BITMAPONLY | BITMAP4;
			explode door2 type BITMAPONLY | BITMAP5;
			explode nanogun type SHATTER | BITMAP1;
			explode plate type BITMAPONLY | BITMAP2;
			return (0);
		}
		corpsetype = 3;
		explode post type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nanogun type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode post type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nanogun type BITMAPONLY | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode post type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nanogun type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode post type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode nanogun type SHATTER | BITMAP1;
		explode plate type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode post type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door1 type BITMAPONLY | BITMAP4;
	explode door2 type BITMAPONLY | BITMAP5;
	explode nanogun type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode plate type BITMAPONLY | BITMAP2;
}
