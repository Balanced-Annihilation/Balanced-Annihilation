#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, barrel1, barrel2, barrel3, emit1, emit2, emit3,
       leg1, leg2, leg3, leg4, leg5, leg6, bodysect1, sect2,
       sect3, head, turretholder;

static-var  bMoving, Static_Var_2, restore_delay, gun_1;

// Signal definitions
#define SIG_AIM				2


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

walk2()
{
	if( bMoving )
	{
		turn sect2 to y-axis <0.000000> speed <50.000000>;
		turn sect3 to y-axis <0.000000> speed <50.000000>;
		turn leg1 to y-axis <43.796703> now;
		turn leg1 to y-axis <0.000000> speed <218.000000>;
		turn leg1 to z-axis <0.598901> now;
		turn leg1 to z-axis <0.000000> speed <3.000000>;
		turn leg2 to z-axis <0.000000> now;
		turn leg2 to z-axis <31.005495> speed <155.000000>;
		turn leg3 to y-axis <34.653846> now;
		turn leg3 to y-axis <34.005495> speed <3.000000>;
		turn leg3 to z-axis <31.626374> now;
		turn leg3 to z-axis <0.000000> speed <155.000000>;
		turn leg4 to y-axis <-40.148352> now;
		turn leg4 to y-axis <-40.005495> speed <0.000000>;
		turn leg4 to z-axis <-31.016484> now;
		turn leg4 to z-axis <0.000000> speed <152.000000>;
		turn leg5 to y-axis <-37.098901> now;
		turn leg5 to y-axis <0.000000> speed <185.000000>;
		turn leg5 to z-axis <0.000000> now;
		turn leg5 to z-axis <0.000000> speed <0.000000>;
		turn leg6 to y-axis <0.000000> now;
		turn leg6 to y-axis <-30.005495> speed <152.000000>;
		turn leg6 to z-axis <-45.016484> now;
		sleep 200;
	}
	if( bMoving )
	{
		turn sect2 to y-axis <-25.005495> speed <50.000000>;
		turn sect3 to y-axis <-30.005495> speed <50.000000>;
		turn leg1 to z-axis <31.005495> speed <158.000000>;
		turn leg2 to y-axis <34.005495> speed <173.000000>;
		turn leg2 to z-axis <31.005495> speed <0.000000>;
		turn leg3 to y-axis <0.000000> speed <170.000000>;
		turn leg3 to z-axis <0.000000> speed <3.000000>;
		turn leg4 to y-axis <0.000000> speed <200.000000>;
		turn leg5 to z-axis <-31.005495> speed <155.000000>;
		turn leg6 to z-axis <2.000000> speed <237.000000>;
		sleep 200;
	}
	if( bMoving )
	{
		turn sect2 to y-axis <0.000000> speed <50.000000>;
		turn sect3 to y-axis <0.000000> speed <50.000000>;
		turn leg1 to y-axis <55.010989> speed <279.000000>;
		turn leg1 to z-axis <31.005495> speed <3.000000>;
		turn leg2 to y-axis <34.005495> speed <0.000000>;
		turn leg2 to z-axis <0.000000> speed <152.000000>;
		turn leg3 to z-axis <31.005495> speed <158.000000>;
		turn leg4 to y-axis <0.000000> speed <3.000000>;
		turn leg4 to z-axis <-31.005495> speed <152.000000>;
		turn leg5 to y-axis <-31.005495> speed <158.000000>;
		turn leg5 to z-axis <-31.005495> speed <0.000000>;
		turn leg6 to y-axis <3.000000> speed <167.000000>;
		sleep 200;
	}
	turn sect2 to y-axis <25.005495> speed <50.000000>;
	turn sect3 to y-axis <30.005495> speed <50.000000>;
	turn leg1 to y-axis <43.005495> speed <60.000000>;
	turn leg1 to z-axis <0.000000> speed <152.000000>;
	turn leg2 to y-axis <0.000000> speed <173.000000>;
	turn leg2 to z-axis <0.000000> speed <3.000000>;
	turn leg3 to y-axis <34.005495> speed <173.000000>;
	turn leg3 to z-axis <31.005495> speed <0.000000>;
	turn leg4 to y-axis <-40.005495> speed <197.000000>;
	turn leg4 to z-axis <-31.005495> speed <0.000000>;
	turn leg5 to y-axis <-37.005495> speed <27.000000>;
	turn leg5 to z-axis <0.000000> speed <155.000000>;
	turn leg6 to y-axis <0.000000> speed <15.000000>;
	turn leg6 to z-axis <-45.010989> speed <237.000000>;
	sleep 200;
}

Stop()
{
	turn sect2 to y-axis <0.000000> speed <50.000000>;
	turn sect2 to y-axis <-2.000000> speed <50.000000>;
	turn sect2 to y-axis <2.000000> speed <50.000000>;
	turn sect2 to y-axis <0.000000> speed <50.000000>;
	turn sect3 to y-axis <0.000000> speed <50.000000>;
	turn sect3 to y-axis <-2.000000> speed <50.000000>;
	turn sect3 to y-axis <2.000000> speed <50.000000>;
	turn sect3 to y-axis <0.000000> speed <50.000000>;
	turn leg1 to y-axis <0.000000> speed <237.000000>;
	turn leg1 to z-axis <0.000000> speed <237.000000>;
	turn leg2 to y-axis <0.000000> speed <237.000000>;
	turn leg2 to z-axis <0.000000> speed <237.000000>;
	turn leg3 to y-axis <0.000000> speed <237.000000>;
	turn leg3 to z-axis <0.000000> speed <237.000000>;
	turn leg4 to y-axis <0.000000> speed <237.000000>;
	turn leg4 to z-axis <0.000000> speed <237.000000>;
	turn leg5 to y-axis <0.000000> speed <237.000000>;
	turn leg5 to z-axis <0.000000> speed <237.000000>;
	turn leg6 to y-axis <0.000000> speed <237.000000>;
	turn leg6 to z-axis <0.000000> speed <237.000000>;
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walk2();
		}
		if( !Func_Var_1 )
		{
			call-script Stop();
			sleep 100;
		}
	}
}

Create()
{
	bMoving = FALSE;
	gun_1 = base;
	restore_delay = 3000;
	start-script MotionControl();
	start-script SmokeUnit();
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <55.000000>;
	turn turret to x-axis <0.000000> speed <55.000000>;
	Static_Var_2 = 0;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <180.000000>;
	turn turret to x-axis <0.000000> - pitch speed <110.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret to y-axis heading speed <110.000000>;
	turn turret to x-axis <0.000000> - pitch speed <80.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		move barrel1 to z-axis [-3.000000] speed [400.000000];
		wait-for-move barrel1 along z-axis;
		move barrel1 to z-axis [0.000000] speed [3.000000];
		sleep 150;
		gun_1 = turret;
		return (0);
	}
	if( gun_1 == 1 )
	{
		move barrel2 to z-axis [-3.000000] speed [400.000000];
		wait-for-move barrel1 along z-axis;
		move barrel2 to z-axis [0.000000] speed [3.000000];
		sleep 150;
		gun_1 = barrel1;
		return (0);
	}
}

FireSecondary()
{
	move barrel3 to z-axis [-3.000000] speed [400.000000];
	wait-for-move barrel1 along z-axis;
	move barrel3 to z-axis [0.000000] speed [3.000000];
	sleep 150;
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = emit1;
		return (0);
	}
	if( gun_1 == 1 )
	{
		piecenum = emit2;
		return (0);
	}
	if( gun_1 == 2 )
	{
		piecenum = emit3;
		return (0);
	}
}

QuerySecondary(piecenum)
{
	piecenum = emit3;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP3;
		explode head type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode turret type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode barrel1 type SHATTER | BITMAP4;
		explode barrel2 type SHATTER | BITMAP5;
		explode barrel3 type SHATTER | BITMAP5;
		explode bodysect1 type BITMAPONLY | BITMAP3;
		explode sect2 type BITMAPONLY | BITMAP3;
		explode sect3 type BITMAPONLY | BITMAP3;
		explode leg1 type BITMAPONLY | BITMAP4;
		explode leg2 type BITMAPONLY | BITMAP3;
		explode leg3 type BITMAPONLY | BITMAP5;
		explode leg4 type BITMAPONLY | BITMAP3;
		explode leg5 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode leg6 type BITMAPONLY | BITMAP5;
		explode turretholder type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP3;
		explode head type SHATTER | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode turret type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode barrel1 type SHATTER | BITMAP4;
		explode barrel2 type SHATTER | BITMAP5;
		explode barrel3 type SHATTER | BITMAP5;
		explode bodysect1 type BITMAPONLY | BITMAP3;
		explode sect2 type BITMAPONLY | BITMAP3;
		explode sect3 type BITMAPONLY | BITMAP3;
		explode leg1 type SHATTER | BITMAP4;
		explode leg2 type BITMAPONLY | BITMAP3;
		explode leg3 type SHATTER | BITMAP5;
		explode leg4 type BITMAPONLY | BITMAP3;
		explode leg5 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode leg6 type BITMAPONLY | BITMAP5;
		explode turretholder type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP3;
		explode head type SHATTER | EXPLODE_ON_HIT | BITMAP3;
		explode turret type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode barrel1 type SHATTER | BITMAP4;
		explode barrel2 type SHATTER | BITMAP5;
		explode barrel3 type SHATTER | BITMAP5;
		explode bodysect1 type BITMAPONLY | BITMAP3;
		explode sect2 type BITMAPONLY | BITMAP3;
		explode sect3 type BITMAPONLY | BITMAP3;
		explode leg1 type BITMAPONLY | BITMAP4;
		explode leg2 type BITMAPONLY | BITMAP3;
		explode leg3 type BITMAPONLY | BITMAP5;
		explode leg4 type BITMAPONLY | BITMAP3;
		explode leg5 type FALL | EXPLODE_ON_HIT | BITMAP3;
		explode leg6 type BITMAPONLY | BITMAP5;
		explode turretholder type BITMAPONLY | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP3;
	explode head type SHATTER | EXPLODE_ON_HIT | BITMAP3;
	explode turret type FALL | EXPLODE_ON_HIT | BITMAP3;
	explode barrel1 type SHATTER | BITMAP4;
	explode barrel2 type SHATTER | BITMAP5;
	explode barrel3 type SHATTER | BITMAP5;
	explode bodysect1 type BITMAPONLY | BITMAP3;
	explode sect2 type BITMAPONLY | BITMAP3;
	explode sect3 type BITMAPONLY | BITMAP3;
	explode leg1 type BITMAPONLY | BITMAP4;
	explode leg2 type BITMAPONLY | BITMAP3;
	explode leg3 type BITMAPONLY | BITMAP5;
	explode leg4 type BITMAPONLY | BITMAP3;
	explode leg5 type FALL | EXPLODE_ON_HIT | BITMAP3;
	explode leg6 type BITMAPONLY | BITMAP5;
	explode turretholder type BITMAPONLY | BITMAP5;
}
