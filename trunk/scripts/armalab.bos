#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, centerbar1, centerbar2, quarter3, quarter4,
       quarter1, quarter2, nano2, nano1;

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


activatescr()
{
	if( TRUE )
	{
		move centerbar1 to x-axis [0.00000] now;
		move centerbar1 to x-axis [22.50000] speed [31.78256];
		move centerbar2 to x-axis [0.00000] now;
		move centerbar2 to x-axis [-22.50000] speed [31.59953];
		sleep 683;
	}
	if( TRUE )
	{
		move quarter3 to z-axis [16.00000] speed [23.22203];
		move quarter4 to z-axis [-14.87500] speed [21.58926];
		move quarter1 to z-axis [-14.62500] speed [21.22641];
		move quarter2 to z-axis [16.12500] speed [23.40346];
		sleep 689;
	}
	if( TRUE )
	{
		move nano2 to x-axis [10.12500] speed [14.65266];
		move nano1 to x-axis [-10.00000] speed [14.47174];
		sleep 691;
	}
	sleep 34;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
		move centerbar1 to x-axis [22.50000] now;
		move centerbar2 to x-axis [-22.50000] now;
		move nano2 to x-axis [10.12500] now;
		move nano2 to x-axis [0.00000] speed [14.82428];
		move quarter3 to z-axis [16.00000] now;
		move quarter4 to z-axis [-14.87500] now;
		move nano1 to x-axis [-10.00000] now;
		move nano1 to x-axis [0.00000] speed [14.64125];
		move quarter1 to z-axis [-14.62500] now;
		move quarter2 to z-axis [16.12500] now;
		sleep 683;
	}
	if( TRUE )
	{
		move quarter3 to z-axis [0.00000] speed [23.22203];
		move quarter4 to z-axis [0.00000] speed [21.58926];
		move quarter1 to z-axis [0.00000] speed [21.22641];
		move quarter2 to z-axis [0.00000] speed [23.40346];
		sleep 689;
	}
	if( TRUE )
	{
		move centerbar1 to x-axis [0.00000] speed [31.44354];
		move centerbar2 to x-axis [0.00000] speed [31.26266];
		sleep 691;
	}
	sleep 34;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 4 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from quarter1;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from quarter2;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from quarter3;
			}
			if( Func_Var_4 == 4 )
			{
				emit-sfx smoketype from quarter4;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
	return (0);
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
	return (0);
}

Go()
{
	dont-cache beam1;
	dont-cache beam2;
	dont-cache centerbar1;
	dont-cache centerbar2;
	dont-cache nano1;
	dont-cache nano2;
	dont-cache pad;
	dont-cache quarter1;
	dont-cache quarter2;
	dont-cache quarter3;
	dont-cache quarter4;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache beam1;
	cache beam2;
	cache centerbar1;
	cache centerbar2;
	cache nano1;
	cache nano2;
	cache pad;
	cache quarter1;
	cache quarter2;
	cache quarter3;
	cache quarter4;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	dont-shade beam1;
	dont-shade beam2;
	dont-shade centerbar1;
	dont-shade centerbar2;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade pad;
	dont-shade quarter1;
	dont-shade quarter2;
	dont-shade quarter3;
	dont-shade quarter4;
	unitviewer = FALSE;
	spray = base;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray != 0 )
	{
		piecenum = beam2;
	}
	spray = !spray;
	return (0);
}

Demo()
{
	unitviewer = TRUE;
	return (0);
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

StartBuilding()
{
	spin pad around y-axis speed <0.00000>;
	return (0);
}

StopBuilding()
{
	stop-spin pad around y-axis;
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | NOHEATCLOUD;
		explode beam1 type FALL | FIRE | BITMAP2 | NOHEATCLOUD;
		explode beam2 type FALL | SMOKE | BITMAP3 | NOHEATCLOUD;
		explode nano1 type SHATTER | BITMAP1 | NOHEATCLOUD;
		explode nano2 type SHATTER | BITMAP2 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | NOHEATCLOUD;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		explode nano1 type SHATTER | BITMAP1 | NOHEATCLOUD;
		explode nano2 type SHATTER | BITMAP2 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type SHATTER | NOHEATCLOUD;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	explode nano1 type SHATTER | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode nano2 type SHATTER | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	return (corpsetype);
}
