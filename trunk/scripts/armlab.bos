#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, door4A, door3A, door2A, door1A,
       stand1, stand2, nano2, nano1, door1, door2, door3, door4;

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


activatescr()
{
	move door4A to z-axis [0.000000] now;
	move door4A to z-axis [-24.000000] speed [24.048050];
	move door3A to z-axis [0.000000] now;
	move door3A to z-axis [-23.750000] speed [23.797592];
	move door2A to z-axis [0.000000] now;
	move door2A to z-axis [25.000000] speed [25.050095];
	move door1A to z-axis [0.000000] now;
	move door1A to z-axis [24.750000] speed [24.799545];
	turn stand1 to z-axis <0.000000> now;
	turn stand1 to z-axis <35.104396> speed <35.170330>;
	turn stand2 to z-axis <0.000000> now;
	turn stand2 to z-axis <-35.549451> speed <35.626374>;
	turn nano2 to z-axis <0.000000> now;
	turn nano2 to z-axis <102.170330> speed <102.379121>;
	turn nano1 to z-axis <0.000000> now;
	turn nano1 to z-axis <-100.824176> speed <101.016484>;
	sleep 1000;

	set ARMORED to 0;
	move door1 to x-axis [23.750000] speed [18.750000];
	move door2 to x-axis [-26.250000] speed [18.750000];
	move door3 to x-axis [23.750000] speed [18.750000];
	move door4 to x-axis [-26.250000] speed [18.750000];
	sleep 1000;
}

deactivatescr()
{
	move door1 to x-axis [23.750000] now;
	move door1 to x-axis [0.000000] speed [18.750000];
	move door2 to x-axis [-26.250000] now;
	move door2 to x-axis [0.000000] speed [18.750000];
	move door3 to x-axis [23.750000] now;
	move door3 to x-axis [0.000000] speed [18.750000];
	move door4 to x-axis [-26.250000] now;
	move door4 to x-axis [0.000000] speed [18.750000];
	move door4A to z-axis [-24.000000] now;
	move door3A to z-axis [-23.750000] now;
	move door2A to z-axis [25.000000] now;
	move door1A to z-axis [24.750000] now;
	turn stand1 to z-axis <35.104396> now;
	turn stand2 to z-axis <-35.549451> now;
	turn nano2 to z-axis <102.170330> now;
	turn nano1 to z-axis <-100.824176> now;
	sleep 1000;

	set ARMORED to 1;
	move door4A to z-axis [0.000000] speed [23.809525];
	move door3A to z-axis [0.000000] speed [23.561462];
	move door2A to z-axis [0.000000] speed [24.801575];
	move door1A to z-axis [0.000000] speed [24.553513];
	turn stand1 to z-axis <0.000000> speed <34.824176>;
	turn stand2 to z-axis <0.000000> speed <35.269231>;
	turn nano2 to z-axis <0.000000> speed <101.357143>;
	turn nano1 to z-axis <0.000000> speed <100.016484>;
	sleep 1000;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache beam1;
	dont-cache beam2;
	dont-cache door1;
	dont-cache door1A;
	dont-cache door2;
	dont-cache door2A;
	dont-cache door3;
	dont-cache door3A;
	dont-cache door4;
	dont-cache door4A;
	dont-cache nano1;
	dont-cache nano2;
	dont-cache pad;
	dont-cache stand1;
	dont-cache stand2;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache beam1;
	cache beam2;
	cache door1;
	cache door1A;
	cache door2;
	cache door2A;
	cache door3;
	cache door3A;
	cache door4;
	cache door4A;
	cache nano1;
	cache nano2;
	cache pad;
	cache stand1;
	cache stand2;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade beam1;
	dont-shade beam2;
	dont-shade door1;
	dont-shade door1A;
	dont-shade door2;
	dont-shade door2A;
	dont-shade door3;
	dont-shade door3A;
	dont-shade door4;
	dont-shade door4A;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade pad;
	dont-shade stand1;
	dont-shade stand2;
	unitviewer = FALSE;
	spray = base;
	set ARMORED to 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	piecenum = beam1 + spray;
	spray = !spray;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <0.000000>;
}

StopBuilding()
{
	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door1A type BITMAPONLY | BITMAP5;
		explode door2 type BITMAPONLY | BITMAP1;
		explode door2A type BITMAPONLY | BITMAP2;
		explode door3 type BITMAPONLY | BITMAP3;
		explode door3A type BITMAPONLY | BITMAP4;
		explode door4 type BITMAPONLY | BITMAP5;
		explode door4A type BITMAPONLY | BITMAP1;
		explode nano1 type BITMAPONLY | BITMAP2;
		explode nano2 type BITMAPONLY | BITMAP3;
		explode pad type BITMAPONLY | BITMAP4;
		explode stand1 type BITMAPONLY | BITMAP5;
		explode stand2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP1;
		explode beam1 type FALL | BITMAP2;
		explode beam2 type FALL | BITMAP3;
		explode door1 type FALL | BITMAP4;
		explode door1A type FALL | BITMAP5;
		explode door2 type FALL | BITMAP1;
		explode door2A type FALL | BITMAP2;
		explode door3 type FALL | BITMAP3;
		explode door3A type FALL | BITMAP4;
		explode door4 type FALL | BITMAP5;
		explode door4A type FALL | BITMAP1;
		explode nano1 type BITMAPONLY | BITMAP2;
		explode nano2 type BITMAPONLY | BITMAP3;
		explode pad type BITMAPONLY | BITMAP4;
		explode stand1 type BITMAPONLY | BITMAP5;
		explode stand2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | BITMAP1;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode door1A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode door2A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door3A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode door4A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode nano1 type BITMAPONLY | BITMAP2;
		explode nano2 type BITMAPONLY | BITMAP3;
		explode pad type BITMAPONLY | BITMAP4;
		explode stand1 type BITMAPONLY | BITMAP5;
		explode stand2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door1A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode door2A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door3A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode door4A type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode nano1 type BITMAPONLY | BITMAP2;
	explode nano2 type BITMAPONLY | BITMAP3;
	explode pad type BITMAPONLY | BITMAP4;
	explode stand1 type BITMAPONLY | BITMAP5;
	explode stand2 type BITMAPONLY | BITMAP1;
}
