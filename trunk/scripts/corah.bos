#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  emit1, emit2, emit3, base, launcher, pole, turret, arms,
       wake1, wake2, wake3, wake4, wake5, wake6, wake7, wake8,
       ground1, aimer;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, Static_Var_5,
            Static_Var_6, Static_Var_7, Static_Var_8;

// Signal definitions
#define SIG_MOVE			4


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( TRUE )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = 4;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 == 1 )
		{
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		if( Static_Var_1 == 2 )
		{
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
		}
		sleep 300;
	}
}

StopMoving()
{
	sleep 150;
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
}

Create()
{
	Static_Var_7 = 1;
	Static_Var_2 = 1;
	Static_Var_1 = 0;
	Static_Var_4 = 5000;
	Static_Var_8 = 0;
	hide ground1;
	start-script SmokeUnit();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
}

RestoreAfterDelay()
{
	sleep Static_Var_4;
	turn turret to y-axis <0.000000> speed <250.000000>;
	wait-for-turn turret around y-axis;
	turn arms to x-axis <0.000000> speed <150.000000>;
	turn launcher to x-axis <0.000000> speed <150.000000>;
	wait-for-turn arms around x-axis;
	Static_Var_8 = 0;
}

AimWeapon2(heading, pitch)
{
	signal 2;
	set-signal-mask 2;
	if( Static_Var_8 == 0 )
	{
		turn arms to x-axis <-77.000000> speed <150.000000>;
		turn launcher to x-axis <77.000000> speed <150.000000>;
		wait-for-turn arms around x-axis;
	}
	Static_Var_8 = 1;
	turn turret to y-axis heading speed <250.000000>;
	turn launcher to x-axis <90.000000> - pitch speed <150.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	++Static_Var_2;
	if( Static_Var_2 == 4 )
	{
		Static_Var_2 = 1;
	}
}

AimFromWeapon2(piecenum)
{
	piecenum = aimer;
}

QueryWeapon2(piecenum)
{
	if( Static_Var_2 == 1 )
	{
		piecenum = emit1;
	}
	if( Static_Var_2 == 2 )
	{
		piecenum = emit2;
	}
	if( Static_Var_2 == 3 )
	{
		piecenum = emit3;
	}
}

AimFromWeapon1(piecenum)
{
	piecenum = aimer;
}

QueryWeapon1(piecenum)
{
	if( Static_Var_2 == 1 )
	{
		piecenum = emit1;
	}
	if( Static_Var_2 == 2 )
	{
		piecenum = emit2;
	}
	if( Static_Var_2 == 3 )
	{
		piecenum = emit3;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		Static_Var_7 = 1;
		if( Static_Var_3 <= 2 )
		{
			Static_Var_7 = 0;
			corpsetype = 1;
	return corpsetype;
}
		if( Static_Var_7 )
		{
			corpsetype = 2;
	return corpsetype;
}
		explode base type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 3;
		explode arms type SHATTER | BITMAP1 | NOHEATCLOUD;
		explode base type SHATTER | NOHEATCLOUD;
		explode emit1 type FALL | BITMAP2 | NOHEATCLOUD;
		explode emit1 type FALL | BITMAP3 | NOHEATCLOUD;
		explode emit1 type FALL | BITMAP4 | NOHEATCLOUD;
		explode pole type FALL | BITMAP1 | NOHEATCLOUD;
		explode turret type FALL | BITMAP2 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 4;
		explode arms type SHATTER | BITMAP1 | NOHEATCLOUD;
		explode base type SHATTER | NOHEATCLOUD;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
		explode pole type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 4;
	explode arms type SHATTER | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode base type SHATTER | NOHEATCLOUD;
	explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	explode emit1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
	explode pole type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	return corpsetype;
}
