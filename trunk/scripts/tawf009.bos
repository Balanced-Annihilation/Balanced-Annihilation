#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  tube1, tube2, base, wake, wake2;

static-var  gun_1;

// Signal definitions
#define SIG_MOVE			2

Create()
{
	gun_1 = tube1;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 256 | 3 from wake;
		emit-sfx 256 | 3 from wake2;
		sleep 250;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

FirePrimary()
{
	gun_1 = !gun_1;
}

QueryPrimary(piecenum)
{
	piecenum = gun_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

AimPrimary(heading,pitch)
{
    signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
 	while( 255 > heading )
	{
		set UNKNOWN_UNIT_VALUE(82) to 0 - 1000 + get UNKNOWN_UNIT_VALUE(82);
		heading = heading + 1000;
		sleep 1;
	}
	while( heading > 255 )
	{
		set UNKNOWN_UNIT_VALUE(82) to 1000 + get UNKNOWN_UNIT_VALUE(82);
		heading = heading - 1000;
		sleep 1;
	}	
	return (1);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode tube1 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode tube1 type BITMAPONLY | BITMAP2;
		explode tube2 type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode tube1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode tube2 type SHATTER | EXPLODE_ON_HIT | BITMAP3;
}
