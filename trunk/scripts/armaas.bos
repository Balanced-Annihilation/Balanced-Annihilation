#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, missileemitt1, missileemitt2, base, missilebox1, missilebox2, turretgun1,
       turretgun2, wake1, wake2, gunbarrel1, gunbarrel2, ground;

static-var  gun_3, restore_delay, gun_2, oldHead;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM_2			4
#define SIG_AIM_3			8


SetDirection(heading)
{
	var spd;
	spd = (get ABS(oldHead) - get ABS(heading)) / 2;
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
	oldHead = heading;
}

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn ground to x-axis rockAng speed rockSpeed*4;
			wait-for-turn ground around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare2;
	hide flare1;
	gun_3 = flare1;
	gun_2 = flare1;
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 3;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turretgun1 to y-axis <0.000000> speed <75.000000>;
	turn turretgun2 to x-axis <0.000000> speed <75.000000>;
	turn missilebox1 to y-axis <0.000000> speed <75.000000>;
	turn missilebox1 to x-axis <0.000000> speed <75.000000>;
	turn missilebox2 to y-axis <0.000000> speed <75.000000>;
	turn missilebox2 to x-axis <0.000000> speed <75.000000>;
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.0> speed <3.0>;
		move base to y-axis [0.23] speed [0.23];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <3.0>;
		move base to y-axis [0.0] speed [0.23];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 4 from wake1;
		emit-sfx 2 from wake2;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 12000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <3.0>;
	move base to y-axis [0.0] speed [0.23];
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	if( gun_2 )
	{
		turn missilebox2 to y-axis heading speed <455.000000>;
		turn missilebox2 to x-axis <0.000000> - pitch speed <430.000000>;
		wait-for-turn missilebox2 around y-axis;
		wait-for-turn missilebox2 around x-axis;
	}
	else
	{
		turn missilebox1 to y-axis heading speed <455.000000>;
		turn missilebox1 to x-axis <0.000000> - pitch speed <430.000000>;
		wait-for-turn missilebox1 around y-axis;
		wait-for-turn missilebox1 around x-axis;
	}
	start-script RestoreAfterDelay();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn turretgun1 to y-axis heading speed <755.000000>;
	turn turretgun2 to x-axis <0.000000> - pitch speed <730.000000>;
	wait-for-turn turretgun1 around y-axis;
	wait-for-turn turretgun2 around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	gun_2 = !gun_2;
}

FireTertiary()
{
	if( gun_3 )
	{
		show flare2;
		move gunbarrel2 to z-axis [-2.400000] speed [500.000000];
		sleep 150;
		hide flare2;
		wait-for-move gunbarrel2 along z-axis;
		move gunbarrel2 to z-axis [0.000000] speed [3.000000];
	}
	else
	{
		show flare1;
		move gunbarrel1 to z-axis [-2.400000] speed [500.000000];
		sleep 150;
		hide flare1;
		wait-for-move gunbarrel1 along z-axis;
		move gunbarrel1 to z-axis [0.000000] speed [3.000000];
	}
	gun_3 = !gun_3;
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

AimFromSecondary(piecenum)
{
	piecenum = missilebox1 + gun_2;
}

AimFromTertiary(piecenum)
{
	piecenum = turretgun1;
}

QueryPrimary(piecenum)
{
	piecenum = base;
}

QuerySecondary(piecenum)
{
	piecenum = missileemitt1 + gun_2;
}

QueryTertiary(piecenum)
{
	piecenum = gun_3;
}

/*
AimWeapon4(heading, pitch)
{
	sleep 100;
	return (1);
}

FireWeapon4()
{
	sleep 100;
}

QueryWeapon4(piecenum)
{
	sleep 100;
}

AimFromWeapon4(piecenum)
{
	piecenum = base;
}
*/

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode missilebox1 type BITMAPONLY | BITMAP2;
		explode missilebox2 type BITMAPONLY | BITMAP3;
		explode missileemitt1 type BITMAPONLY | BITMAP4;
		explode missileemitt2 type BITMAPONLY | BITMAP5;
		explode flare1 type BITMAPONLY | BITMAP1;
		explode flare2 type BITMAPONLY | BITMAP2;
		explode gunbarrel1 type BITMAPONLY | BITMAP3;
		explode gunbarrel2 type BITMAPONLY | BITMAP4;
		explode turretgun1 type BITMAPONLY | BITMAP1;
		explode turretgun2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode missilebox1 type SHATTER | BITMAP2;
		explode missilebox2 type BITMAPONLY | BITMAP3;
		explode missileemitt1 type FALL | BITMAP4;
		explode missileemitt2 type FALL | BITMAP5;
		explode flare1 type FALL | BITMAP1;
		explode flare2 type FALL | BITMAP2;
		explode gunbarrel1 type BITMAPONLY | BITMAP3;
		explode gunbarrel2 type BITMAPONLY | BITMAP4;
		explode turretgun1 type FALL | BITMAP1;
		explode turretgun2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode missilebox1 type SHATTER | BITMAP2;
		explode missilebox2 type BITMAPONLY | BITMAP3;
		explode missileemitt1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode missileemitt2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode flare1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode flare2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode gunbarrel1 type BITMAPONLY | BITMAP3;
		explode gunbarrel2 type BITMAPONLY | BITMAP4;
		explode turretgun1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode turretgun2 type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode missilebox1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode missilebox2 type BITMAPONLY | BITMAP3;
	explode missileemitt1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode missileemitt2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode flare1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode flare2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode gunbarrel1 type BITMAPONLY | BITMAP3;
	explode gunbarrel2 type BITMAPONLY | BITMAP4;
	explode turretgun1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode turretgun2 type BITMAPONLY | BITMAP2;
}
