#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flap2, flap3, flap4, flap1, topcap, glowingthing;

static-var  Static_Var_1;

#define WHAT_DO 1024

activatescr()
{
	if( TRUE )
	{
		move flap2 to z-axis [0.000000] now;
		move flap3 to z-axis [0.000000] now;
		move flap4 to x-axis [0.000000] now;
		turn flap3 to z-axis <0.000000> now;
		turn flap3 to z-axis <-69.016484> speed <261.000000>;
		sleep 265;
	}
	if( TRUE )
	{
		turn flap2 to x-axis <-4.000000> speed <18.000000>;
		turn flap4 to x-axis <-86.016484> speed <324.000000>;
		sleep 266;
	}
	if( TRUE )
	{
		turn flap2 to z-axis <69.016484> speed <260.000000>;
		sleep 266;
	}
	if( TRUE )
	{
		turn flap1 to x-axis <89.016484> speed <336.000000>;
		sleep 266;
	}
	if( TRUE )
	{
		turn topcap to y-axis <45.010989> speed <169.000000>;
		sleep 266;
	}
	if( TRUE )
	{
		move topcap to y-axis [-16.050000] speed [60.000000];
		sleep 267;
	}
	if( TRUE )
	{
		turn topcap to z-axis <-180.043956> speed <676.000000>;
		sleep 266;
	}
	if( TRUE )
	{
		move topcap to y-axis [-0.700000] speed [57.000000];
		sleep 266;
	}
	sleep 266;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		move flap2 to z-axis [0.000000] now;
		move flap3 to z-axis [0.000000] now;
		move flap4 to x-axis [0.000000] now;
		move topcap to y-axis [-0.700000] now;
		move topcap to y-axis [-16.050000] speed [57.000000];
		turn flap1 to x-axis <89.406593> now;
		turn flap2 to x-axis <-4.857143> now;
		turn flap2 to z-axis <69.324176> now;
		turn flap3 to z-axis <-69.324176> now;
		turn flap4 to x-axis <-86.357143> now;
		turn topcap to y-axis <45.010989> now;
		turn topcap to z-axis <-180.043956> now;
		sleep 265;
	}
	if( TRUE )
	{
		turn topcap to z-axis <0.000000> speed <676.000000>;
		sleep 266;
	}
	if( TRUE )
	{
		move topcap to y-axis [0.000000] speed [60.000000];
		sleep 266;
	}
	if( TRUE )
	{
		turn topcap to y-axis <0.000000> speed <169.000000>;
		sleep 266;
	}
	if( TRUE )
	{
		turn flap1 to x-axis <0.000000> speed <334.000000>;
		sleep 267;
	}
	if( TRUE )
	{
		turn flap2 to z-axis <0.000000> speed <260.000000>;
		sleep 266;
	}
	if( TRUE )
	{
		turn flap2 to x-axis <0.000000> speed <18.000000>;
		turn flap4 to x-axis <0.000000> speed <324.000000>;
		sleep 266;
	}
	if( TRUE )
	{
		turn flap3 to z-axis <0.000000> speed <260.000000>;
		sleep 266;
	}
	sleep 266;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache flap1;
	dont-cache flap2;
	dont-cache flap3;
	dont-cache flap4;
	dont-cache topcap;
	dont-cache glowingthing;
	call-script activatescr();
	set ARMORED to 0;
}

Stop()
{
	set ARMORED to 1;
	call-script deactivatescr();
	cache flap1;
	cache flap2;
	cache flap3;
	cache flap4;
	cache topcap;
	cache glowingthing;
}

static-var  mmState;
ImAMetalMaker()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 150;
	}
	mmState = -1;
	while( TRUE )
	{
		if ((get WHAT_DO) == 1)
		{
			if (mmState != 1) {
				call-script Go();
				mmState = 1;
			}
		}
		else
		{
			if (mmState != 0) {
				call-script Stop();
				mmState = 0;
			}
		}
		sleep 1000;
	}
}


Create()
{
	dont-shade glowingthing;
	cache glowingthing;
	dont-shade base;
	dont-shade flap1;
	dont-shade flap2;
	dont-shade flap3;
	dont-shade flap4;
	dont-shade topcap;
	start-script SmokeUnit();
	Static_Var_1 = 0;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script ImAMetalMaker();
	set ARMORED to 1;
}


HitByWeapon(Func_Var_1, Func_Var_2)
{
	if( get ACTIVATION )
	{
		Static_Var_1 = 1;
	}
	if( Static_Var_1 )
	{
		signal 2;
		set-signal-mask 2;
		set ACTIVATION to 0;
		sleep 8000;
		Static_Var_1 = 0;
		set ACTIVATION to 100;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode glowingthing type BITMAPONLY | BITMAP2;
		explode flap1 type BITMAPONLY | BITMAP3;
		explode flap2 type BITMAPONLY | BITMAP4;
		explode flap3 type BITMAPONLY | BITMAP5;
		explode flap4 type BITMAPONLY | BITMAP1;
		explode topcap type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode glowingthing type SHATTER | BITMAP2;
		explode flap1 type FALL | BITMAP3;
		explode flap2 type FALL | BITMAP4;
		explode flap3 type FALL | BITMAP5;
		explode flap4 type FALL | BITMAP1;
		explode topcap type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode glowingthing type SHATTER | BITMAP2;
		explode flap1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flap2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flap3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode flap4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode topcap type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode glowingthing type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode flap1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flap2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flap3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode flap4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode topcap type BITMAPONLY | BITMAP2;
}
