#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, head, rupleg1, rupleg2, rupleg3, lupleg1, lupleg2, lupleg3,
       lleg3, lleg2, lleg1, rleg3, rleg2, rleg1, nano1, nano2;

static-var  bMoving, Static_Var_2, Static_Var_3, statechg_DesiredState, statechg_StateChanging;


walk()
{
	if( bMoving )
	{
		turn base to x-axis <2.09890> now;
		turn base to x-axis <0.00000> speed <21.00000>;
		turn base to y-axis <1.04945> now;
		turn base to y-axis <0.00000> speed <3.00000>;
		turn rupleg1 to y-axis <27.42308> now;
		turn rupleg1 to y-axis <7.00000> speed <198.00000>;
		turn rupleg2 to y-axis <-13.35165> now;
		turn rupleg2 to z-axis <0.00000> now;
		turn rupleg2 to z-axis <27.00549> speed <276.00000>;
		turn rupleg3 to y-axis <27.77473> now;
		turn rupleg3 to y-axis <7.00000> speed <205.00000>;
		turn lupleg1 to y-axis <21.43407> now;
		turn lupleg1 to z-axis <0.00000> now;
		turn lupleg1 to z-axis <-24.00549> speed <247.00000>;
		turn lupleg2 to y-axis <-14.41209> now;
		turn lupleg2 to y-axis <0.00000> speed <138.00000>;
		turn lupleg2 to z-axis <-7.37912> now;
		turn lupleg2 to z-axis <0.00000> speed <74.00000>;
		turn lupleg3 to y-axis <13.35165> now;
		turn lupleg3 to z-axis <0.00000> now;
		turn lupleg3 to z-axis <-45.01099> speed <456.00000>;
		turn lleg3 to z-axis <0.00000> now;
		turn lleg3 to z-axis <35.00549> speed <357.00000>;
		turn lleg2 to z-axis <0.00000> now;
		turn lleg2 to z-axis <-11.00000> speed <120.00000>;
		turn lleg1 to z-axis <0.00000> now;
		turn lleg1 to z-axis <11.00000> speed <116.00000>;
		turn rleg3 to z-axis <0.00000> now;
		turn rleg3 to z-axis <8.00000> speed <84.00000>;
		turn rleg2 to z-axis <0.00000> now;
		turn rleg2 to z-axis <-34.00549> speed <350.00000>;
		turn rleg1 to z-axis <0.00000> now;
		turn rleg1 to z-axis <9.00000> speed <95.00000>;
		sleep 149;
	}
	if( bMoving )
	{
		turn base to x-axis <-1.00000> speed <10.00000>;
		turn base to y-axis <0.00000> speed <10.00000>;
		turn rupleg1 to y-axis <-13.00000> speed <207.00000>;
		turn rupleg2 to y-axis <8.00000> speed <221.00000>;
		turn rupleg2 to z-axis <54.01099> speed <267.00000>;
		turn rupleg3 to y-axis <-14.00000> speed <218.00000>;
		turn lupleg1 to y-axis <1.00000> speed <200.00000>;
		turn lupleg1 to z-axis <-64.01099> speed <400.00000>;
		turn lupleg2 to y-axis <20.00000> speed <214.00000>;
		turn lupleg3 to y-axis <-10.00000> speed <235.00000>;
		turn lupleg3 to z-axis <-75.01648> speed <305.00000>;
		turn lleg3 to z-axis <63.01099> speed <281.00000>;
		turn lleg2 to z-axis <0.00000> speed <119.00000>;
		turn lleg1 to z-axis <66.01099> speed <548.00000>;
		turn rleg3 to z-axis <0.00000> speed <84.00000>;
		turn rleg2 to z-axis <-63.01099> speed <288.00000>;
		turn rleg1 to z-axis <0.00000> speed <94.00000>;
		sleep 150;
	}
	if( bMoving )
	{
		turn base to x-axis <-1.00000> speed <3.00000>;
		turn base to y-axis <-1.00000> speed <6.00000>;
		turn rupleg1 to y-axis <-20.00000> speed <69.00000>;
		turn rupleg2 to y-axis <17.00000> speed <83.00000>;
		turn rupleg2 to z-axis <8.00000> speed <454.00000>;
		turn rupleg3 to y-axis <-20.00000> speed <55.00000>;
		turn lupleg1 to y-axis <-10.00000> speed <118.00000>;
		turn lupleg1 to z-axis <-14.00000> speed <499.00000>;
		turn lupleg2 to y-axis <31.00549> speed <104.00000>;
		turn lupleg3 to y-axis <-15.00000> speed <55.00000>;
		turn lupleg3 to z-axis <-10.00000> speed <646.00000>;
		turn lleg3 to z-axis <17.00000> speed <454.00000>;
		turn lleg1 to z-axis <10.00000> speed <555.00000>;
		turn rleg2 to z-axis <-9.00000> speed <534.00000>;
		sleep 151;
	}
	if( bMoving )
	{
		turn base to x-axis <0.00000> speed <7.00000>;
		turn base to y-axis <0.00000> speed <10.00000>;
		turn rupleg1 to y-axis <-13.00000> speed <70.00000>;
		turn rupleg1 to z-axis <39.00549> speed <393.00000>;
		turn rupleg2 to y-axis <11.00000> speed <59.00000>;
		turn rupleg2 to z-axis <-2.00000> speed <105.00000>;
		turn rupleg3 to y-axis <-3.00000> speed <168.00000>;
		turn rupleg3 to z-axis <28.00549> speed <284.00000>;
		turn lupleg1 to y-axis <0.00000> speed <101.00000>;
		turn lupleg1 to z-axis <2.00000> speed <165.00000>;
		turn lupleg2 to y-axis <19.00000> speed <116.00000>;
		turn lupleg2 to z-axis <-40.00549> speed <407.00000>;
		turn lupleg3 to y-axis <-7.00000> speed <84.00000>;
		turn lupleg3 to z-axis <4.00000> speed <151.00000>;
		turn lleg3 to z-axis <0.00000> speed <179.00000>;
		turn lleg2 to z-axis <32.00549> speed <327.00000>;
		turn lleg1 to z-axis <0.00000> speed <105.00000>;
		turn rleg3 to z-axis <-17.00000> speed <175.00000>;
		turn rleg2 to z-axis <0.00000> speed <98.00000>;
		turn rleg1 to z-axis <-19.00000> speed <196.00000>;
		sleep 150;
	}
	if( bMoving )
	{
		turn base to x-axis <0.00000> speed <14.00000>;
		turn base to y-axis <1.00000> speed <14.00000>;
		turn rupleg1 to y-axis <8.00000> speed <210.00000>;
		turn rupleg1 to z-axis <52.01099> speed <133.00000>;
		turn rupleg2 to y-axis <0.00000> speed <112.00000>;
		turn rupleg3 to y-axis <15.00000> speed <189.00000>;
		turn rupleg3 to z-axis <48.01099> speed <196.00000>;
		turn lupleg1 to y-axis <9.00000> speed <98.00000>;
		turn lupleg2 to y-axis <3.00000> speed <158.00000>;
		turn lupleg2 to z-axis <-68.01648> speed <277.00000>;
		turn lupleg3 to y-axis <1.00000> speed <91.00000>;
		turn lleg3 to z-axis <-10.00000> speed <101.00000>;
		turn lleg2 to z-axis <64.01099> speed <316.00000>;
		turn lleg1 to z-axis <-5.00000> speed <59.00000>;
		turn rleg3 to z-axis <-52.01099> speed <348.00000>;
		turn rleg2 to z-axis <3.00000> speed <35.00000>;
		turn rleg1 to z-axis <-50.01099> speed <309.00000>;
		sleep 150;
	}
	if( bMoving )
	{
		turn base to x-axis <1.00000> speed <7.00000>;
		turn base to y-axis <1.00000> speed <3.00000>;
		turn rupleg1 to y-axis <16.00000> speed <84.00000>;
		turn rupleg1 to z-axis <39.00549> speed <133.00000>;
		turn rupleg2 to y-axis <-11.00000> speed <112.00000>;
		turn rupleg3 to y-axis <24.00549> speed <87.00000>;
		turn rupleg3 to z-axis <28.00549> speed <196.00000>;
		turn lupleg1 to y-axis <20.00000> speed <105.00000>;
		turn lupleg2 to y-axis <-3.00000> speed <77.00000>;
		turn lupleg2 to z-axis <-40.00549> speed <277.00000>;
		turn lupleg3 to y-axis <18.00000> speed <165.00000>;
		turn lleg3 to z-axis <0.00000> speed <101.00000>;
		turn lleg2 to z-axis <37.00549> speed <267.00000>;
		turn lleg1 to z-axis <0.00000> speed <59.00000>;
		turn rleg3 to z-axis <-17.00000> speed <348.00000>;
		turn rleg2 to z-axis <0.00000> speed <35.00000>;
		turn rleg1 to z-axis <-23.00549> speed <267.00000>;
		sleep 150;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.00000>;
	turn base to x-axis anglex speed <105.00000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.00000> speed <30.00000>;
	turn base to x-axis <0.00000> speed <30.00000>;
	return (0);
}

Go()
{
	turn head to y-axis Static_Var_3 speed <160.00000>;
	wait-for-turn head around y-axis;
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn head to y-axis <0.00000> speed <160.00000>;
	wait-for-turn head around y-axis;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walk();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	Static_Var_2 = 0;
	bMoving = FALSE;
	start-script SmokeUnit();
	call-script InitState();
	start-script MotionControl();
	return (0);
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

StartBuilding(Func_Var_1)
{
	Static_Var_3 = Func_Var_1;
	start-script RequestState(0);
	return (0);
}

StopBuilding()
{
	start-script RequestState(1);
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_2 == 0 )
	{
		piecenum = nano1;
		Static_Var_2 = 1;
		return (0);
	}
	if( Static_Var_2 == 1 )
	{
		piecenum = nano2;
		Static_Var_2 = 0;
	}
	return (0);
}

TargetHeading(Func_Var_1)
{
	Static_Var_3 = 0 - Func_Var_1;
	return (0);
}

AimPrimary()
{
	return (1);
}

FirePrimary()
{
	sleep 150;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = head;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = head;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		return (corpsetype);
	}
	corpsetype = 3;
	return (corpsetype);
}
