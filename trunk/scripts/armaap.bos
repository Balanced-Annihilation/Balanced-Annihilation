#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, building1, building2, nanobox1, nanobox2,
       nano2, nano1, lights, radar, blinka, blinkb;

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


Standby()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 100;
	}
	while( TRUE )
	{
		emit-sfx 1024 + 0 from blinka;
		sleep 1150;
		emit-sfx 1024 + 0 from blinkb;
		sleep 1150;
	}
	sleep 50;
	start-script Standby();
}
activatescr()
{
	if( TRUE )
	{
		move building1 to x-axis [0.000000] now;
		move building1 to x-axis [7.800000] speed [15.175098];
		move building2 to x-axis [0.000000] now;
		move building2 to x-axis [-7.850000] speed [15.272375];
		sleep 514;
	}
	if( TRUE )
	{
		move nanobox1 to x-axis [7.700000] speed [14.864862];
		move nanobox2 to x-axis [-7.750000] speed [14.961389];
		sleep 518;
	}
	if( TRUE )
	{
		move nano2 to z-axis [4.000000] speed [7.707129];
		move nano1 to z-axis [3.549994] speed [6.840076];
		sleep 519;
	}
	sleep 26;
}

deactivatescr()
{
	if( TRUE )
	{
		move nanobox1 to x-axis [7.700000] now;
		move nanobox2 to x-axis [-7.750000] now;
		move building1 to x-axis [7.800000] now;
		move building2 to x-axis [-7.850000] now;
		move nano2 to z-axis [4.000000] now;
		move nano2 to z-axis [0.000000] speed [7.782098];
		move nano1 to z-axis [3.549994] now;
		move nano1 to z-axis [0.000000] speed [6.906610];
		sleep 514;
	}
	if( TRUE )
	{
		move nanobox1 to x-axis [0.000000] speed [14.864862];
		move nanobox2 to x-axis [0.000000] speed [14.961389];
		sleep 518;
	}
	if( TRUE )
	{
		move building1 to x-axis [0.000000] speed [15.028900];
		move building2 to x-axis [0.000000] speed [15.125244];
		sleep 519;
	}
	sleep 26;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			Func_Var_4 = Rand( 1, 3 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from building1;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from building2;
			}
			if( Func_Var_4 == 3 )
			{
				emit-sfx smoketype from pad;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache beam1;
	dont-cache beam2;
	dont-cache building1;
	dont-cache building2;
	dont-cache nano1;
	dont-cache nano2;
	dont-cache nanobox1;
	dont-cache nanobox2;
	dont-cache pad;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache beam1;
	cache beam2;
	cache building1;
	cache building2;
	cache nano1;
	cache nano2;
	cache nanobox1;
	cache nanobox2;
	cache pad;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-cache lights;
	dont-shade lights;
	dont-cache radar;
	dont-shade radar;
	dont-shade beam1;
	dont-shade beam2;
	dont-shade building1;
	dont-shade building2;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade nanobox1;
	dont-shade nanobox2;
	dont-shade pad;
	unitviewer = FALSE;
	spray = base;
	call-script InitState();
	start-script SmokeUnit();
	start-script Standby();
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	spin radar around y-axis speed <150.032967>;
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray != 0 )
	{
		piecenum = beam2;
	}
	spray = !spray;
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <30.005495>;
}

StopBuilding()
{
	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode building1 type BITMAPONLY | BITMAP2;
		explode lights type SHATTER | BITMAP4;
		explode nano2 type BITMAPONLY | BITMAP1;
		explode nanobox1 type BITMAPONLY | BITMAP2;
		explode pad type BITMAPONLY | BITMAP4;
		explode radar type BITMAPONLY | BITMAP5;
		explode beam2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode building1 type BITMAPONLY | BITMAP2;
		explode building2 type BITMAPONLY | BITMAP3;
		explode lights type SHATTER | BITMAP4;
		explode nano1 type BITMAPONLY | BITMAP5;
		explode nano2 type BITMAPONLY | BITMAP1;
		explode nanobox1 type BITMAPONLY | BITMAP2;
		explode nanobox2 type BITMAPONLY | BITMAP3;
		explode pad type BITMAPONLY | BITMAP4;
		explode radar type BITMAPONLY | BITMAP5;
		explode beam1 type BITMAPONLY | BITMAP1;
		explode beam2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode building1 type BITMAPONLY | BITMAP2;
		explode building2 type BITMAPONLY | BITMAP3;
		explode lights type SHATTER | BITMAP5;
		explode nano1 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
		explode nano2 type BITMAPONLY | BITMAP5;
		explode nanobox1 type BITMAPONLY | BITMAP2;
		explode nanobox2 type BITMAPONLY | BITMAP3;
		explode pad type BITMAPONLY | BITMAP4;
		explode radar type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode beam1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode beam2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode building1 type BITMAPONLY | BITMAP2;
	explode building2 type BITMAPONLY | BITMAP3;
	explode lights type SHATTER | BITMAP5;
	explode nano1 type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode nano2 type BITMAPONLY | BITMAP5;
	explode nanobox1 type BITMAPONLY | BITMAP2;
	explode nanobox2 type BITMAPONLY | BITMAP3;
	explode pad type BITMAPONLY | BITMAP4;
	explode radar type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode beam1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode beam2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
}
