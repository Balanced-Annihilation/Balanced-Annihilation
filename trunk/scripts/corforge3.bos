#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, wing1, wing2, wing3, drawer1,
       drawer2, gun2, gun1, blink;

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


activatescr()
{
	if( TRUE )
	{
		turn wing1 to z-axis <0.00000> now;
		turn wing1 to z-axis <-90.01648> speed <180.75824>;
		turn wing2 to x-axis <0.00000> now;
		turn wing2 to x-axis <-90.01648> speed <180.75824>;
		turn wing3 to z-axis <0.00000> now;
		turn wing3 to z-axis <90.01648> speed <180.75824>;
		sleep 498;
	}
	if( TRUE )
	{
		turn wing1 to z-axis <-180.03846> speed <180.75824>;
		turn wing2 to x-axis <-179.50000> speed <179.68132>;
		turn wing3 to z-axis <179.50000> speed <179.68132>;
		sleep 498;
	}
	if( TRUE )
	{
		move drawer1 to y-axis [20.62500] speed [32.84238];
		move drawer2 to y-axis [20.50000] speed [32.64330];
		move pad to z-axis [23.00000] speed [36.62421];
		sleep 628;
	}
	if( TRUE )
	{
		move gun2 to x-axis [7.75000] speed [16.48936];
		move gun2 to z-axis [7.75000] speed [16.48935];
		move gun1 to x-axis [-7.75000] speed [16.48935];
		move gun1 to z-axis [7.87500] speed [16.75529];
		sleep 470;
	}
	sleep 6;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
		move drawer1 to y-axis [20.62500] now;
		move drawer2 to y-axis [20.50000] now;
		move pad to z-axis [23.00000] now;
		move gun2 to x-axis [7.75000] now;
		move gun2 to x-axis [0.00000] speed [8.00618];
		move gun2 to z-axis [7.75000] now;
		move gun2 to z-axis [0.00000] speed [8.00618];
		move gun1 to x-axis [-7.75000] now;
		move gun1 to x-axis [0.00000] speed [8.00618];
		move gun1 to z-axis [7.87500] now;
		move gun1 to z-axis [0.00000] speed [8.13531];
		turn wing1 to z-axis <-180.03846> now;
		turn wing2 to x-axis <-179.50000> now;
		turn wing3 to z-axis <179.50000> now;
		sleep 968;
	}
	if( TRUE )
	{
		move drawer1 to y-axis [0.00000] speed [32.68620];
		move drawer2 to y-axis [0.00000] speed [32.48810];
		move pad to z-axis [0.00000] speed [36.45006];
		sleep 631;
	}
	if( TRUE )
	{
		turn wing1 to z-axis <-90.01648> speed <358.64835>;
		turn wing2 to x-axis <-90.01648> speed <356.50549>;
		turn wing3 to z-axis <90.01648> speed <356.50549>;
		sleep 251;
	}
	if( TRUE )
	{
		turn wing1 to z-axis <0.00000> speed <358.64835>;
		turn wing2 to x-axis <0.00000> speed <358.64835>;
		turn wing3 to z-axis <0.00000> speed <358.64835>;
		sleep 251;
	}
	sleep 12;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
	return (0);
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
	return (0);
}

Go()
{
	dont-cache beam1;
	dont-cache beam2;
	dont-cache drawer1;
	dont-cache drawer2;
	dont-cache gun1;
	dont-cache gun2;
	dont-cache pad;
	dont-cache wing1;
	dont-cache wing2;
	dont-cache wing3;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache beam1;
	cache beam2;
	cache drawer1;
	cache drawer2;
	cache gun1;
	cache gun2;
	cache pad;
	cache wing1;
	cache wing2;
	cache wing3;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	dont-shade blink;
	dont-cache blink;
	dont-shade beam1;
	dont-shade beam2;
	dont-shade drawer1;
	dont-shade drawer2;
	dont-shade gun1;
	dont-shade gun2;
	dont-shade pad;
	dont-shade wing1;
	dont-shade wing2;
	dont-shade wing3;
	unitviewer = FALSE;
	spray = base;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray != 0 )
	{
		piecenum = beam2;
	}
	spray = !spray;
	return (0);
}

Demo()
{
	unitviewer = TRUE;
	return (0);
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

StartBuilding()
{
	spin pad around y-axis speed <0.00000>;
	return (0);
}

StopBuilding()
{
	stop-spin pad around y-axis;
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | NOHEATCLOUD;
		explode beam1 type FALL | BITMAP2 | NOHEATCLOUD;
		explode beam2 type FALL | BITMAP3 | NOHEATCLOUD;
		explode blink type SHATTER | BITMAP4 | NOHEATCLOUD;
		explode drawer1 type FALL | BITMAP5 | NOHEATCLOUD;
		explode drawer2 type FALL | BITMAP1 | NOHEATCLOUD;
		explode gun1 type FALL | BITMAP2 | NOHEATCLOUD;
		explode gun2 type FALL | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | NOHEATCLOUD;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		explode blink type SHATTER | BITMAP4 | NOHEATCLOUD;
		explode drawer1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
		explode drawer2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type SHATTER | NOHEATCLOUD;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	explode blink type SHATTER | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
	explode drawer1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
	explode drawer2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	return (corpsetype);
}
