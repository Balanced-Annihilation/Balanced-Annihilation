#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  frame, flare, turret, pillartops, barrel2, turretback, barrel1, door2,
       door1, barrel3, hole, turretssides, ground;

static-var  Static_Var_1, restore_delay, statechg_DesiredState, statechg_StateChanging, Static_Var_5;


activatescr()
{
	move pillartops to y-axis [-9.150000] now;
	move barrel2 to z-axis [-2.450000] now;
	move turretback to z-axis [1.300000] now;
	move barrel1 to z-axis [-12.550000] now;
	move door2 to y-axis [0.000000] now;
	move door2 to y-axis [0.000000] speed [0.000012];
	turn door1 to z-axis <0.000000> now;
	turn door1 to z-axis <-88.615385> speed <300.390110>;
	turn door2 to z-axis <0.000000> now;
	turn door2 to z-axis <89.313187> speed <302.769231>;
	sleep 295;

	move pillartops to y-axis [1.450000] speed [17.263843];
	move door1 to y-axis [-7.699994] speed [12.540704];
	move door2 to y-axis [-7.699994] speed [12.540717];
	sleep 614;

	move barrel2 to z-axis [0.000000] speed [7.753162];
	move turretback to z-axis [0.000000] speed [4.113916];
	move barrel1 to z-axis [0.000000] speed [39.715192];
	sleep 316;
}

deactivatescr()
{
		move barrel2 to z-axis [0.000000] now;
		move barrel2 to z-axis [-2.450000] speed [8.812946];
		move turretback to z-axis [0.000000] now;
		move turretback to z-axis [1.300000] speed [4.676251];
		move barrel1 to z-axis [0.000000] now;
		move barrel1 to z-axis [-12.550000] speed [45.143878];
		move door1 to y-axis [-7.699994] now;
		move door2 to y-axis [-7.699994] now;
		turn door1 to z-axis <-88.615385> now;
		turn door2 to z-axis <89.313187> now;
		sleep 278;

		move pillartops to y-axis [-9.150000] speed [18.531470];
		move door1 to y-axis [0.000000] speed [13.461536];
		move door2 to y-axis [0.000000] speed [13.461536];
		sleep 572;

		move door2 to y-axis [0.000000] speed [0.000006];
		turn door1 to z-axis <0.000000> speed <236.934066>;
		turn door2 to z-axis <0.000000> speed <238.813187>;
		sleep 374;
}

Go()
{
	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	Static_Var_1 = 1;
	set ARMORED to 0;
}

Stop()
{
	set ARMORED to 1;
	Static_Var_1 = 0;
	call-script deactivatescr();
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn pillartops to y-axis <0.000000> speed <100.016484>;
	turn turret to x-axis <0.000000> speed <50.005495>;
	wait-for-turn pillartops around y-axis;
	wait-for-turn turret around x-axis;
	start-script RequestState(1);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RestoreAfterDelay();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from frame;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	dont-shade barrel1;
	dont-shade barrel2;
	dont-shade barrel3;
	dont-shade door1;
	dont-shade door2;
	dont-shade flare;
	dont-shade hole;
	dont-shade pillartops;
	dont-shade turret;
	dont-shade turretback;
	dont-shade turretssides;
	hide flare;
	move turret to y-axis [2.25] now;
	move pillartops to y-axis [1.45] now;
	Static_Var_1 = 1;
	Static_Var_5 = 0;
	restore_delay = 3000;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
	start-script RequestState(0);
}

Reload1()
{
	sleep 2100;
	Static_Var_5 = 0;
}

Reload2()
{
	sleep 3780;
	Static_Var_5 = 0;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

AimWeapon1(heading, pitch)
{
	start-script RequestState(0);
	signal 2;
	set-signal-mask 2;
	if( pitch >= 10012 OR Static_Var_5 == 1 )
	{
		return (0);
	}
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn pillartops to y-axis heading speed <100.016484>;
	turn turret to x-axis <0.000000> - pitch speed <50.005495>;
	wait-for-turn pillartops around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	Static_Var_5 = 1;
	start-script Reload1();
	move barrel3 to z-axis [-5.000000] speed [500.000000];
	show flare;
	sleep 250;
	hide flare;
	move barrel3 to z-axis [0.000000] speed [3.000000];
}

AimFromWeapon1(piecenum)
{
	piecenum = turret;
}

QueryWeapon1(piecenum)
{
	piecenum = flare;
}

AimWeapon2(heading, pitch)
{
	start-script RequestState(0);
	signal 4;
	set-signal-mask 4;
	if( pitch < 10012 OR Static_Var_5 == 1 )
	{
		return (0);
	}
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn pillartops to y-axis heading speed <100.016484>;
	turn turret to x-axis <0.000000> - pitch speed <50.005495>;
	wait-for-turn pillartops around y-axis;
	wait-for-turn turret around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	Static_Var_5 = 1;
	start-script Reload2();
	move barrel3 to z-axis [-5.000000] speed [500.000000];
	show flare;
	sleep 250;
	hide flare;
	move barrel3 to z-axis [0.000000] speed [3.000000];
}

AimFromWeapon2(piecenum)
{
	piecenum = turret;
}

QueryWeapon2(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = frame;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 1;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 2;
		}
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode frame type BITMAPONLY | BITMAP5;
		explode ground type BITMAPONLY | BITMAP1;
		explode hole type BITMAPONLY | BITMAP2;
		explode pillartops type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode turretback type BITMAPONLY | BITMAP5;
		explode turretssides type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 2;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 3;
		}
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type FALL | BITMAP2;
		explode barrel3 type FALL | BITMAP3;
		explode door1 type FALL | BITMAP4;
		explode door2 type FALL | BITMAP5;
		explode flare type FALL | BITMAP1;
		explode frame type BITMAPONLY | BITMAP2;
		explode ground type BITMAPONLY | BITMAP3;
		explode hole type BITMAPONLY | BITMAP4;
		explode pillartops type SHATTER | BITMAP5;
		explode turret type FALL | BITMAP1;
		explode turretback type FALL | BITMAP2;
		explode turretssides type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 3;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 4;
		}
		explode barrel1 type BITMAPONLY | BITMAP1;
		explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode frame type BITMAPONLY | BITMAP2;
		explode ground type BITMAPONLY | BITMAP3;
		explode hole type BITMAPONLY | BITMAP4;
		explode pillartops type SHATTER | BITMAP5;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turretback type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turretssides type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 4;
	explode barrel1 type BITMAPONLY | BITMAP1;
	explode barrel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode barrel3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode frame type BITMAPONLY | BITMAP2;
	explode ground type BITMAPONLY | BITMAP3;
	explode hole type BITMAPONLY | BITMAP4;
	explode pillartops type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turretback type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turretssides type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
}
