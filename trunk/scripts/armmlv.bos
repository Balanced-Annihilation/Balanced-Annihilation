#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, launcher, flare, plate, gun, tire1, tire2,
       tire3, tire4, post;

static-var  Static_Var_1, gun_2, statechg_DesiredState, statechg_StateChanging,
			oldHeading;

#define SIG_MOVE	2
#define SIG_BUILD	4

Steering(heading, steer, currentSpeed)
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while(1)
	{
		heading = get HEADING;
		steer = (heading - oldheading)*3;
		turn tire1 to y-axis steer speed <180>;	
		turn tire2 to y-axis steer speed <180>;	
		currentSpeed = <3.92> *((get CURRENT_SPEED) * 100 / get MAX_SPEED);
		if (currentSpeed < <100>) currentSpeed = <100>;
		spin tire1 around x-axis speed currentSpeed;
		spin tire2 around x-axis speed currentSpeed;
		spin tire3 around x-axis speed currentSpeed;
		spin tire4 around x-axis speed currentSpeed;
		sleep 66;
		oldheading = heading;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

/*
Go()
{
}

Stop()
{
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}
*/

Create()
{
	hide flare;
	Static_Var_1 = 0;
	gun_2 = beam;
	oldheading = get HEADING;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
}

DetonateMines()
{
	while( TRUE )
	{
		sleep 500;
		emit-sfx 4096 from flare;
	}
}

/*
Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}
*/

StartBuilding(heading, pitch)
{
	signal SIG_BUILD;
	turn gun to y-axis heading speed <160.000000>;
	wait-for-turn gun around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	set INBUILDSTANCE to 0;
	turn gun to y-axis <0.000000> speed <160.000000>;
	wait-for-turn gun around y-axis;
}

StartMoving()
{
	start-script Steering();
}

StopMoving()
{
	signal SIG_MOVE;
	stop-spin tire1 around x-axis;
	stop-spin tire2 around x-axis;
	stop-spin tire3 around x-axis;
	stop-spin tire4 around x-axis;
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

/*
TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}
*/

SweetSpot(piecenum)
{
	piecenum = base;
}

AimPrimary(heading, pitch)
{
	while( !gun_2 )
	{
		sleep 250;
	}
	return (1);
}

FirePrimary()
{
	gun_2 = base;
	sleep 3000;
	gun_2 = beam;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

AimFromPrimary(piecenum)
{
	piecenum = base;
}

AimSecondary(heading, pitch)
{
	while( !gun_2 )
	{
		sleep 250;
	}
	return (1);
}

FireSecondary()
{
	gun_2 = base;
	sleep 3000;
	gun_2 = beam;
}

QuerySecondary(piecenum)
{
	piecenum = flare;
}

AimFromSecondary(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type BITMAPONLY | BITMAP2;
		explode launcher type BITMAPONLY | BITMAP3;
		explode gun type BITMAPONLY | BITMAP5;
		explode plate type BITMAPONLY | BITMAP1;
		explode post type BITMAPONLY | BITMAP2;
		explode tire1 type BITMAPONLY | BITMAP3;
		explode tire2 type BITMAPONLY | BITMAP4;
		explode tire3 type BITMAPONLY | BITMAP5;
		explode tire4 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type FALL | BITMAP2;
		explode launcher type BITMAPONLY | BITMAP3;
		explode gun type SHATTER | BITMAP5;
		explode plate type BITMAPONLY | BITMAP1;
		explode post type FALL | BITMAP2;
		explode tire1 type FALL | BITMAP3;
		explode tire2 type FALL | BITMAP4;
		explode tire3 type FALL | BITMAP5;
		explode tire4 type FALL | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode launcher type BITMAPONLY | BITMAP3;
		explode gun type SHATTER | BITMAP5;
		explode plate type BITMAPONLY | BITMAP1;
		explode post type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode tire1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode tire2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode tire3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode tire4 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode beam type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode launcher type BITMAPONLY | BITMAP3;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode plate type BITMAPONLY | BITMAP1;
	explode post type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode tire1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode tire2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode tire3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode tire4 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
}
