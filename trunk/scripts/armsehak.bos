#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, sonar1, sonar2, lwing, rwing, sonarholder1, sonarholder2, bombdrop;

static-var  Static_Var_1, gun_1, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE			2


activatescr()
{
	if( TRUE )
	{
		move rwing to x-axis [0.00000] now;
		move rwing to x-axis [11.47499] speed [15.00000];
		move lwing to x-axis [-0.50000] now;
		move lwing to x-axis [-11.47499] speed [15.00000];
		sleep 675;
	}
	if( TRUE )
	{
		sleep 681;
	}
	if( TRUE )
	{
		move sonarholder1 to z-axis [10.75000] speed [15.00000];
		move sonarholder2 to z-axis [10.95000] speed [15.00000];
		sleep 679;
	}
	if( TRUE )
	{
		move sonarholder1 to z-axis [10.72499] speed [0.00000];
		move sonarholder2 to z-axis [10.95000] speed [0.00000];
		sleep 681;
	}
	sleep 679;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		move rwing to x-axis [11.47499] now;
		move lwing to x-axis [-11.47499] now;
		move sonarholder1 to z-axis [10.72499] now;
		move sonarholder1 to z-axis [10.75000] speed [0.00000];
		move sonarholder2 to z-axis [10.95000] now;
		move sonarholder2 to z-axis [10.95000] speed [0.00000];
		sleep 620;
	}
	if( TRUE )
	{
		move sonarholder1 to z-axis [0.00000] speed [15.00000];
		move sonarholder2 to z-axis [0.00000] speed [17.50000];
		sleep 627;
	}
	if( TRUE )
	{
		sleep 628;
	}
	if( TRUE )
	{
		move rwing to x-axis [0.00000] speed [17.50000];
		move lwing to x-axis [-0.50000] speed [17.50000];
		sleep 628;
	}
	sleep 631;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
	gun_1 = sonar1;
	return (0);
}

Activate()
{
	start-script RequestState(0);
	spin sonar1 around y-axis speed <90.02198>;
	spin sonar2 around y-axis speed <90.02198>;
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	stop-spin sonar1 around y-axis;
	stop-spin sonar2 around y-axis;
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_1 == 3 )
		{
			emit-sfx 259 from sonarholder1;
			emit-sfx 259 from sonarholder2;
			emit-sfx 259 from base;
			emit-sfx 259 from sonar1;
			emit-sfx 259 from lwing;
			emit-sfx 259 from sonar2;
			emit-sfx 259 from rwing;
		}
		sleep 250;
	}
	return (0);
}

StopMoving()
{
	signal SIG_MOVE;
	return (0);
}

setSFXoccupy(state)
{
	Static_Var_1 = state;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = bombdrop;
	return (0);
}

AimPrimary(heading, pitch)
{
	while( !gun_1 )
	{
		sleep 250;
	}
	return (1);
}

FirePrimary()
{
	gun_1 = base;
	sleep 8500;
	gun_1 = sonar1;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | NOHEATCLOUD;
		explode sonar1 type SHATTER | BITMAP4 | NOHEATCLOUD;
		explode sonarholder1 type FALL | BITMAP1 | NOHEATCLOUD;
		explode sonarholder2 type FALL | BITMAP2 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | NOHEATCLOUD;
		explode sonar1 type SHATTER | BITMAP4 | NOHEATCLOUD;
		explode sonarholder1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		explode sonarholder2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type SHATTER | NOHEATCLOUD;
	explode sonar1 type SHATTER | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
	explode sonarholder1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode sonarholder2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	return (corpsetype);
}
