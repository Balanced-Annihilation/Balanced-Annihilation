#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, base, spindle, firepoint, radardish, feet, turret, bigbox,
       littlebox, radarbase, gunbarrel, magazine, magclips, sight, fins, port;

static-var  Static_Var_1, last_fire, firstaim;

// Signal definitions
#define SIG_AIM				2
#define CHANGE_TARGET       98
#define TARGET_ID			83
#define DELAY_UNIT_VAR 1024
#define GAME_FRAME 134

lua_TargetCheck() { return 0; }

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

Create()
{
	dont-shade radardish;
	hide flare1;
	dont-cache flare1;
	dont-shade flare1;
	start-script SmokeUnit();
	firstaim = 1;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	spin radardish around y-axis speed <60.010989>;
}

RestoreDelay()
{
  sleep 1000;
  firstaim = 1;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	call-script lua_TargetCheck();
	if ((get DELAY_UNIT_VAR) == 0) {
	  return(0);
	}
	turn spindle to y-axis heading speed <125.000000>;
	wait-for-turn spindle around y-axis;
	start-script RestoreDelay();
	return (1);
}


FirePrimary()
{
	show flare1;
	sleep 150;
	hide flare1;
	set DELAY_UNIT_VAR to 0;
}

QueryPrimary(piecenum)
{
	piecenum = firepoint;
}

AimFromPrimary(piecenum)
{
	piecenum = firepoint;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode feet type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode spindle type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode bigbox type BITMAPONLY | BITMAP5;
		explode littlebox type BITMAPONLY | BITMAP1;
		explode radardish type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode radarbase type BITMAPONLY | BITMAP3;
		explode gunbarrel type BITMAPONLY | BITMAP4;
		explode magazine type BITMAPONLY | BITMAP5;
		explode magclips type BITMAPONLY | BITMAP1;
		explode sight type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode fins type BITMAPONLY | BITMAP3;
		explode port type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode feet type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode spindle type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode bigbox type BITMAPONLY | BITMAP5;
		explode littlebox type BITMAPONLY | BITMAP1;
		explode radardish type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode radarbase type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode gunbarrel type BITMAPONLY | BITMAP4;
		explode magazine type BITMAPONLY | BITMAP5;
		explode magclips type BITMAPONLY | BITMAP1;
		explode sight type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode fins type BITMAPONLY | BITMAP3;
		explode port type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode feet type BITMAPONLY | BITMAP1;
		explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode spindle type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode bigbox type BITMAPONLY | BITMAP5;
		explode littlebox type BITMAPONLY | BITMAP1;
		explode radardish type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode radarbase type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode gunbarrel type BITMAPONLY | BITMAP4;
		explode magazine type BITMAPONLY | BITMAP5;
		explode magclips type BITMAPONLY | BITMAP1;
		explode sight type SHATTER | EXPLODE_ON_HIT | BITMAP2;
		explode fins type BITMAPONLY | BITMAP3;
		explode port type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode feet type BITMAPONLY | BITMAP1;
	explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode spindle type BITMAPONLY | BITMAP3;
	explode turret type BITMAPONLY | BITMAP4;
	explode bigbox type BITMAPONLY | BITMAP5;
	explode littlebox type BITMAPONLY | BITMAP1;
	explode radardish type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode radarbase type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode gunbarrel type BITMAPONLY | BITMAP4;
	explode magazine type BITMAPONLY | BITMAP5;
	explode magclips type BITMAPONLY | BITMAP1;
	explode sight type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode fins type BITMAPONLY | BITMAP3;
	explode port type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
}
