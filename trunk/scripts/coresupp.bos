#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret1, turret2, abarrela, abarrelb, bbarrela, bbarrelb, flare11,
       flare12, flare21, flare22, wake1, wake2, ground;

static-var  gun_1, gun_2, restore_delay, oldHead;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_MOVE			8


SetDirection(heading)
{
	var spd;
	spd = (get ABS(oldHead) - get ABS(heading)) / 2;
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
	oldHead = heading;
}

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn ground to x-axis rockAng speed rockSpeed*5;
			wait-for-turn ground around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare11;
	hide flare12;
	hide flare21;
	hide flare22;
	gun_1 = 0;
	gun_2 = 0;
	restore_delay = 3000;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret1 to y-axis <0.> speed <90.>;
	turn turret2 to y-axis <0.> speed <90.>;
	turn abarrela to x-axis <0.> speed <50.>;
	turn abarrelb to x-axis <0.> speed <50.>;
	turn bbarrela to x-axis <0.> speed <50.>;
	turn bbarrelb to x-axis <0.> speed <50.>;
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.0> speed <3.0>;
		move base to y-axis [0.23] speed [0.23];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <3.0>;
		move base to y-axis [0.0] speed [0.23];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 9000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <3.0>;
	move base to y-axis [0.0] speed [0.23];
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	turn turret1 to y-axis heading speed <270.>;
	turn abarrela to x-axis <0.> - pitch speed <150.>;
	turn abarrelb to x-axis <0.> - pitch speed <150.>;
	wait-for-turn turret1 around y-axis;
	wait-for-turn abarrela around x-axis;
	wait-for-turn abarrelb around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 )
	{
		move abarrelb to z-axis [-1.] speed [500.];
		wait-for-move abarrelb along z-axis;
		move abarrelb to z-axis [0.] speed [5.];
		show flare12;
		sleep 150;
		hide flare12;
	}
	else
	{
		move abarrela to z-axis [-1.] speed [500.];
		wait-for-move abarrela along z-axis;
		move abarrela to z-axis [0.] speed [5.];
		show flare11;
		sleep 150;
		hide flare11;
	}
	gun_1 = !gun_1;
}

AimFromPrimary(piecenum)
{
	piecenum = turret1;
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn turret2 to y-axis heading speed <270.>;
	turn bbarrela to x-axis <0.> - pitch speed <150.>;
	turn bbarrelb to x-axis <0.> - pitch speed <150.>;
	wait-for-turn turret2 around y-axis;
	wait-for-turn bbarrela around x-axis;
	wait-for-turn bbarrelb around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireSecondary()
{
	if( gun_2 )
	{
		move bbarrelb to z-axis [-1.] speed [500.];
		wait-for-move bbarrelb along z-axis;
		move bbarrelb to z-axis [0.] speed [5.];
		show flare22;
		sleep 150;
		hide flare22;
	}
	else
	{
		move bbarrela to z-axis [-1.] speed [500.];
		wait-for-move bbarrela along z-axis;
		move bbarrela to z-axis [0.] speed [5.];
		show flare21;
		sleep 150;
		hide flare21;
	}
	gun_2 = !gun_2;
}

AimFromSecondary(piecenum)
{
	piecenum = turret2;
}

QueryPrimary(piecenum)
{
	piecenum = flare11 + gun_1;
}

QuerySecondary(piecenum)
{
	piecenum = flare21 + gun_2;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare11;
	hide flare12;
	hide flare21;
	hide flare22;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode abarrela type BITMAPONLY | BITMAP1;
		explode bbarrelb type BITMAPONLY | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare22 type BITMAPONLY | BITMAP4;
		explode flare12 type BITMAPONLY | BITMAP5;
		explode flare21 type BITMAPONLY | BITMAP1;
		explode turret1 type BITMAPONLY | BITMAP2;
		explode wake1 type BITMAPONLY | BITMAP3;
		explode wake2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode abarrelb type FALL | BITMAP1;
		explode abarrelb type FALL | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare11 type FALL | BITMAP4;
		explode flare22 type FALL | BITMAP5;
		explode flare21 type FALL | BITMAP1;
		explode turret2 type BITMAPONLY | BITMAP2;
		explode wake1 type FALL | BITMAP3;
		explode wake2 type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode abarrela type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode abarrelb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode base type BITMAPONLY | BITMAP3;
		explode flare11 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode flare22 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode flare12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret1 type SHATTER | BITMAP2;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode abarrelb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode bbarrela type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode base type BITMAPONLY | BITMAP3;
	explode flare12 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode flare21 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode flare22 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}
