#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad1, pad2, dish, wake1, wake2, silo, collar,
       wedge, anti, ground;

static-var  Static_Var_1, oldHead;

// Signal definitions
#define SIG_MOVE			2


SetDirection(heading)
{
	var spd;
	spd = (get ABS(oldHead) - get ABS(heading)) / 2;
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
	oldHead = heading;
}

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.11> )
		{
			rockSpeed = <1.25> - get ABS(rockAng);
			turn ground to x-axis rockAng speed rockSpeed*2;
			wait-for-turn ground around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	Static_Var_1 = 0;
	start-script SmokeUnit();
}

Activate()
{
	spin dish around y-axis speed <60.010989>;
}

Deactivate()
{
	stop-spin dish around y-axis;
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-1.0> speed <1.0>;
		move base to y-axis [0.23] speed [0.17];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <1.0>;
		move base to y-axis [0.0] speed [0.17];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 12000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <1.0>;
	move base to y-axis [0.0] speed [0.17];
}

SweetSpot(piecenum)
{
	piecenum = base;
}

QueryLandingPad(Func_Var_1, Func_Var_2)
{
	Func_Var_1 = 1;
	Func_Var_2 = 2;
	Static_Var_1 = !Static_Var_1;
	if( Static_Var_1 )
	{
		Func_Var_1 = 2;
		Func_Var_2 = 1;
	}
}

AimPrimary(heading, pitch)
{
	return (1);
}

FirePrimary()
{
	sleep 150;
}

QueryPrimary(piecenum)
{
	piecenum = anti;
}

AimFromPrimary(piecenum)
{
	piecenum = anti;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode dish type BITMAPONLY | BITMAP2;
		explode pad1 type BITMAPONLY | BITMAP3;
		explode pad2 type BITMAPONLY | BITMAP4;
		explode wake1 type BITMAPONLY | BITMAP5;
		explode wake2 type BITMAPONLY | BITMAP1;
		explode silo type BITMAPONLY | BITMAP3;
		explode collar type BITMAPONLY | BITMAP4;
		explode wedge type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode dish type SHATTER | BITMAP2;
		explode pad1 type FALL | BITMAP3;
		explode pad2 type FALL | BITMAP4;
		explode wake1 type FALL | BITMAP5;
		explode wake2 type FALL | BITMAP1;
		explode silo type SHATTER | BITMAP3;
		explode collar type FALL | BITMAP4;
		explode wedge type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode dish type SHATTER | BITMAP2;
		explode pad1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode pad2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode silo type SHATTER | BITMAP2;
		explode collar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode wedge type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode dish type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode pad1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode pad2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode silo type SHATTER | BITMAP2;
	explode collar type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wedge type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
