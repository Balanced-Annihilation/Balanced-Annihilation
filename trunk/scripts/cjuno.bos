#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, sphere, sphere1, collar, gear, clamp1, clamp2, clamp3,
       clamp4, clamp5, clamp6, tower, emit1, emit2, emit3, emit4,
       flare1;

static-var  gun_1, restore_delay, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


Activatescr()
{
	emit-sfx 257 from emit1;
	emit-sfx 257 from emit2;
	emit-sfx 257 from emit1;
	emit-sfx 257 from emit3;
	emit-sfx 257 from emit2;
	emit-sfx 257 from emit4;
	emit-sfx 257 from emit3;
	emit-sfx 257 from emit4;
	emit-sfx 257 from emit1;
	emit-sfx 257 from emit3;
	emit-sfx 257 from emit2;
	emit-sfx 257 from emit4;
	sleep 250;
	spin sphere around y-axis speed <85.016484>;
	spin gear around y-axis speed <-165.038462>;
	spin collar around y-axis speed <-65.010989>;
	sleep 250;
	emit-sfx 257 from emit1;
	emit-sfx 257 from emit2;
	emit-sfx 257 from emit1;
	emit-sfx 257 from emit3;
	emit-sfx 257 from emit2;
	emit-sfx 257 from emit4;
	emit-sfx 257 from emit3;
	emit-sfx 257 from emit4;
	emit-sfx 257 from emit1;
	emit-sfx 257 from emit3;
	emit-sfx 257 from emit2;
	emit-sfx 257 from emit4;
	sleep 250;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	emit-sfx 257 from emit1;
	emit-sfx 257 from emit2;
	emit-sfx 257 from emit3;
	emit-sfx 257 from emit4;
	sleep 250;
	spin sphere around y-axis speed <25.005495>;
	spin gear around y-axis speed <15.000000>;
	spin collar around y-axis speed <15.000000>;
	emit-sfx 257 from emit1;
	emit-sfx 257 from emit2;
	emit-sfx 257 from emit3;
	emit-sfx 257 from emit4;
	sleep 40;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

NanoEmit()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
	
		emit-sfx 1024 from tower;
		sleep 1200;
	}
}

Go()
{
	call-script Activatescr();
	gun_1 = sphere;
}

Stop()
{
	gun_1 = base;
	sleep 4000;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	gun_1 = base;
	hide flare1;
	dont-cache sphere;
	dont-cache sphere1;
	dont-cache collar;
	dont-cache gear;
	dont-cache clamp1;
	dont-cache clamp2;
	dont-cache clamp3;
	dont-cache clamp4;
	dont-cache clamp5;
	dont-cache clamp6;
	dont-shade collar;
	dont-shade gear;
	dont-shade sphere;
	dont-shade sphere1;
	dont-shade tower;
	dont-shade base;
	restore_delay = 3000;
	start-script SmokeUnit();
	start-script NanoEmit();
	call-script InitState();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !gun_1 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	explode flare1 type BITMAPONLY | BITMAP5;
	gun_1 = base;
	start-script RequestState(1);
}

QueryPrimary(piecenum)
{
	piecenum = flare1;
}

SweetSpot(piecenum)
{
	piecenum = flare1;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode collar type BITMAPONLY | BITMAP2;
		explode gear type BITMAPONLY | BITMAP3;
		explode sphere type BITMAPONLY | BITMAP2;
		explode tower type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode collar type BITMAPONLY | BITMAP2;
		explode gear type BITMAPONLY | BITMAP3;
		explode sphere type BITMAPONLY | BITMAP2;
		explode tower type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode collar type BITMAPONLY | BITMAP2;
		explode gear type BITMAPONLY | BITMAP3;
		explode sphere type BITMAPONLY | BITMAP1;
		explode tower type BITMAPONLY | BITMAP5;
		explode emit1 type FALL | SMOKE | BITMAP5;
		explode emit2 type FALL | SMOKE | BITMAP5;
		explode emit3 type FALL | SMOKE | BITMAP5;
		explode emit4 type FALL | SMOKE | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode collar type BITMAPONLY | BITMAP2;
	explode gear type BITMAPONLY | BITMAP3;
	explode sphere type BITMAPONLY | BITMAP1;
	explode tower type BITMAPONLY | BITMAP5;
	explode emit1 type SHATTER | SMOKE | FIRE | BITMAP5;
	explode emit2 type SHATTER | SMOKE | FIRE | BITMAP5;
	explode emit3 type SHATTER | SMOKE | FIRE | BITMAP5;
	explode emit4 type SHATTER | SMOKE | FIRE | BITMAP5;
}
