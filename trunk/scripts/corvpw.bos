#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  beam1, beam2, pad, base, layer3a, layer3b, layer3c, layer2a,
       layer2b, layer2c, layer1a, layer1b, layer1c, gun2, gun1, arm1,
       arm2;

static-var  Static_Var_1, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


activatescr()
{
	if( TRUE )
	{
		turn layer3a to y-axis <0.00000> now;
		turn layer3a to y-axis <-89.01648> speed <240.00000>;
		turn layer3b to y-axis <0.00000> now;
		turn layer3b to y-axis <-89.01648> speed <241.00000>;
		turn layer3c to y-axis <0.00000> now;
		turn layer3c to y-axis <-89.01648> speed <241.00000>;
		sleep 372;
	}
	if( TRUE )
	{
		turn layer2a to y-axis <90.01648> speed <228.00000>;
		turn layer2b to y-axis <90.01648> speed <228.00000>;
		turn layer2c to y-axis <90.01648> speed <228.00000>;
		sleep 395;
	}
	if( TRUE )
	{
		turn layer1a to y-axis <-89.01648> speed <228.00000>;
		turn layer1b to y-axis <-89.01648> speed <228.00000>;
		turn layer1c to y-axis <-89.01648> speed <228.00000>;
		sleep 394;
	}
	if( TRUE )
	{
		turn layer1a to y-axis <-179.03846> speed <221.00000>;
		turn layer1b to y-axis <-179.03846> speed <220.00000>;
		turn layer1c to y-axis <-179.03846> speed <221.00000>;
		sleep 406;
	}
	if( TRUE )
	{
		move layer1b to x-axis [-28.50000] speed [67.50000];
		move layer2b to x-axis [-28.62500] speed [67.50000];
		move layer3b to x-axis [-28.75000] speed [67.50000];
		sleep 421;
	}
	if( TRUE )
	{
		move layer1a to z-axis [-13.37500] speed [40.00000];
		move layer1c to z-axis [13.72498] speed [42.50000];
		move layer2a to z-axis [-13.37500] speed [40.00000];
		move layer2c to z-axis [13.75000] speed [42.50000];
		move layer3a to z-axis [-13.25000] speed [40.00000];
		move layer3c to z-axis [13.87500] speed [42.50000];
		move pad to x-axis [5.72498] speed [17.50000];
		sleep 323;
	}
	if( TRUE )
	{
		move gun2 to z-axis [1.84998] speed [2.50000];
		move gun1 to z-axis [2.12500] speed [2.50000];
		turn arm1 to y-axis <-90.01648> speed <187.00000>;
		turn arm2 to y-axis <88.01648> speed <184.00000>;
		turn gun2 to z-axis <11.00000> speed <22.00000>;
		turn gun2 to y-axis <66.00549> speed <138.00000>;
		turn gun2 to x-axis <2.00000> speed <4.00000>;
		turn gun1 to z-axis <-10.00000> speed <20.00000>;
		turn gun1 to y-axis <-66.00549> speed <138.00000>;
		turn gun1 to x-axis <2.00000> speed <4.00000>;
		sleep 483;
	}
	sleep 21;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
		move layer1a to z-axis [-13.37500] now;
		move layer1b to x-axis [-28.50000] now;
		move layer1c to z-axis [13.72498] now;
		move layer2a to z-axis [-13.37500] now;
		move layer2b to x-axis [-28.62500] now;
		move layer2c to z-axis [13.75000] now;
		move layer3a to z-axis [-13.25000] now;
		move layer3b to x-axis [-28.75000] now;
		move layer3c to z-axis [13.87500] now;
		move pad to x-axis [5.72498] now;
		move gun2 to z-axis [1.84998] now;
		move gun2 to z-axis [0.00000] speed [2.50000];
		move gun1 to z-axis [2.12500] now;
		move gun1 to z-axis [0.00000] speed [5.00000];
		turn layer1a to y-axis <-179.80220> now;
		turn layer1b to y-axis <-179.33516> now;
		turn layer1c to y-axis <-179.80220> now;
		turn layer2a to y-axis <90.35714> now;
		turn layer2b to y-axis <90.35714> now;
		turn layer2c to y-axis <90.35714> now;
		turn layer3a to y-axis <-89.43407> now;
		turn layer3b to y-axis <-89.90110> now;
		turn layer3c to y-axis <-89.90110> now;
		turn arm1 to y-axis <-90.35714> now;
		turn arm1 to y-axis <0.00000> speed <216.00000>;
		turn arm2 to y-axis <88.97802> now;
		turn arm2 to y-axis <0.00000> speed <213.00000>;
		turn gun2 to z-axis <11.00000> now;
		turn gun2 to z-axis <0.00000> speed <26.00000>;
		turn gun2 to y-axis <66.95604> now;
		turn gun2 to y-axis <0.00000> speed <160.00000>;
		turn gun2 to x-axis <2.28022> now;
		turn gun2 to x-axis <0.00000> speed <5.00000>;
		turn gun1 to z-axis <-10.08242> now;
		turn gun1 to z-axis <0.00000> speed <24.00000>;
		turn gun1 to y-axis <-66.95604> now;
		turn gun1 to y-axis <0.00000> speed <160.00000>;
		turn gun1 to x-axis <2.28022> now;
		turn gun1 to x-axis <0.00000> speed <5.00000>;
		sleep 417;
	}
	if( TRUE )
	{
		move layer1a to z-axis [0.00000] speed [40.00000];
		move layer1c to z-axis [0.00000] speed [42.50000];
		move layer2a to z-axis [0.00000] speed [40.00000];
		move layer2c to z-axis [0.00000] speed [42.50000];
		move layer3a to z-axis [0.00000] speed [40.00000];
		move layer3c to z-axis [0.00000] speed [42.50000];
		move pad to x-axis [0.00000] speed [17.50000];
		sleep 321;
	}
	if( TRUE )
	{
		move layer1b to x-axis [0.00000] speed [67.50000];
		move layer2b to x-axis [0.00000] speed [67.50000];
		move layer3b to x-axis [0.00000] speed [67.50000];
		sleep 416;
	}
	if( TRUE )
	{
		turn layer1a to y-axis <-89.01648> speed <216.00000>;
		turn layer1b to y-axis <-89.01648> speed <215.00000>;
		turn layer1c to y-axis <-89.01648> speed <216.00000>;
		sleep 415;
	}
	if( TRUE )
	{
		turn layer1a to y-axis <0.00000> speed <222.00000>;
		turn layer1b to y-axis <0.00000> speed <222.00000>;
		turn layer1c to y-axis <0.00000> speed <222.00000>;
		sleep 404;
	}
	if( TRUE )
	{
		turn layer2a to y-axis <0.00000> speed <212.00000>;
		turn layer2b to y-axis <0.00000> speed <212.00000>;
		turn layer2c to y-axis <0.00000> speed <212.00000>;
		sleep 426;
	}
	if( TRUE )
	{
		turn layer3a to y-axis <0.00000> speed <225.00000>;
		turn layer3b to y-axis <0.00000> speed <226.00000>;
		turn layer3c to y-axis <0.00000> speed <226.00000>;
		sleep 397;
	}
	sleep 12;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
	return (0);
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
	return (0);
}

Go()
{
	dont-cache arm1;
	dont-cache arm2;
	dont-cache gun1;
	dont-cache gun2;
	dont-cache layer1a;
	dont-cache layer1b;
	dont-cache layer1c;
	dont-cache layer2a;
	dont-cache layer2b;
	dont-cache layer2c;
	dont-cache layer3a;
	dont-cache layer3b;
	dont-cache layer3c;
	dont-cache pad;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache arm1;
	cache arm2;
	cache gun1;
	cache gun2;
	cache layer1a;
	cache layer1b;
	cache layer1c;
	cache layer2a;
	cache layer2b;
	cache layer2c;
	cache layer3a;
	cache layer3b;
	cache layer3c;
	cache pad;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	dont-shade arm1;
	dont-shade arm2;
	dont-shade pad;
	dont-shade gun1;
	dont-shade gun2;
	dont-shade layer1a;
	dont-shade layer1b;
	dont-shade layer1c;
	dont-shade layer2a;
	dont-shade layer2b;
	dont-shade layer2c;
	dont-shade layer3a;
	dont-shade layer3b;
	dont-shade layer3c;
	dont-shade pad;
	unitviewer = FALSE;
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
	turn pad to y-axis <270.00000> speed <1000.00000>;
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = beam1;
		Static_Var_1 = 1;
		return (0);
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = beam2;
		Static_Var_1 = 0;
	}
	return (0);
}

Demo()
{
	unitviewer = TRUE;
	return (0);
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

StartBuilding()
{
	spin pad around y-axis speed <0.00000>;
	return (0);
}

StopBuilding()
{
	stop-spin pad around y-axis;
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		return (corpsetype);
	}
	corpsetype = 3;
	return (corpsetype);
}
