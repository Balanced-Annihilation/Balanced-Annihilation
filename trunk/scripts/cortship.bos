#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, turret, boom, arm1, arm2, link, door1, door2,
       door3, wake1, wake2, magnet, arm3, arm4, arm5, ground;

static-var  Static_Var_1, Static_Var_2, Static_Var_3, Static_Var_4, oldHead;

// Signal definitions
#define SIG_MOVE			2


SetDirection(heading)
{
	var spd;
	spd = (get ABS(oldHead) - get ABS(heading)) / 2;
	turn ground to y-axis heading speed spd;
	turn base to y-axis 0-heading speed spd;
	oldHead = heading;
}

RockOnWaves()
{
	var rockDir, rockAng, rockSpeed;
	rockDir = <-0.1>;
	rockAng = <-0.1>;
	while( TRUE )
	{
		while( get ABS(rockAng) < <1.31> )
		{
			rockSpeed = <1.45> - get ABS(rockAng);
			turn ground to x-axis rockAng speed rockSpeed*3;
			wait-for-turn ground around x-axis;
			rockAng = rockAng + rockDir;
		}
		rockDir = 0 - rockDir;
		rockAng = rockAng + rockDir + rockDir;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script RockOnWaves();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	start-script SmokeUnit();
}

waveSplash()
{
	while( TRUE )
	{
		turn base to x-axis <-3.0> speed <3.0>;
		move base to y-axis [0.35] speed [0.25];
		wait-for-turn base around x-axis;
		turn base to x-axis <0.0> speed <3.0>;
		move base to y-axis [0.0] speed [0.25];
		wait-for-turn base around x-axis;
	}
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	var waketime;
	start-script waveSplash();
	while( TRUE )
	{
		emit-sfx 2 from wake1;
		emit-sfx 2 from wake2;
		waketime = (get CURRENT_SPEED) * 100 / get MAX_SPEED;
		if( waketime < 50 ) waketime = 50;
		sleep 10000 / waketime;
	}
}

StopMoving()
{
	signal SIG_MOVE;
	turn base to x-axis <0.0> speed <3.0>;
	move base to y-axis [0.0] speed [0.25];
}

SweetSpot(piecenum)
{
	piecenum = base;
}

StartDoorOpen()
{
	signal 4;
	set-signal-mask 4;
	move door1 to z-axis [-6.000000] speed [10.000000];
	move door2 to z-axis [-6.000000] speed [10.000000];
	move door3 to z-axis [-6.000000] speed [10.000000];
	sleep 5000;
	move door1 to z-axis [0.000000] speed [10.000000];
	move door2 to z-axis [0.000000] speed [10.000000];
	move door3 to z-axis [0.000000] speed [10.000000];
}

BoomCalc(posxz, posy)
{
	var Func_Var_3, Func_Var_4, Func_Var_5;
	Func_Var_3 = get PIECE_XZ(turret) - posxz;
	Func_Var_4 = posy - get PIECE_Y(turret) - [20.000000];
	Func_Var_5 = get XZ_HYPOT(Func_Var_3);
	Static_Var_1 = get HYPOT(Func_Var_5,Func_Var_4) - [20.000000];
	Static_Var_2 = get XZ_ATAN(Func_Var_3);
	Static_Var_3 = get ATAN(Func_Var_4,Func_Var_5);
	Static_Var_4 = Static_Var_1 < [131.250000];
}

BoomExtend(posxz, posy)
{
	start-script StartDoorOpen();
	turn turret to y-axis Static_Var_2 speed <150.000000>;
	turn magnet to x-axis Static_Var_3 speed <60.000000>;
	turn boom to x-axis <0.000000> - Static_Var_3 speed <60.000000>;
	move arm1 to z-axis Static_Var_1 / [0.000031] speed [60.000000];
	move arm2 to z-axis Static_Var_1 / [0.000031] speed [60.000000];
	move arm3 to z-axis Static_Var_1 / [0.000031] speed [60.000000];
	move arm4 to z-axis Static_Var_1 / [0.000031] speed [60.000000];
	move arm5 to z-axis Static_Var_1 / [0.000031] speed [60.000000];
	wait-for-turn turret around y-axis;
	wait-for-turn boom around x-axis;
	wait-for-move arm1 along z-axis;
	wait-for-move arm2 along z-axis;
	wait-for-move arm3 along z-axis;
	wait-for-move arm4 along z-axis;
	wait-for-move arm5 along z-axis;
}

BoomReset()
{
	turn turret to y-axis <0.000000> speed <100.000000>;
	turn magnet to x-axis <0.000000> speed <40.000000>;
	turn boom to x-axis <0.000000> speed <40.000000>;
	move arm1 to z-axis [0.000000] speed [45.000000];
	move arm2 to z-axis [0.000000] speed [45.000000];
	move arm3 to z-axis [0.000000] speed [45.000000];
	move arm4 to z-axis [0.000000] speed [45.000000];
	move arm5 to z-axis [0.000000] speed [45.000000];
}

BoomToPad()
{
	start-script StartDoorOpen();
	turn turret to y-axis <0.000000> speed <150.000000>;
	turn magnet to x-axis <0.000000> speed <60.000000>;
	turn boom to x-axis <0.000000> speed <60.000000>;
	move arm1 to z-axis [0.000000] speed [60.000000];
	move arm2 to z-axis [0.000000] speed [60.000000];
	move arm3 to z-axis [0.000000] speed [60.000000];
	move arm4 to z-axis [0.000000] speed [60.000000];
	move arm5 to z-axis [0.000000] speed [60.000000];
	wait-for-turn turret around y-axis;
	wait-for-turn boom around x-axis;
	wait-for-move arm1 along z-axis;
	wait-for-move arm2 along z-axis;
	wait-for-move arm3 along z-axis;
	wait-for-move arm4 along z-axis;
	wait-for-move arm5 along z-axis;
	turn magnet to x-axis <-30.000000> speed <60.000000>;
	turn boom to x-axis <30.000000> speed <60.000000>;
	wait-for-turn boom around x-axis;
}

TransportPickup(unitid)
{
	call-script BoomCalc(get UNIT_XZ(unitid),get UNIT_Y(unitid) + get UNIT_HEIGHT(unitid));
	if( Static_Var_4 AND get UNKNOWN_UNIT_VALUE(74)(unitid) == get UNKNOWN_UNIT_VALUE(74)(get UNKNOWN_UNIT_VALUE(71)) )
	{
		set BUSY to 1;
		call-script BoomExtend();
		move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomToPad();
		attach-unit unitid to 0 - 1;
		call-script BoomReset();
		set BUSY to 0;
	}
}

TransportDrop(unitid, position)
{
	call-script BoomCalc(position,get GROUND_HEIGHT(position) + get UNIT_HEIGHT(unitid));
	if( Static_Var_4 )
	{
		set BUSY to 1;
		call-script BoomToPad();
		move link to y-axis [0.000000] - get UNIT_HEIGHT(unitid) now;
		attach-unit unitid to link;
		call-script BoomExtend();
		drop-unit unitid;
		call-script BoomReset();
		set BUSY to 0;
	}
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode boom type BITMAPONLY | BITMAP1;
		explode arm1 type BITMAPONLY | BITMAP2;
		explode arm2 type BITMAPONLY | BITMAP5;
		explode base type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode link type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode wake1 type BITMAPONLY | BITMAP3;
		explode wake2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode boom type BITMAPONLY | BITMAP1;
		explode arm1 type SHATTER | BITMAP2;
		explode arm2 type SHATTER | BITMAP4;
		explode base type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode link type FALL | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode wake1 type FALL | BITMAP3;
		explode wake2 type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode boom type BITMAPONLY | BITMAP1;
		explode arm1 type SHATTER | BITMAP2;
		explode arm2 type SHATTER | BITMAP4;
		explode base type BITMAPONLY | BITMAP3;
		explode door1 type BITMAPONLY | BITMAP4;
		explode door2 type BITMAPONLY | BITMAP5;
		explode link type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode boom type BITMAPONLY | BITMAP1;
	explode arm1 type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode arm2 type SHATTER | BITMAP4;
	explode base type BITMAPONLY | BITMAP3;
	explode door1 type BITMAPONLY | BITMAP4;
	explode door2 type BITMAPONLY | BITMAP5;
	explode link type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turret type BITMAPONLY | BITMAP2;
	explode wake1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wake2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
}
