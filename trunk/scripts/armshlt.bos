#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  ground, body, buildpad, connector, activator, door1, door2, sign,
       LeftA1, LeftB1, LeftC1, LeftA2, LeftB2, LeftC2, LeftA3, LeftB3,
       LeftC3, RightA2, RightB2, RightC2, RightA1, RightB1, RightC1, RightA3,
       RightB3, RightC3, nanopieces, nano1, nano2;

static-var  spray, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


activatescr()
{
	if( TRUE )
	{
		turn LeftC1 to z-axis <-190.043956> speed <190.000000>;
		turn RightC1 to z-axis <190.043956> speed <190.000000>;
		sleep 683;
	}
	if( TRUE )
	{
		turn LeftB1 to z-axis <-205.049451> speed <205.000000>;
		turn RightB1 to z-axis <205.049451> speed <205.000000>;
		turn LeftC2 to z-axis <-190.043956> speed <190.000000>;
		turn RightC2 to z-axis <190.043956> speed <190.000000>;
		sleep 689;
	}
	if( TRUE )
	{
		move LeftA1 to y-axis [-4.000000] speed [8.000000];
		move LeftA1 to x-axis [3.000000] speed [6.000000];
		move RightA1 to y-axis [-4.000000] speed [8.000000];
		move RightA1 to x-axis [-3.000000] speed [6.000000];
		turn LeftB2 to z-axis <-205.049451> speed <205.000000>;
		turn RightB2 to z-axis <205.049451> speed <205.000000>;
		turn LeftC3 to z-axis <-190.043956> speed <190.000000>;
		turn RightC3 to z-axis <190.043956> speed <190.000000>;
		sleep 689;
	}
	if( TRUE )
	{
		move LeftA2 to y-axis [-4.000000] speed [8.000000];
		move LeftA2 to x-axis [3.000000] speed [6.000000];
		move RightA2 to y-axis [-4.000000] speed [8.000000];
		move RightA2 to x-axis [-3.000000] speed [6.000000];
		turn LeftB3 to z-axis <-205.049451> speed <205.000000>;
		turn RightB3 to z-axis <205.049451> speed <205.000000>;
		sleep 689;
	}
	if( TRUE )
	{
		move LeftA3 to y-axis [-4.000000] speed [8.000000];
		move LeftA3 to x-axis [3.000000] speed [6.000000];
		move RightA3 to y-axis [-4.000000] speed [8.000000];
		move RightA3 to x-axis [-3.000000] speed [6.000000];
		sleep 683;
	}
	if( TRUE )
	{
		move connector to z-axis [3.000000] speed [3.000000];
		move activator to z-axis [19.000000] speed [19.000000];
		turn sign to x-axis <-90.021978> speed <90.000000>;
		move door1 to x-axis [8.000000] speed [15.000000];
		move door2 to x-axis [-8.000000] speed [15.000000];
		sleep 683;
	}
	sleep 34;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		move connector to z-axis [0.000000] speed [3.000000];
		move activator to z-axis [0.000000] speed [19.000000];
		turn sign to x-axis <0.000000> speed <90.000000>;
		wait-for-turn sign around y-axis;
		move door1 to x-axis [0.000000] speed [15.000000];
		move door2 to x-axis [0.000000] speed [15.000000];
		sleep 683;
	}
	if( TRUE )
	{
		move LeftA3 to y-axis [0.000000] speed [8.000000];
		move LeftA3 to x-axis [0.000000] speed [6.000000];
		move RightA3 to y-axis [0.000000] speed [8.000000];
		move RightA3 to x-axis [0.000000] speed [6.000000];
		sleep 683;
	}
	if( TRUE )
	{
		move LeftA2 to y-axis [0.000000] speed [8.000000];
		move LeftA2 to x-axis [0.000000] speed [6.000000];
		move RightA2 to y-axis [0.000000] speed [8.000000];
		move RightA2 to x-axis [0.000000] speed [6.000000];
		turn LeftB3 to z-axis <0.000000> speed <205.000000>;
		turn RightB3 to z-axis <0.000000> speed <205.000000>;
		sleep 689;
	}
	if( TRUE )
	{
		move LeftA1 to y-axis [0.000000] speed [8.000000];
		move LeftA1 to x-axis [0.000000] speed [6.000000];
		move RightA1 to y-axis [0.000000] speed [8.000000];
		move RightA1 to x-axis [0.000000] speed [6.000000];
		turn LeftB2 to z-axis <0.000000> speed <205.000000>;
		turn RightB2 to z-axis <0.000000> speed <205.000000>;
		turn LeftC3 to z-axis <0.000000> speed <190.000000>;
		turn RightC3 to z-axis <0.000000> speed <190.000000>;
		sleep 689;
	}
	if( TRUE )
	{
		turn LeftB1 to z-axis <0.000000> speed <205.000000>;
		turn RightB1 to z-axis <0.000000> speed <205.000000>;
		turn LeftC2 to z-axis <0.000000> speed <190.000000>;
		turn RightC2 to z-axis <0.000000> speed <190.000000>;
	}
	if( TRUE )
	{
		turn LeftC1 to z-axis <0.000000> speed <190.000000>;
		turn RightC1 to z-axis <0.000000> speed <190.000000>;
		sleep 683;
	}
	sleep 34;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade ground;
	dont-shade body;
	dont-shade buildpad;
	dont-shade connector;
	dont-shade activator;
	dont-shade door1;
	dont-shade door2;
	dont-shade sign;
	dont-shade LeftA1;
	dont-shade LeftB1;
	dont-shade LeftC1;
	dont-shade LeftA2;
	dont-shade LeftB2;
	dont-shade LeftC2;
	dont-shade LeftA3;
	dont-shade LeftB3;
	dont-shade LeftC3;
	dont-shade RightA2;
	dont-shade RightB2;
	dont-shade RightC2;
	dont-shade RightA1;
	dont-shade RightB1;
	dont-shade RightC1;
	dont-shade RightA3;
	dont-shade RightB3;
	dont-shade RightC3;
	dont-shade nanopieces;
	spray = ground;
	call-script InitState();
	start-script SmokeUnit();
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = nano1;
	}
	if( spray != 0 )
	{
		piecenum = nano2;
	}
	spray = !spray;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	dont-cache buildpad;
	dont-cache activator;
}

StopBuilding()
{
	cache buildpad;
	cache activator;
}

QueryBuildInfo(piecenum)
{
	piecenum = activator;
}

SweetSpot(piecenum)
{
	piecenum = body;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode ground type BITMAPONLY | BITMAP1;
		explode body type BITMAPONLY | BITMAP1;
		explode buildpad type BITMAPONLY | BITMAP1;
		explode connector type BITMAPONLY | BITMAP1;
		explode activator type BITMAPONLY | BITMAP1;
		explode door1 type BITMAPONLY | BITMAP1;
		explode door2 type BITMAPONLY | BITMAP1;
		explode sign type BITMAPONLY | BITMAP1;
		explode LeftA1 type BITMAPONLY | BITMAP1;
		explode LeftB1 type BITMAPONLY | BITMAP1;
		explode LeftC1 type BITMAPONLY | BITMAP1;
		explode LeftA2 type BITMAPONLY | BITMAP1;
		explode LeftB2 type BITMAPONLY | BITMAP1;
		explode LeftC2 type BITMAPONLY | BITMAP1;
		explode LeftA3 type BITMAPONLY | BITMAP1;
		explode LeftB3 type BITMAPONLY | BITMAP1;
		explode LeftC3 type BITMAPONLY | BITMAP1;
		explode RightA2 type BITMAPONLY | BITMAP1;
		explode RightB2 type BITMAPONLY | BITMAP1;
		explode RightC2 type BITMAPONLY | BITMAP1;
		explode RightA1 type BITMAPONLY | BITMAP1;
		explode RightB1 type BITMAPONLY | BITMAP1;
		explode RightC1 type BITMAPONLY | BITMAP1;
		explode RightA3 type BITMAPONLY | BITMAP1;
		explode RightB3 type BITMAPONLY | BITMAP1;
		explode RightC3 type BITMAPONLY | BITMAP1;
		explode nanopieces type BITMAPONLY | BITMAP1;
		explode nano1 type BITMAPONLY | BITMAP1;
		explode nano2 type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode ground type SHATTER | BITMAP4;
		explode body type SHATTER | BITMAP4;
		explode buildpad type SHATTER | BITMAP4;
		explode connector type SHATTER | BITMAP4;
		explode activator type SHATTER | BITMAP4;
		explode door1 type SHATTER | BITMAP4;
		explode door2 type SHATTER | BITMAP4;
		explode sign type SHATTER | BITMAP4;
		explode LeftA1 type SHATTER | BITMAP4;
		explode LeftB1 type SHATTER | BITMAP4;
		explode LeftC1 type SHATTER | BITMAP4;
		explode LeftA2 type SHATTER | BITMAP4;
		explode LeftB2 type SHATTER | BITMAP4;
		explode LeftC2 type SHATTER | BITMAP4;
		explode LeftA3 type SHATTER | BITMAP4;
		explode LeftB3 type SHATTER | BITMAP4;
		explode LeftC3 type SHATTER | BITMAP4;
		explode RightA2 type SHATTER | BITMAP4;
		explode RightB2 type SHATTER | BITMAP4;
		explode RightC2 type SHATTER | BITMAP4;
		explode RightA1 type SHATTER | BITMAP4;
		explode RightB1 type SHATTER | BITMAP4;
		explode RightC1 type SHATTER | BITMAP4;
		explode RightA3 type SHATTER | BITMAP4;
		explode RightB3 type SHATTER | BITMAP4;
		explode RightC3 type SHATTER | BITMAP4;
		explode nanopieces type SHATTER | BITMAP4;
		explode nano1 type SHATTER | BITMAP4;
		explode nano2 type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode buildpad type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode connector type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode activator type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode sign type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode LeftA1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode LeftB1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode LeftC1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode LeftA2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode LeftB2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode LeftC2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode LeftA3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode LeftB3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode LeftC3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode RightA2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode RightB2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode RightC2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode RightA1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode RightB1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode RightC1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode RightA3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode RightB3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode RightC3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode nanopieces type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode nano1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode body type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode buildpad type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode connector type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode activator type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode sign type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode LeftA1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode LeftB1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode LeftC1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode LeftA2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode LeftB2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode LeftC2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode LeftA3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode LeftB3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode LeftC3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode RightA2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode RightB2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode RightC2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode RightA1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode RightB1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode RightC1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode RightA3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode RightB3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode RightC3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode nanopieces type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode nano1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
