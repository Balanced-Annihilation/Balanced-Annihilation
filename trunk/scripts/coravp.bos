#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, wing1, wing2, wing3, drawer1,
       drawer2, gun2, gun1, blink, blinka, blinkb;

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


Standby()
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 100;
	}
	while( TRUE )
	{
		emit-sfx 1024 + 0 from blinka;
		sleep 450;
		emit-sfx 1024 + 0 from blinkb;
		sleep 450;
	}
	sleep 50;
	start-script Standby();
}

activatescr()
{
	if( TRUE )
	{
		turn wing1 to z-axis <0.000000> now;
		turn wing1 to z-axis <-90.016484> speed <180.758242>;
		turn wing2 to x-axis <0.000000> now;
		turn wing2 to x-axis <-90.016484> speed <180.758242>;
		turn wing3 to z-axis <0.000000> now;
		turn wing3 to z-axis <90.016484> speed <180.758242>;
		sleep 498;
	}
	if( TRUE )
	{
		turn wing1 to z-axis <-180.038462> speed <180.758242>;
		turn wing2 to x-axis <-179.500000> speed <179.681319>;
		turn wing3 to z-axis <179.500000> speed <179.681319>;
		sleep 498;
	}
	if( TRUE )
	{
		move drawer1 to y-axis [8.250000] speed [13.136951];
		move drawer2 to y-axis [8.200000] speed [13.057312];
		move pad to z-axis [9.200000] speed [14.649683];
		sleep 628;
	}
	if( TRUE )
	{
		move gun2 to x-axis [3.100000] speed [6.595746];
		move gun2 to z-axis [3.100000] speed [6.595740];
		move gun1 to x-axis [-3.100000] speed [6.595740];
		move gun1 to z-axis [3.150000] speed [6.702118];
		sleep 470;
	}
	sleep 6;
}

deactivatescr()
{
	if( TRUE )
	{
		move drawer1 to y-axis [8.250000] now;
		move drawer2 to y-axis [8.200000] now;
		move pad to z-axis [9.200000] now;
		move gun2 to x-axis [3.100000] now;
		move gun2 to x-axis [0.000000] speed [3.202472];
		move gun2 to z-axis [3.100000] now;
		move gun2 to z-axis [0.000000] speed [3.202472];
		move gun1 to x-axis [-3.100000] now;
		move gun1 to x-axis [0.000000] speed [3.202472];
		move gun1 to z-axis [3.150000] now;
		move gun1 to z-axis [0.000000] speed [3.254126];
		turn wing1 to z-axis <-180.038462> now;
		turn wing2 to x-axis <-179.500000> now;
		turn wing3 to z-axis <179.500000> now;
		sleep 968;
	}
	if( TRUE )
	{
		move drawer1 to y-axis [0.000000] speed [13.074475];
		move drawer2 to y-axis [0.000000] speed [12.995233];
		move pad to z-axis [0.000000] speed [14.580017];
		sleep 631;
	}
	if( TRUE )
	{
		turn wing1 to z-axis <-90.016484> speed <358.648352>;
		turn wing2 to x-axis <-90.016484> speed <356.505495>;
		turn wing3 to z-axis <90.016484> speed <356.505495>;
		sleep 251;
	}
	if( TRUE )
	{
		turn wing1 to z-axis <0.000000> speed <358.648352>;
		turn wing2 to x-axis <0.000000> speed <358.648352>;
		turn wing3 to z-axis <0.000000> speed <358.648352>;
		sleep 251;
	}
	sleep 12;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
}

Go()
{
	dont-cache beam1;
	dont-cache beam2;
	dont-cache drawer1;
	dont-cache drawer2;
	dont-cache gun1;
	dont-cache gun2;
	dont-cache pad;
	dont-cache wing1;
	dont-cache wing2;
	dont-cache wing3;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache beam1;
	cache beam2;
	cache drawer1;
	cache drawer2;
	cache gun1;
	cache gun2;
	cache pad;
	cache wing1;
	cache wing2;
	cache wing3;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-shade blink;
	dont-cache blink;
	dont-shade beam1;
	dont-shade beam2;
	dont-shade drawer1;
	dont-shade drawer2;
	dont-shade gun1;
	dont-shade gun2;
	dont-shade pad;
	dont-shade wing1;
	dont-shade wing2;
	dont-shade wing3;
	unitviewer = FALSE;
	spray = base;
	call-script InitState();
	start-script SmokeUnit();
	start-script Standby();
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray != 0 )
	{
		piecenum = beam2;
	}
	spray = !spray;
}

Demo()
{
	unitviewer = TRUE;
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
}

StartBuilding()
{
	spin pad around y-axis speed <0.000000>;
}

StopBuilding()
{
	stop-spin pad around y-axis;
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type BITMAPONLY | BITMAP2;
		explode beam2 type BITMAPONLY | BITMAP3;
		explode blink type BITMAPONLY | BITMAP4;
		explode drawer1 type BITMAPONLY | BITMAP5;
		explode drawer2 type BITMAPONLY | BITMAP1;
		explode gun1 type BITMAPONLY | BITMAP2;
		explode gun2 type BITMAPONLY | BITMAP3;
		explode pad type BITMAPONLY | BITMAP4;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type BITMAPONLY | BITMAP1;
		explode wing3 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | BITMAP2;
		explode beam2 type FALL | BITMAP3;
		explode blink type SHATTER | BITMAP4;
		explode drawer1 type FALL | BITMAP5;
		explode drawer2 type FALL | BITMAP1;
		explode gun1 type FALL | BITMAP2;
		explode gun2 type FALL | BITMAP3;
		explode pad type BITMAPONLY | BITMAP4;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type BITMAPONLY | BITMAP1;
		explode wing3 type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode blink type SHATTER | BITMAP4;
		explode drawer1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode drawer2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode pad type BITMAPONLY | BITMAP4;
		explode wing1 type BITMAPONLY | BITMAP5;
		explode wing2 type BITMAPONLY | BITMAP1;
		explode wing3 type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode blink type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode drawer1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode drawer2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gun1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode gun2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode pad type BITMAPONLY | BITMAP4;
	explode wing1 type BITMAPONLY | BITMAP5;
	explode wing2 type BITMAPONLY | BITMAP1;
	explode wing3 type BITMAPONLY | BITMAP2;
}
