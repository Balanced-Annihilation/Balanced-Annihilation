#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, missile, plate, arm, door1, door2, domes;

static-var  gun_1, restore_delay, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


activatescr()
{
	if( TRUE )
	{
		move plate to y-axis [0.00000] now;
		move arm to x-axis [0.00000] now;
		move arm to z-axis [0.00000] now;
		turn door1 to z-axis <0.00000> now;
		turn door1 to z-axis <-89.57143> speed <47.13736>;
		turn door2 to z-axis <0.00000> now;
		turn door2 to z-axis <90.01648> speed <47.37912>;
		sleep 1900;
	}
	if( TRUE )
	{
		move door1 to y-axis [-15.24998] speed [7.82050];
		move door2 to y-axis [-15.25000] speed [7.82050];
		sleep 1950;
	}
	if( TRUE )
	{
		move plate to y-axis [20.00000] speed [10.15227];
		sleep 1970;
	}
	if( TRUE )
	{
		turn arm to x-axis <-90.01648> speed <45.54945>;
		sleep 1976;
	}
	sleep 114;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
		move plate to y-axis [20.00000] now;
		move door1 to y-axis [-15.24998] now;
		move door2 to y-axis [-15.25000] now;
		move arm to x-axis [0.00000] now;
		move arm to z-axis [0.00000] now;
		turn door1 to z-axis <-89.57143> now;
		turn door2 to z-axis <90.01648> now;
		turn arm to x-axis <-90.01648> now;
		turn arm to x-axis <0.00000> speed <47.37912>;
		sleep 1900;
	}
	if( TRUE )
	{
		move plate to y-axis [0.00000] speed [10.20406];
		sleep 1960;
	}
	if( TRUE )
	{
		move door1 to y-axis [0.00000] speed [7.74896];
		move door2 to y-axis [0.00000] speed [7.74896];
		sleep 1968;
	}
	if( TRUE )
	{
		turn door1 to z-axis <0.00000> speed <45.41209>;
		turn door2 to z-axis <0.00000> speed <45.64835>;
		sleep 1972;
	}
	sleep 10000;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Go()
{
	dont-cache door1;
	dont-cache door2;
	dont-cache missile;
	dont-cache plate;
	dont-cache arm;
	show missile;
	call-script activatescr();
	gun_1 = missile;
	return (0);
}

Stop()
{
	gun_1 = base;
	sleep 4000;
	call-script deactivatescr();
	cache door1;
	cache door2;
	cache missile;
	cache plate;
	cache arm;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	dont-shade door1;
	dont-shade door2;
	dont-shade missile;
	dont-shade plate;
	dont-shade arm;
	gun_1 = base;
	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !gun_1 )
	{
		sleep 250;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	hide missile;
	gun_1 = base;
	start-script RequestState(1);
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = missile;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm type SHATTER | BITMAP1 | NOHEATCLOUD;
		explode base type SHATTER | NOHEATCLOUD;
		explode door1 type FALL | BITMAP4 | NOHEATCLOUD;
		explode door2 type FALL | BITMAP5 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm type SHATTER | BITMAP1 | NOHEATCLOUD;
		explode base type SHATTER | NOHEATCLOUD;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode arm type SHATTER | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode base type SHATTER | NOHEATCLOUD;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
	return (corpsetype);
}
