#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, top, armu, lightu, armdl, lightdl, armdr, lightdr;

static-var  statechg_DesiredState, statechg_StateChanging;


activatescr()
{
	if( TRUE )
	{
		move armu to z-axis [0.00000] now;
		move armdr to x-axis [0.00000] now;
		move armdl to z-axis [0.00000] now;
		move armu to z-axis [-13.50000] speed [10.00000];
		move armdr to x-axis [-11.70000] speed [10.00000];
		move armdr to z-axis [6.75000] speed [5.00000];
		move armdl to x-axis [11.70000] speed [10.00000];
		move armdl to z-axis [6.75000] speed [5.00000];
		sleep 1094;
	}
	if( TRUE )
	{
		move lightu to y-axis [3.00000] speed [2.50000];
		move lightdr to y-axis [3.00000] speed [2.50000];
		move lightdl to y-axis [3.00000] speed [2.50000];
		sleep 1109;
	}
	sleep 112;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		move armu to z-axis [-13.50000] now;
		move armdr to x-axis [-11.70000] now;
		move armdr to z-axis [6.75000] now;
		move armdl to x-axis [11.70000] now;
		move armdl to z-axis [6.75000] now;
		move lightu to y-axis [3.00000] now;
		move lightdr to y-axis [3.00000] now;
		move lightdl to y-axis [3.00000] now;
		move lightu to y-axis [0.00000] speed [2.50000];
		move lightdr to y-axis [0.00000] speed [2.50000];
		move lightdl to y-axis [0.00000] speed [2.50000];
		sleep 1201;
	}
	if( TRUE )
	{
		move armu to z-axis [0.00000] speed [10.00000];
		move armdr to x-axis [0.00000] speed [10.00000];
		move armdr to z-axis [0.00000] speed [5.00000];
		move armdl to x-axis [0.00000] speed [10.00000];
		move armdl to z-axis [0.00000] speed [5.00000];
		sleep 1220;
	}
	sleep 59;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from top;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script activatescr();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script deactivatescr();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = top;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | NOHEATCLOUD;
		explode top type SHATTER | BITMAP1 | NOHEATCLOUD;
		explode lightu type FALL | BITMAP2 | NOHEATCLOUD;
		explode lightdl type FALL | BITMAP3 | NOHEATCLOUD;
		explode lightdr type FALL | BITMAP4 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | NOHEATCLOUD;
		explode top type SHATTER | BITMAP1 | NOHEATCLOUD;
		explode lightu type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode lightdl type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		explode lightdr type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type SHATTER | NOHEATCLOUD;
	explode top type SHATTER | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	explode lightu type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode lightdl type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	explode lightdr type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
	return (corpsetype);
}
