#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, beam, Door1, Turret, Gun, Door2, Stand, wheel1,
       wheel2, launcher, flare;

static-var  Static_Var_1, gun_2, statechg_DesiredState, statechg_StateChanging;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

Go()
{
	turn Gun to y-axis Static_Var_1 speed <160.>;
	wait-for-turn Gun around y-axis;
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn Gun to y-axis <0.> speed <160.>;
	wait-for-turn Gun around y-axis;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	hide flare;
	Static_Var_1 = 0;
	gun_2 = beam;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

Activate()
{
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	start-script RequestState(1);
	return (0);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);
	return (0);
}

StopBuilding()
{
	start-script RequestState(1);
	return (0);
}

StartMoving()
{
	spin wheel1 around x-axis speed <150.>;
	spin wheel2 around x-axis speed <150.>;
	return (0);
}

StopMoving()
{
	stop-spin wheel1 around x-axis;
	stop-spin wheel2 around x-axis;
	return (0);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
	return (0);
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

AimPrimary(heading, pitch)
{
	while( !gun_2 )
	{
		sleep 250;
	}
	return (1);
}

FirePrimary()
{
	gun_2 = base;
	sleep 3000;
	gun_2 = beam;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = base;
	return (0);
}

AimSecondary(heading, pitch)
{
	while( !gun_2 )
	{
		sleep 250;
	}
	return (1);
}

FireSecondary()
{
	gun_2 = base;
	sleep 3000;
	gun_2 = beam;
	return (0);
}

QuerySecondary(piecenum)
{
	piecenum = flare;
	return (0);
}

AimFromSecondary(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type BITMAPONLY | BITMAP2;
		explode Door1 type BITMAPONLY | BITMAP3;
		explode launcher type BITMAPONLY | BITMAP3;
		explode Door2 type BITMAPONLY | BITMAP4;
		explode Gun type BITMAPONLY | BITMAP5;
		explode Stand type BITMAPONLY | BITMAP1;
		explode Turret type BITMAPONLY | BITMAP2;
		explode wheel1 type BITMAPONLY | BITMAP3;
		explode wheel2 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type BITMAPONLY | BITMAP2;
		explode Door1 type FALL | BITMAP3;
		explode launcher type FALL | BITMAP3;
		explode Door2 type FALL | BITMAP4;
		explode Gun type SHATTER | BITMAP5;
		explode Stand type FALL | BITMAP1;
		explode Turret type FALL | BITMAP2;
		explode wheel1 type FALL | BITMAP3;
		explode wheel2 type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode beam type BITMAPONLY | BITMAP2;
		explode Door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode launcher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode Door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode Gun type SHATTER | BITMAP5;
		explode Stand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode Turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode wheel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode beam type BITMAPONLY | BITMAP2;
	explode Door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode launcher type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode Door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode Gun type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode Stand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode Turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode wheel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode wheel2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}
