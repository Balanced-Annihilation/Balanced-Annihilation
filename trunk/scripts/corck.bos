#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SIG_BUILD		4	

piece  torso, nanospray2, pelvis, lthigh, rthigh, rleg, lleg, gunclamp,
       rfoot, lfoot, guncover, nanogun, nozzle, ground;

static-var  notBuilding, bMoving, moveSpeed, currentSpeed,
			statechg_DesiredState, statechg_StateChanging;


walk()
{
	if( bMoving )
	{
		move pelvis to y-axis [-0.100000] speed [1.192771] *  currentSpeed / 100;
		move lthigh to y-axis [0.000000] now;
		move rthigh to y-axis [0.000000] now;
		move rleg to y-axis [0.000000] now;
		move lleg to y-axis [0.000000] now;
		move gunclamp to y-axis [0.000000] now;
		turn lthigh to x-axis <-44.291209> speed <528.292734> *  currentSpeed / 100;
		turn rthigh to x-axis <12.291209> speed <146.605987> *  currentSpeed / 100;
		turn rleg to x-axis <17.571429> speed <209.586924> *  currentSpeed / 100;
		turn rfoot to x-axis <-24.956044> speed <297.668477> *  currentSpeed / 100;
		turn lleg to x-axis <36.203297> speed <431.822458> *  currentSpeed / 100;
		turn lfoot to x-axis <2.445055> speed <29.163909> *  currentSpeed / 100;
		sleep 4700 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.250000] speed [1.789157] *  currentSpeed / 100;
		turn lthigh to x-axis <-46.758242> speed <29.426056> *  currentSpeed / 100;
		turn rthigh to x-axis <20.390110> speed <96.601349> *  currentSpeed / 100;
		turn rfoot to x-axis <-31.280220> speed <75.432943> *  currentSpeed / 100;
		turn lleg to x-axis <20.390110> speed <188.615122> *  currentSpeed / 100;
		turn lfoot to x-axis <14.401099> speed <142.608236> *  currentSpeed / 100;
		sleep 4700 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.400000] speed [1.789157] *  currentSpeed / 100;
		turn lthigh to x-axis <-46.758242> now;
		turn rthigh to x-axis <30.582418> speed <121.570903> *  currentSpeed / 100;
		turn rleg to x-axis <22.137363> speed <54.461140> *  currentSpeed / 100;
		turn rfoot to x-axis <-34.456044> speed <37.880310> *  currentSpeed / 100;
		turn lleg to x-axis <3.505495> speed <201.394805> *  currentSpeed / 100;
		turn lfoot to x-axis <9.489011> speed <58.589965> *  currentSpeed / 100;
		sleep 4700 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.500000] speed [0.853448] *  currentSpeed / 100;
		turn lthigh to x-axis <-44.291209> speed <21.054851> *  currentSpeed / 100;
		turn rthigh to x-axis <43.236264> speed <107.994031> *  currentSpeed / 100;
		turn rleg to x-axis <20.027473> speed <18.006820> *  currentSpeed / 100;
		turn rfoot to x-axis <-42.538462> speed <68.979257> *  currentSpeed / 100;
		turn lleg to x-axis <44.291209> speed <348.084973> *  currentSpeed / 100;
		turn lfoot to x-axis <0.000000> speed <80.983801> *  currentSpeed / 100;
		sleep 8000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.400000] speed [1.192771] *  currentSpeed / 100;
		turn lthigh to x-axis <-36.560440> speed <92.210377> *  currentSpeed / 100;
		turn rthigh to x-axis <24.956044> speed <218.041178> *  currentSpeed / 100;
		turn rleg to x-axis <49.214286> speed <348.131866> *  currentSpeed / 100;
		turn rfoot to x-axis <-54.148352> speed <138.479411> *  currentSpeed / 100;
		turn lleg to x-axis <44.291209> now;
		turn lfoot to x-axis <-8.769231> speed <104.596852> *  currentSpeed / 100;
		sleep 5300 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.250000] speed [1.789157] *  currentSpeed / 100;
		turn lthigh to x-axis <-27.071429> speed <113.182179> *  currentSpeed / 100;
		turn rthigh to x-axis <9.137363> speed <188.680653> *  currentSpeed / 100;
		turn rleg to x-axis <60.467033> speed <134.219512> *  currentSpeed / 100;
		turn rfoot to x-axis <-56.258242> speed <25.166158> *  currentSpeed / 100;
		turn lleg to x-axis <44.291209> now;
		turn lfoot to x-axis <-17.923077> speed <109.184428> *  currentSpeed / 100;
		sleep 4700 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.900000] speed [7.753012] *  currentSpeed / 100;
		turn lthigh to x-axis <-16.516484> speed <125.896332> *  currentSpeed / 100;
		turn rthigh to x-axis <0.000000> speed <108.987824> *  currentSpeed / 100;
		turn rleg to x-axis <60.115385> speed <4.194356> *  currentSpeed / 100;
		turn rfoot to x-axis <-47.467033> speed <104.858999> *  currentSpeed / 100;
		turn lleg to x-axis <33.038462> speed <134.219512> *  currentSpeed / 100;
		turn lfoot to x-axis <-16.516484> speed <16.777435> *  currentSpeed / 100;
		sleep 4700 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [0.000000] speed [10.734940] *  currentSpeed / 100;
		turn lthigh to x-axis <-4.912088> speed <138.413880> *  currentSpeed / 100;
		turn rthigh to x-axis <-19.681319> speed <234.753082> *  currentSpeed / 100;
		turn rleg to x-axis <60.824176> speed <8.454254> *  currentSpeed / 100;
		turn rfoot to x-axis <-36.560440> speed <130.090688> *  currentSpeed / 100;
		turn lleg to x-axis <22.505495> speed <125.634185> *  currentSpeed / 100;
		turn lfoot to x-axis <-17.571429> speed <12.583079> *  currentSpeed / 100;
		sleep 4700 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.100000] speed [1.192771] *  currentSpeed / 100;
		turn lthigh to x-axis <4.912088> speed <117.179931> *  currentSpeed / 100;
		turn rthigh to x-axis <-46.401099> speed <318.705810> *  currentSpeed / 100;
		turn rfoot to x-axis <-19.681319> speed <201.329275> *  currentSpeed / 100;
		turn lleg to x-axis <23.203297> speed <8.323180> *  currentSpeed / 100;
		turn lfoot to x-axis <-25.313187> speed <92.341451> *  currentSpeed / 100;
		sleep 4700 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.250000] speed [1.789157] *  currentSpeed / 100;
		turn lthigh to x-axis <16.170330> speed <134.285055> *  currentSpeed / 100;
		turn rthigh to x-axis <-46.049451> speed <4.194356> *  currentSpeed / 100;
		turn rleg to x-axis <18.615385> speed <503.454254> *  currentSpeed / 100;
		turn rfoot to x-axis <13.000000> speed <389.813323> *  currentSpeed / 100;
		turn lleg to x-axis <22.505495> speed <8.323180> *  currentSpeed / 100;
		turn lfoot to x-axis <-34.456044> speed <109.053355> *  currentSpeed / 100;
		sleep 4700 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.400000] speed [1.789157] *  currentSpeed / 100;
		turn lthigh to x-axis <20.390110> speed <50.332316> *  currentSpeed / 100;
		turn rthigh to x-axis <-46.401099> speed <4.194356> *  currentSpeed / 100;
		turn rleg to x-axis <-8.423077> speed <322.506956> *  currentSpeed / 100;
		turn rfoot to x-axis <26.357143> speed <159.320139> *  currentSpeed / 100;
		turn lfoot to x-axis <-35.148352> speed <8.257650> *  currentSpeed / 100;
		sleep 4700 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.500000] speed [0.853448] *  currentSpeed / 100;
		turn lthigh to x-axis <23.203297> speed <24.009096> *  currentSpeed / 100;
		turn rthigh to x-axis <-45.005495> speed <11.910758> *  currentSpeed / 100;
		turn rleg to x-axis <46.049451> speed <464.894851> *  currentSpeed / 100;
		turn rfoot to x-axis <-1.390110> speed <236.808452> *  currentSpeed / 100;
		turn lleg to x-axis <37.615385> speed <128.955096> *  currentSpeed / 100;
		turn lfoot to x-axis <-43.593407> speed <72.074176> *  currentSpeed / 100;
		sleep 8000 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.400000] speed [1.192771] *  currentSpeed / 100;
		turn lthigh to x-axis <15.456044> speed <92.406994> *  currentSpeed / 100;
		turn rthigh to x-axis <-39.725275> speed <62.980937> *  currentSpeed / 100;
		turn rfoot to x-axis <-6.313187> speed <58.721039> *  currentSpeed / 100;
		turn lleg to x-axis <63.291209> speed <306.253804> *  currentSpeed / 100;
		turn lfoot to x-axis <-52.736264> speed <109.053355> *  currentSpeed / 100;
		sleep 5300 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.250000] speed [1.789157] *  currentSpeed / 100;
		turn lthigh to x-axis <6.670330> speed <104.793456> *  currentSpeed / 100;
		turn rthigh to x-axis <-30.582418> speed <109.053355> *  currentSpeed / 100;
		turn rfoot to x-axis <-15.456044> speed <109.053355> *  currentSpeed / 100;
		turn lleg to x-axis <66.445055> speed <37.618163> *  currentSpeed / 100;
		turn lfoot to x-axis <-51.324176> speed <16.842977> *  currentSpeed / 100;
		sleep 4700 / currentSpeed;
	}
	if( bMoving )
	{
		move pelvis to y-axis [-0.100000] speed [1.789157] *  currentSpeed / 100;
		turn lthigh to x-axis <-2.445055> speed <108.725677> *  currentSpeed / 100;
		turn rthigh to x-axis <-20.027473> speed <125.896332> *  currentSpeed / 100;
		turn rleg to x-axis <41.835165> speed <50.266785> *  currentSpeed / 100;
		turn rfoot to x-axis <-21.791209> speed <75.564016> *  currentSpeed / 100;
		turn lleg to x-axis <66.802198> speed <4.259898> *  currentSpeed / 100;
		turn lfoot to x-axis <-55.901099> speed <54.592214> *  currentSpeed / 100;
		sleep 4700 / currentSpeed;
	}
	move pelvis to y-axis [0.000000] speed [1.192771] *  currentSpeed / 100;
	turn lthigh to x-axis <-18.626374> speed <193.006094> *  currentSpeed / 100;
	turn rthigh to x-axis <2.802198> speed <272.305714> *  currentSpeed / 100;
	turn rleg to x-axis <17.571429> speed <289.410827> *  currentSpeed / 100;
	turn rfoot to x-axis <-20.736264> speed <12.583079> *  currentSpeed / 100;
	turn lleg to x-axis <54.148352> speed <150.931416> *  currentSpeed / 100;
	turn lfoot to x-axis <-36.560440> speed <230.689788> *  currentSpeed / 100;
	sleep 4700 / currentSpeed;
}

MotionControl(Func_Var_1, Func_Var_2)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		//Func_Var_2 = notBuilding;
		if( Func_Var_1 )
		{
			call-script walk();
			/*
			if( Func_Var_2 )
			{
				call-script walk();
			}
			else
			{
				call-script walk();
			}
			*/
		}
		else
		{
			sleep 200;
		}
	}
}

UnitSpeed()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*100/moveSpeed;
		if (currentSpeed<20) currentSpeed=20;
		sleep 142;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script UnitSpeed();
	start-script MotionControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	move lthigh to y-axis [0.000000] now;
	move rthigh to y-axis [0.000000] now;
	move rleg to y-axis [0.000000] now;
	move lleg to y-axis [0.000000] now;
	move gunclamp to y-axis [0.000000] now;
	move guncover to x-axis [0.000000] now;
	move guncover to x-axis [-0.939990] speed [20.000000];
	sleep 200;

	turn nanogun to z-axis <-90.016484> speed <600.000000>;
	sleep 200;

	turn gunclamp to y-axis <90.016484> speed <600.000000>;
	sleep 200;

	turn gunclamp to x-axis <0.000000> speed <0.000000>;
	turn nanogun to z-axis <-180.038462> speed <600.000000>;
	sleep 200;

	move nozzle to x-axis [-3.850000] speed [20.000000];
	turn gunclamp to x-axis <0.000000> speed <0.000000>;
	turn nanogun to z-axis <-180.038462> speed <0.000000>;
	sleep 200;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn torso to y-axis <0.000000> speed <600.000000>;
	wait-for-turn torso around y-axis;

	move lthigh to y-axis [0.000000] now;
	move rthigh to y-axis [0.000000] now;
	move rleg to y-axis [0.000000] now;
	move lleg to y-axis [0.000000] now;
	move gunclamp to y-axis [0.000000] now;
	move guncover to x-axis [-0.939990] speed [3.752379];
	move nozzle to x-axis [-3.850000] now;
	move nozzle to x-axis [0.000000] speed [20.000000];
	turn gunclamp to x-axis <0.000000> now;
	turn gunclamp to x-axis <0.000000> speed <0.000000>;
	turn gunclamp to y-axis <90.016484> speed <359.339997>;
	turn nanogun to z-axis <-180.038462> speed <718.701925>;
	sleep 200;

	turn gunclamp to x-axis <0.000000> speed <0.000000>;
	turn nanogun to z-axis <-90.016484> speed <600.000000>;
	sleep 200;

	turn gunclamp to y-axis <0.000000> speed <600.000000>;
	sleep 200;

	turn nanogun to z-axis <0.000000> speed <600.000000>;
	sleep 200;

	move guncover to x-axis [0.000000] speed [20.000000];
	sleep 200;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script Go();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	bMoving = FALSE;
	notBuilding = 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	moveSpeed = get MAX_SPEED;
	currentSpeed = 100;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(heading, pitch)
{
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	turn torso to y-axis heading speed <600.000000>;
	wait-for-turn torso around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

QueryNanoPiece(piecenum)
{
	piecenum = nanospray2;
}

/*
TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}
*/

SweetSpot(piecenum)
{
	piecenum = torso;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode ground type BITMAPONLY | BITMAP1;
		explode gunclamp type BITMAPONLY | BITMAP2;
		explode guncover type BITMAPONLY | BITMAP3;
		explode lfoot type BITMAPONLY | BITMAP4;
		explode lleg type BITMAPONLY | BITMAP5;
		explode lthigh type BITMAPONLY | BITMAP1;
		explode nanogun type BITMAPONLY | BITMAP2;
		explode nanospray2 type BITMAPONLY | BITMAP3;
		explode nozzle type BITMAPONLY | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP5;
		explode rfoot type BITMAPONLY | BITMAP1;
		explode rleg type BITMAPONLY | BITMAP2;
		explode rthigh type BITMAPONLY | BITMAP3;
		explode torso type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode ground type FALL | BITMAP1;
		explode gunclamp type FALL | BITMAP2;
		explode guncover type FALL | BITMAP3;
		explode lfoot type FALL | BITMAP4;
		explode lleg type FALL | BITMAP5;
		explode lthigh type FALL | BITMAP1;
		explode nanogun type FALL | BITMAP2;
		explode nanospray2 type FALL | BITMAP3;
		explode nozzle type FALL | BITMAP4;
		explode pelvis type SHATTER | BITMAP5;
		explode rfoot type FALL | BITMAP1;
		explode rleg type FALL | BITMAP2;
		explode rthigh type FALL | BITMAP3;
		explode torso type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gunclamp type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode guncover type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode nanogun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode nanospray2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode nozzle type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode pelvis type SHATTER | BITMAP5;
		explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode torso type BITMAPONLY | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gunclamp type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode guncover type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode nanogun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode nanospray2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode nozzle type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode pelvis type SHATTER | EXPLODE_ON_HIT | BITMAP5;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode torso type BITMAPONLY | BITMAP4;
}
