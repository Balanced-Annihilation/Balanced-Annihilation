#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, pad, beam1, beam2, cylinder1, cylinder2, cylinder3, cylinder4,
       cylinder5, cylinder6, nano2, nano1;

static-var  spray, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


activatescr()
{
	if( TRUE )
	{
		move cylinder1 to x-axis [0.00000] now;
		move cylinder1 to x-axis [27.12497] speed [88.35495];
		move cylinder2 to x-axis [0.00000] now;
		move cylinder2 to x-axis [-25.87497] speed [84.28329];
		sleep 307;
	}
	if( TRUE )
	{
		move cylinder3 to x-axis [27.37497] speed [91.55511];
		move cylinder4 to x-axis [-26.37495] speed [88.21054];
		sleep 299;
	}
	if( TRUE )
	{
		move cylinder5 to x-axis [27.12498] speed [82.44678];
		move cylinder6 to x-axis [-26.37500] speed [80.16718];
		sleep 329;
	}
	if( TRUE )
	{
		move cylinder5 to x-axis [27.24998] speed [0.31248];
		move cylinder6 to x-axis [-25.87497] speed [1.25005];
		turn cylinder5 to y-axis <96.76923> speed <241.93407>;
		turn cylinder6 to y-axis <100.36813> speed <250.93407>;
		sleep 400;
	}
	if( TRUE )
	{
		turn nano2 to z-axis <117.02747> speed <182.28022>;
		turn nano1 to z-axis <-117.02747> speed <182.28022>;
		sleep 642;
	}
	sleep 17;
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
		move cylinder1 to x-axis [27.12497] now;
		move cylinder2 to x-axis [-25.87497] now;
		move cylinder3 to x-axis [27.37497] now;
		move cylinder4 to x-axis [-26.37495] now;
		move cylinder5 to x-axis [27.24998] now;
		move cylinder6 to x-axis [-25.87497] now;
		turn cylinder5 to y-axis <96.76923> now;
		turn cylinder6 to y-axis <100.36813> now;
		turn nano2 to z-axis <117.02747> now;
		turn nano2 to z-axis <0.00000> speed <301.61538>;
		turn nano1 to z-axis <-117.02747> now;
		turn nano1 to z-axis <0.00000> speed <301.61538>;
		sleep 388;
	}
	if( TRUE )
	{
		move cylinder5 to x-axis [27.12498] speed [0.21588];
		move cylinder6 to x-axis [-26.37500] speed [0.86360];
		turn cylinder5 to y-axis <0.00000> speed <167.13736>;
		turn cylinder6 to y-axis <0.00000> speed <173.35714>;
		sleep 579;
	}
	if( TRUE )
	{
		move cylinder1 to x-axis [0.99995] speed [92.97154];
		move cylinder2 to x-axis [0.87502] speed [95.19574];
		sleep 281;
	}
	if( TRUE )
	{
		move cylinder3 to x-axis [0.74997] speed [98.97774];
		move cylinder4 to x-axis [0.50003] speed [99.90709];
		sleep 269;
	}
	if( TRUE )
	{
		move cylinder5 to x-axis [0.62498] speed [101.92310];
		move cylinder6 to x-axis [0.87498] speed [104.80769];
		sleep 260;
	}
	sleep 20;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
	return (0);
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
	return (0);
}

Go()
{
	dont-cache beam1;
	dont-cache beam2;
	dont-cache cylinder1;
	dont-cache cylinder2;
	dont-cache cylinder3;
	dont-cache cylinder4;
	dont-cache cylinder5;
	dont-cache cylinder6;
	dont-cache nano1;
	dont-cache nano2;
	dont-cache pad;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache beam1;
	cache beam2;
	cache cylinder1;
	cache cylinder2;
	cache cylinder3;
	cache cylinder4;
	cache cylinder5;
	cache cylinder6;
	cache nano1;
	cache nano2;
	cache pad;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	dont-shade beam1;
	dont-shade beam2;
	dont-shade cylinder1;
	dont-shade cylinder2;
	dont-shade cylinder3;
	dont-shade cylinder4;
	dont-shade cylinder5;
	dont-shade cylinder6;
	dont-shade nano1;
	dont-shade nano2;
	dont-shade pad;
	unitviewer = FALSE;
	spray = base;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( spray == 0 )
	{
		piecenum = beam1;
	}
	if( spray != 0 )
	{
		piecenum = beam2;
	}
	spray = !spray;
	return (0);
}

Demo()
{
	unitviewer = TRUE;
	return (0);
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

StartBuilding()
{
	spin pad around y-axis speed <0.00000>;
	return (0);
}

StopBuilding()
{
	stop-spin pad around y-axis;
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = pad;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type SHATTER | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | NOHEATCLOUD;
		explode beam1 type FALL | BITMAP2 | NOHEATCLOUD;
		explode beam2 type FALL | BITMAP3 | NOHEATCLOUD;
		explode cylinder5 type SHATTER | BITMAP3 | NOHEATCLOUD;
		explode cylinder6 type SHATTER | BITMAP4 | NOHEATCLOUD;
		explode nano1 type FALL | BITMAP5 | NOHEATCLOUD;
		explode nano2 type FALL | BITMAP1 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | NOHEATCLOUD;
		explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
		explode cylinder5 type SHATTER | BITMAP3 | NOHEATCLOUD;
		explode cylinder6 type SHATTER | BITMAP4 | NOHEATCLOUD;
		explode nano1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
		explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type SHATTER | NOHEATCLOUD;
	explode beam1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode beam2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	explode cylinder5 type SHATTER | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	explode cylinder6 type SHATTER | EXPLODE_ON_HIT | BITMAP4 | NOHEATCLOUD;
	explode nano1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5 | NOHEATCLOUD;
	explode nano2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1 | NOHEATCLOUD;
	return (corpsetype);
}
