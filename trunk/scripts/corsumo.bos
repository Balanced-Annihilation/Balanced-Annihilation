#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  rflare, lflare, body, turret, feetparent, FLFoot, FRFoot, RLFoot,
       RRFoot, rightchunk, leftchunk, faceguard, Lgun, Rgun, Rbarrel, Lbarrel,
       hips, knobs;

static-var  bMoving, bAiming, Static_Var_3, restore_delay, gun_1;

// Signal definitions
#define SIG_AIM				4


walklegs()
{
	if( TRUE )
	{
		move feetparent to z-axis [-2.250000] now;
		move FLFoot to x-axis [-2.250000] now;
		move FLFoot to y-axis [0.899994] now;
		move FLFoot to z-axis [0.750000] now;
		move FLFoot to z-axis [-0.899994] speed [5.000000];
		move FRFoot to x-axis [2.250000] now;
		move FRFoot to y-axis [0.899994] now;
		move FRFoot to z-axis [5.674957] now;
		move FRFoot to z-axis [8.824997] speed [17.500000];
		move RLFoot to x-axis [-2.250000] now;
		move RLFoot to y-axis [0.899994] now;
		move RLFoot to z-axis [-1.699997] now;
		move RLFoot to z-axis [-3.299957] speed [7.500000];
		move RRFoot to x-axis [2.250000] now;
		move RRFoot to y-axis [0.899994] now;
		move RRFoot to z-axis [-3.449997] now;
		move RRFoot to z-axis [-4.324997] speed [5.000000];
		move body to y-axis [3.224960] now;
		move body to z-axis [-0.649994] now;
		move rightchunk to x-axis [1.399994] now;
		move rightchunk to y-axis [3.224960] now;
		move rightchunk to z-axis [-0.750000] now;
		move leftchunk to x-axis [-1.399994] now;
		move leftchunk to y-axis [3.224960] now;
		move leftchunk to z-axis [-0.750000] now;
		move turret to x-axis [-0.250000] now;
		move turret to y-axis [0.949997] now;
		move turret to z-axis [-1.500000] now;
		move faceguard to x-axis [0.250000] now;
		move faceguard to y-axis [0.274994] now;
		move faceguard to z-axis [-0.750000] now;
		move Lgun to x-axis [-1.750000] now;
		move Lgun to y-axis [0.274994] now;
		move Lgun to z-axis [1.274994] now;
		move Rgun to x-axis [0.250000] now;
		move Rgun to y-axis [0.274994] now;
		move Rgun to z-axis [1.274994] now;
		move Rbarrel to z-axis [0.750000] now;
		move Lbarrel to z-axis [0.750000] now;
		turn FRFoot to x-axis <-17.835165> now;
		turn FRFoot to x-axis <-14.000000> speed <18.000000>;
		turn rightchunk to x-axis <-7.967033> now;
		turn rightchunk to x-axis <-11.000000> speed <20.000000>;
		sleep 120;
	}
	if( TRUE )
	{
		move FLFoot to z-axis [3.699997] speed [27.500000];
		move FRFoot to z-axis [8.699997] speed [0.000000];
		move RLFoot to z-axis [-4.074997] speed [2.500000];
		move RRFoot to z-axis [-4.074997] speed [0.000000];
		turn FLFoot to x-axis <-12.000000> speed <78.000000>;
		turn FRFoot to x-axis <0.000000> speed <94.000000>;
		turn RRFoot to x-axis <9.000000> speed <59.000000>;
		turn rightchunk to x-axis <0.000000> speed <66.000000>;
		turn leftchunk to x-axis <-5.000000> speed <34.000000>;
		sleep 120;
	}
	if( TRUE )
	{
		move FLFoot to z-axis [7.074997] speed [20.000000];
		move FRFoot to z-axis [6.299957] speed [12.500000];
		move RLFoot to z-axis [-5.149994] speed [5.000000];
		move RRFoot to z-axis [-3.949997] speed [0.000000];
		turn FLFoot to x-axis <-30.005495> speed <105.000000>;
		turn RRFoot to x-axis <15.000000> speed <34.000000>;
		turn rightchunk to x-axis <7.000000> speed <50.000000>;
		turn leftchunk to x-axis <-11.000000> speed <34.000000>;
		sleep 120;
	}
	if( TRUE )
	{
		move FRFoot to z-axis [5.824997] speed [2.500000];
		move RLFoot to z-axis [-6.174957] speed [5.000000];
		move RRFoot to z-axis [-1.424957] speed [15.000000];
		turn FLFoot to x-axis <-18.000000> speed <69.000000>;
		turn RRFoot to x-axis <19.000000> speed <25.000000>;
		turn rightchunk to x-axis <1.000000> speed <36.000000>;
		turn leftchunk to x-axis <-6.000000> speed <27.000000>;
		sleep 120;
	}
	if( TRUE )
	{
		move FRFoot to z-axis [4.299957] speed [7.500000];
		move RLFoot to z-axis [-8.074997] speed [10.000000];
		move RRFoot to z-axis [1.524994] speed [17.500000];
		turn FLFoot to x-axis <0.000000> speed <109.000000>;
		turn RRFoot to x-axis <7.000000> speed <73.000000>;
		turn leftchunk to x-axis <0.000000> speed <41.000000>;
		sleep 120;
	}
	if( TRUE )
	{
		move FLFoot to z-axis [4.924957] speed [12.500000];
		move FRFoot to z-axis [1.699997] speed [15.000000];
		move RRFoot to z-axis [0.649994] speed [5.000000];
		turn FLFoot to x-axis <0.000000> speed <4.000000>;
		turn RLFoot to x-axis <22.000000> speed <136.000000>;
		turn RRFoot to x-axis <0.000000> speed <41.000000>;
		turn leftchunk to x-axis <9.000000> speed <55.000000>;
		sleep 120;
	}
	if( TRUE )
	{
		move FLFoot to z-axis [3.799957] speed [5.000000];
		move FRFoot to z-axis [1.750000] speed [7.500000];
		move RLFoot to z-axis [-4.449997] speed [20.000000];
		move RRFoot to z-axis [-0.449997] speed [5.000000];
		turn RLFoot to x-axis <28.005495> speed <38.000000>;
		turn leftchunk to x-axis <10.000000> speed <6.000000>;
		sleep 120;
	}
	if( TRUE )
	{
		move FLFoot to z-axis [2.424957] speed [7.500000];
		move FRFoot to z-axis [-0.649994] speed [5.000000];
		move RLFoot to z-axis [-1.324997] speed [17.500000];
		move RRFoot to z-axis [-1.824997] speed [7.500000];
		turn RLFoot to x-axis <10.000000> speed <112.000000>;
		turn leftchunk to x-axis <2.000000> speed <46.000000>;
		sleep 120;
	}
	if( TRUE )
	{
		move FLFoot to z-axis [2.049957] speed [0.000000];
		move FRFoot to z-axis [0.750000] speed [2.500000];
		move RLFoot to z-axis [0.899994] speed [12.500000];
		move RRFoot to z-axis [-2.299957] speed [2.500000];
		turn FRFoot to x-axis <-10.000000> speed <66.000000>;
		turn RLFoot to x-axis <0.000000> speed <64.000000>;
		turn rightchunk to x-axis <-1.000000> speed <18.000000>;
		turn leftchunk to x-axis <-2.000000> speed <32.000000>;
		sleep 120;
	}
	if( TRUE )
	{
		move FLFoot to z-axis [0.924957] speed [5.000000];
		move FRFoot to z-axis [3.049957] speed [17.500000];
		move RLFoot to z-axis [-1.074997] speed [10.000000];
		move RRFoot to z-axis [-3.424957] speed [5.000000];
		turn FRFoot to x-axis <-12.000000> speed <13.000000>;
		turn rightchunk to x-axis <-4.000000> speed <18.000000>;
		sleep 120;
	}
	sleep 120;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from body;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			call-script walklegs();
			justmoved = TRUE;
		}
		if( !moving )
		{
			if( justmoved )
			{
				turn rightchunk to x-axis <0.000000> speed <150.000000>;
				turn RRFoot to x-axis <0.000000> speed <150.000000>;
				turn FRFoot to x-axis <0.000000> speed <150.000000>;
				turn leftchunk to x-axis <0.000000> speed <150.000000>;
				turn RLFoot to x-axis <0.000000> speed <150.000000>;
				turn FLFoot to x-axis <0.000000> speed <150.000000>;
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_3 = 1;
	gun_1 = rflare;
	hide rflare;
	hide lflare;
	restore_delay = 3000;
	start-script MotionControl();
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = body;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn Rgun to x-axis <0.000000> speed <45.000000>;
	turn Lgun to x-axis <0.000000> speed <45.000000>;
	bAiming = FALSE;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
	return (0);
}

QueryPrimary(piecenum)
{
	if( gun_1 == 0 )
	{
		piecenum = rflare;
	}
	if( gun_1 == 1 )
	{
		piecenum = lflare;
	}
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	turn turret to y-axis heading speed <140.000000>;
	turn Rgun to x-axis <0.000000> - pitch speed <35.000000>;
	turn Lgun to x-axis <0.000000> - pitch speed <35.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn Rgun around x-axis;
	wait-for-turn Lgun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 0 )
	{
		show rflare;
		sleep 150;
		hide rflare;
		gun_1 = lflare;
		return (0);
	}
	if( gun_1 == 1 )
	{
		show lflare;
		sleep 150;
		hide lflare;
		gun_1 = rflare;
	}
	return (0);
}

Killed(severity, corpsetype)
{
	hide lflare;
	hide rflare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode body type BITMAPONLY | BITMAP1;
		explode FLFoot type BITMAPONLY | BITMAP1;
		explode FRFoot type BITMAPONLY | BITMAP2;
		explode knobs type BITMAPONLY | BITMAP3;
		explode Lbarrel type BITMAPONLY | BITMAP4;
		explode leftchunk type BITMAPONLY | BITMAP5;
		explode lflare type BITMAPONLY | BITMAP1;
		explode Lgun type BITMAPONLY | BITMAP2;
		explode Rbarrel type BITMAPONLY | BITMAP3;
		explode rflare type BITMAPONLY | BITMAP4;
		explode Rgun type BITMAPONLY | BITMAP5;
		explode rightchunk type BITMAPONLY | BITMAP1;
		explode RLFoot type BITMAPONLY | BITMAP2;
		explode RRFoot type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode body type BITMAPONLY | BITMAP1;
		explode FLFoot type BITMAPONLY | BITMAP1;
		explode FRFoot type BITMAPONLY | BITMAP2;
		explode knobs type FALL | BITMAP3;
		explode Lbarrel type FALL | BITMAP4;
		explode leftchunk type BITMAPONLY | BITMAP5;
		explode lflare type FALL | BITMAP1;
		explode Lgun type FALL | BITMAP2;
		explode Rbarrel type FALL | BITMAP3;
		explode rflare type FALL | BITMAP4;
		explode Rgun type FALL | BITMAP5;
		explode rightchunk type BITMAPONLY | BITMAP1;
		explode RLFoot type BITMAPONLY | BITMAP2;
		explode RRFoot type BITMAPONLY | BITMAP3;
		explode turret type FALL | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode body type SHATTER | BITMAP1;
		explode FLFoot type BITMAPONLY | BITMAP1;
		explode FRFoot type BITMAPONLY | BITMAP2;
		explode knobs type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode Lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode leftchunk type BITMAPONLY | BITMAP5;
		explode lflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode Lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode Rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode Rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rightchunk type BITMAPONLY | BITMAP1;
		explode RLFoot type BITMAPONLY | BITMAP2;
		explode RRFoot type BITMAPONLY | BITMAP3;
		explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode FLFoot type BITMAPONLY | BITMAP1;
	explode FRFoot type BITMAPONLY | BITMAP2;
	explode knobs type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode Lbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode leftchunk type BITMAPONLY | BITMAP5;
	explode lflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode Lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode Rbarrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode Rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rightchunk type BITMAPONLY | BITMAP1;
	explode RLFoot type BITMAPONLY | BITMAP2;
	explode RRFoot type BITMAPONLY | BITMAP3;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	return (0);
}
