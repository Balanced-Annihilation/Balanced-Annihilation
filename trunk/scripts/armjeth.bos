#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  torso, rfirept, lfirept, pelvis, lleg, rleg, rthigh, lthigh,
       luparm, lloarm, rloarm, ruparm, rgun, lgun, ground, lexhaust, rexhaust;

static-var  bMoving, Static_Var_2, Static_Var_3, gun_3, restore_delay,
            statechg_DesiredState, statechg_StateChanging,
            moveSpeed, currentSpeed;

// Signal definitions
#define SIG_AIM_3			2


walk()
{
	while( bMoving )
	{
		if( bMoving )
		{
			move pelvis to y-axis [-0.400000] speed [7.920000] *  currentSpeed / 100;
			move rfirept to z-axis [0.000000] now;
			move lfirept to z-axis [0.000000] now;
			move lleg to y-axis [0.000000] now;
			move rleg to y-axis [0.000000] now;
			turn rthigh to x-axis <35.857143> speed <709.971431> *  currentSpeed / 100;
			turn lthigh to x-axis <-35.153846> speed <696.046151> *  currentSpeed / 100;
			turn lleg to x-axis <34.796703> speed <688.974719> *  currentSpeed / 100;
			turn rleg to x-axis <26.362637> speed <521.980213> *  currentSpeed / 100;
			sleep 2000 / currentSpeed;
		}
		if( bMoving )
		{
			move torso to y-axis [-0.150000] speed [2.970000] *  currentSpeed / 100;
			sleep 2000 / currentSpeed;
		}
		if( bMoving )
		{
			move torso to y-axis [-0.300000] speed [1.789157] *  currentSpeed / 100;
			sleep 5000 / currentSpeed;
		}
		if( bMoving )
		{
			move torso to y-axis [-0.150000] speed [2.970000] *  currentSpeed / 100;
			sleep 2000 / currentSpeed;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.300000] speed [0.853448] *  currentSpeed / 100;
			move torso to y-axis [0.000000] speed [1.280172] *  currentSpeed / 100;
			move rleg to y-axis [0.400000] speed [3.413793] *  currentSpeed / 100;
			turn rthigh to x-axis <20.032967> speed <135.051157> *  currentSpeed / 100;
			turn lthigh to x-axis <-30.582418> speed <39.014773> *  currentSpeed / 100;
			turn lleg to x-axis <29.873626> speed <42.015916> *  currentSpeed / 100;
			turn rleg to x-axis <26.714286> speed <3.001142> *  currentSpeed / 100;
			sleep 7000 / currentSpeed;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.200000] speed [1.192771] *  currentSpeed / 100;
			move rleg to y-axis [0.700000] speed [3.578313] *  currentSpeed / 100;
			turn rthigh to x-axis <9.489011> speed <125.765258> *  currentSpeed / 100;
			turn lthigh to x-axis <-23.901099> speed <79.692841> *  currentSpeed / 100;
			turn lleg to x-axis <24.604396> speed <62.849852> *  currentSpeed / 100;
			turn rleg to x-axis <26.714286> now;
			sleep 6000 / currentSpeed;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.900000] speed [8.349398] *  currentSpeed / 100;
			turn rthigh to x-axis <-12.291209> speed <259.788166> *  currentSpeed / 100;
			turn lthigh to x-axis <-7.368132> speed <197.200450> *  currentSpeed / 100;
			turn lleg to x-axis <7.379121> speed <205.458099> *  currentSpeed / 100;
			turn rleg to x-axis <26.362637> speed <4.194368> *  currentSpeed / 100;
			sleep 5000 / currentSpeed;
		}
		if( bMoving )
		{
			move pelvis to y-axis [0.000000] speed [10.734940] *  currentSpeed / 100;
			move rleg to y-axis [0.550000] speed [1.789157] *  currentSpeed / 100;
			turn rthigh to x-axis <-21.093407> speed <104.990073> *  currentSpeed / 100;
			turn lthigh to x-axis <4.565934> speed <142.346088> *  currentSpeed / 100;
			turn lleg to x-axis <16.873626> speed <113.247710> *  currentSpeed / 100;
			turn rleg to x-axis <26.362637> now;
			sleep 4000 / currentSpeed;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.100000] speed [1.192771] *  currentSpeed / 100;
			turn rthigh to x-axis <-28.824176> speed <92.210377> *  currentSpeed / 100;
			turn lthigh to x-axis <15.818681> speed <134.219512> *  currentSpeed / 100;
			sleep 5000 / currentSpeed;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.200000] speed [1.192771] *  currentSpeed / 100;
			turn rthigh to x-axis <-43.598901> speed <176.228648> *  currentSpeed / 100;
			turn lthigh to x-axis <18.631868> speed <33.554881> *  currentSpeed / 100;
			sleep 6000 / currentSpeed;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.300000] speed [0.853448] *  currentSpeed / 100;
			turn rthigh to x-axis <-54.148352> speed <90.034108> *  currentSpeed / 100;
			turn lthigh to x-axis <25.664835> speed <60.022736> *  currentSpeed / 100;
			sleep 7000 / currentSpeed;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.400000] speed [1.980000] *  currentSpeed / 100;
			move rleg to y-axis [0.000000] speed [10.890000] *  currentSpeed / 100;
			turn rthigh to x-axis <-35.857143> speed <362.165938> *  currentSpeed / 100;
			turn lthigh to x-axis <28.126374> speed <48.738472> *  currentSpeed / 100;
			turn lleg to x-axis <16.170330> speed <13.925261> *  currentSpeed / 100;
			turn rleg to x-axis <35.857143> speed <187.991219> *  currentSpeed / 100;
			sleep 2000 / currentSpeed;
		}
		if( bMoving )
		{
			move torso to y-axis [-0.150000] speed [2.970000] *  currentSpeed / 100;
			sleep 2000 / currentSpeed;
		}
		if( bMoving )
		{
			move torso to y-axis [-0.300000] speed [1.789157] *  currentSpeed / 100;
			sleep 5000 / currentSpeed;
		}
		if( bMoving )
		{
			move torso to y-axis [-0.150000] speed [2.970000] *  currentSpeed / 100;
			sleep 2000 / currentSpeed;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.300000] speed [0.853448] *  currentSpeed / 100;
			move torso to y-axis [0.000000] speed [1.280172] *  currentSpeed / 100;
			move lleg to y-axis [0.700000] speed [5.974138] *  currentSpeed / 100;
			turn rthigh to x-axis <-27.763736> speed <69.073042> *  currentSpeed / 100;
			turn lthigh to x-axis <21.445055> speed <57.021602> *  currentSpeed / 100;
			turn lleg to x-axis <21.791209> speed <47.971295> *  currentSpeed / 100;
			turn rleg to x-axis <28.126374> speed <65.978115> *  currentSpeed / 100;
			sleep 7000 / currentSpeed;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.200000] speed [1.192771] *  currentSpeed / 100;
			turn rthigh to x-axis <-21.791209> speed <71.238575> *  currentSpeed / 100;
			turn lthigh to x-axis <8.428571> speed <155.256857> *  currentSpeed / 100;
			turn lleg to x-axis <24.252747> speed <29.360513> *  currentSpeed / 100;
			turn rleg to x-axis <22.142857> speed <71.369661> *  currentSpeed / 100;
			sleep 6000 / currentSpeed;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.100000] speed [1.192771] *  currentSpeed / 100;
			turn rthigh to x-axis <-16.170330> speed <67.044219> *  currentSpeed / 100;
			turn lthigh to x-axis <-6.670330> speed <180.095325> *  currentSpeed / 100;
			turn rleg to x-axis <16.873626> speed <62.849864> *  currentSpeed / 100;
			sleep 5000 / currentSpeed;
		}
		if( bMoving )
		{
			move pelvis to y-axis [0.000000] speed [1.192771] *  currentSpeed / 100;
			move lleg to y-axis [0.800000] speed [1.192771] *  currentSpeed / 100;
			turn rthigh to x-axis <-6.670330> speed <113.313253> *  currentSpeed / 100;
			turn lthigh to x-axis <-15.461538> speed <104.858987> *  currentSpeed / 100;
			turn lleg to x-axis <20.390110> speed <46.072417> *  currentSpeed / 100;
			turn rleg to x-axis <25.313187> speed <100.664643> *  currentSpeed / 100;
			sleep 4000 / currentSpeed;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.100000] speed [1.192771] *  currentSpeed / 100;
			turn rthigh to x-axis <2.807692> speed <113.051106> *  currentSpeed / 100;
			turn lthigh to x-axis <-26.010989> speed <125.830801> *  currentSpeed / 100;
			sleep 5000 / currentSpeed;
		}
		if( bMoving )
		{
			move pelvis to y-axis [-0.200000] speed [1.192771] *  currentSpeed / 100;
			turn rthigh to x-axis <10.192308> speed <88.081564> *  currentSpeed / 100;
			turn lthigh to x-axis <-35.153846> speed <109.053355> *  currentSpeed / 100;
			sleep 6000 / currentSpeed;
		}
		move pelvis to y-axis [-0.300000] speed [0.853448] *  currentSpeed / 100;
		turn rthigh to x-axis <21.445055> speed <96.036375> *  currentSpeed / 100;
		turn lthigh to x-axis <-55.549451> speed <174.065939> *  currentSpeed / 100;
		sleep 7000 / currentSpeed;
	}
}

Go()
{
	Static_Var_2 = 1;
	if( !Static_Var_3 )
	{
		turn luparm to z-axis <0.000000> now;
		turn luparm to z-axis <-73.016484> speed <212.000000>;
		turn lloarm to z-axis <0.000000> now;
		turn lloarm to z-axis <90.021978> speed <260.000000>;
		turn rloarm to z-axis <0.000000> now;
		turn rloarm to z-axis <-90.021978> speed <260.000000>;
		turn ruparm to z-axis <0.000000> now;
		turn ruparm to z-axis <75.016484> speed <218.000000>;
		sleep 450;
		Static_Var_3 = 1;
	}
}

Stop()
{
	if( Static_Var_3 )
	{
		Static_Var_3 = 0;
		turn luparm to z-axis <-73.483516> now;
		turn luparm to z-axis <0.000000> speed <67.000000>;
		turn lloarm to z-axis <90.021978> now;
		turn lloarm to z-axis <0.000000> speed <82.000000>;
		turn rloarm to z-axis <-90.021978> now;
		turn rloarm to z-axis <0.000000> speed <82.000000>;
		turn ruparm to z-axis <75.593407> now;
		turn ruparm to z-axis <0.000000> speed <68.000000>;
		sleep 1097;
	}
	Static_Var_2 = 0;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = Static_Var_2;
		if( moving )
		{
			call-script walk();
			justmoved = TRUE;
		}
		else
		{
			if( justmoved )
			{
				move pelvis to y-axis [0.000000] speed [1.000000];
				turn rthigh to x-axis <0.000000> speed <200.000000>;
				turn rleg to x-axis <0.000000> speed <200.000000>;
				turn lthigh to x-axis <0.000000> speed <200.000000>;
				turn lleg to x-axis <0.000000> speed <200.000000>;
				if( !aiming )
				{
					turn torso to y-axis <0.000000> speed <90.000000>;
				}
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

UnitSpeed()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*100/moveSpeed;
		if (currentSpeed<20) currentSpeed=20;
		sleep 142;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script UnitSpeed();
	start-script MotionControl();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide rfirept;
	hide lfirept;
	bMoving = FALSE;
	Static_Var_2 = 0;
	Static_Var_3 = 0;
	gun_3 = torso;
	restore_delay = 3000;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	moveSpeed = get MAX_SPEED;
	currentSpeed = 100;
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 5;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = torso;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn torso to y-axis <0.000000> speed <90.000000>;
}

AimTertiary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	while( !Static_Var_3 )
	{
		sleep 100;
	}
	turn torso to y-axis heading speed <275.000000>;
	wait-for-turn torso around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireTertiary()
{
	if( gun_3 )
	{
		move lgun to z-axis [-1.500000] speed [25.000000];
		wait-for-move lgun along z-axis;
		emit-sfx 1024 from rexhaust;
		move lgun to z-axis [0.000000] speed [3.000000];
	}
	else
	{
		move rgun to z-axis [-1.500000] speed [25.000000];
		wait-for-move rgun along z-axis;
		emit-sfx 1024 from lexhaust;
		move rgun to z-axis [0.000000] speed [3.000000];
	}
	gun_3 = !gun_3;
}

AimFromTertiary(piecenum)
{
	piecenum = torso;
}

QueryTertiary(piecenum)
{
	piecenum = rfirept + gun_3;
}

Killed(severity, corpsetype)
{
	hide rfirept;
	hide lfirept;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode ground type BITMAPONLY | BITMAP1;
		explode lfirept type BITMAPONLY | BITMAP2;
		explode lgun type BITMAPONLY | BITMAP3;
		explode lleg type BITMAPONLY | BITMAP4;
		explode lloarm type BITMAPONLY | BITMAP5;
		explode lthigh type BITMAPONLY | BITMAP1;
		explode luparm type BITMAPONLY | BITMAP2;
		explode pelvis type BITMAPONLY | BITMAP3;
		explode rfirept type BITMAPONLY | BITMAP4;
		explode rgun type BITMAPONLY | BITMAP5;
		explode rleg type BITMAPONLY | BITMAP1;
		explode rloarm type BITMAPONLY | BITMAP2;
		explode rthigh type BITMAPONLY | BITMAP3;
		explode ruparm type BITMAPONLY | BITMAP4;
		explode torso type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode ground type FALL | BITMAP1;
		explode lfirept type FALL | BITMAP2;
		explode lgun type FALL | BITMAP3;
		explode lleg type FALL | BITMAP4;
		explode lloarm type FALL | BITMAP5;
		explode lthigh type FALL | BITMAP1;
		explode luparm type FALL | BITMAP2;
		explode pelvis type FALL | BITMAP3;
		explode rfirept type FALL | BITMAP4;
		explode rgun type FALL | BITMAP5;
		explode rleg type FALL | BITMAP1;
		explode rloarm type FALL | BITMAP2;
		explode rthigh type FALL | BITMAP3;
		explode ruparm type FALL | BITMAP4;
		explode torso type SHATTER | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lfirept type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rfirept type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode torso type SHATTER | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lfirept type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode pelvis type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rfirept type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rgun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode torso type SHATTER | EXPLODE_ON_HIT | BITMAP5;
}
