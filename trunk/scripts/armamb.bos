#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, gun, door1, door2, door3, door4, stand,
       turret, barrel;

static-var  Static_Var_1, restore_delay, statechg_DesiredState, statechg_StateChanging, Static_Var_5;


activatescr()
{
	if( TRUE )
	{
		move door1 to y-axis [0.000000] now;
		move door1 to y-axis [-3.400000] speed [8.542706];
		move door2 to y-axis [0.000000] now;
		move door2 to y-axis [-3.400000] speed [8.542706];
		move door3 to y-axis [0.000000] now;
		move door3 to y-axis [-3.400000] speed [8.542706];
		move door4 to y-axis [0.000000] now;
		move door4 to y-axis [-3.450000] speed [8.668335];
		move stand to y-axis [-5.350000] now;
		move turret to y-axis [-14.350000] now;
		move barrel to z-axis [-7.900000] now;
		turn door1 to x-axis <90.379121> now;
		turn door1 to x-axis <0.000000> speed <227.093407>;
		turn door2 to z-axis <-90.379121> now;
		turn door2 to z-axis <0.000000> speed <227.093407>;
		turn door3 to x-axis <-90.379121> now;
		turn door3 to x-axis <0.000000> speed <227.093407>;
		turn door4 to z-axis <90.379121> now;
		turn door4 to z-axis <0.000000> speed <227.093407>;
		turn stand to y-axis <-360.082418> now;
		turn gun to x-axis <-90.379121> now;
		sleep 398;
	}
	if( TRUE )
	{
		move door1 to y-axis [-3.399994] speed [0.000000];
		move door2 to y-axis [-3.399994] speed [0.000000];
		move door3 to y-axis [-3.400000] speed [0.000000];
		move door4 to y-axis [-3.400000] speed [0.092755];
		move stand to y-axis [-1.500000] speed [7.142859];
		turn stand to y-axis <-180.280220> speed <333.582418>;
		sleep 539;
	}
	if( TRUE )
	{
		move door1 to y-axis [-3.399994] speed [0.000000];
		move door2 to y-axis [-3.400000] speed [0.000000];
		move door3 to y-axis [-3.400000] speed [0.000000];
		move door4 to y-axis [-3.400000] speed [0.000000];
		move stand to y-axis [0.000000] speed [2.879071];
		turn stand to y-axis <0.000000> speed <346.038462>;
		sleep 521;
	}
	if( TRUE )
	{
		move door1 to y-axis [-3.400000] speed [0.000000];
		move door2 to y-axis [-3.400000] speed [0.000000];
		move door3 to y-axis [-3.400000] speed [0.000000];
		move door4 to y-axis [-3.400000] speed [0.000000];
		move turret to y-axis [0.000000] speed [40.536725];
		sleep 354;
	}
	if( TRUE )
	{
		move door1 to y-axis [-3.400000] speed [0.000000];
		move door2 to y-axis [-3.400000] speed [0.000000];
		move door3 to y-axis [-3.400000] speed [0.000000];
		move door4 to y-axis [-3.400000] speed [0.000000];
		turn gun to x-axis <0.000000> speed <253.181319>;
		sleep 357;
	}
	if( TRUE )
	{
		move door1 to y-axis [-3.400000] speed [0.000000];
		move door2 to y-axis [-3.400000] speed [0.000000];
		move door3 to y-axis [-3.400000] speed [0.000000];
		move door4 to y-axis [-3.400000] speed [0.000000];
		move barrel to z-axis [0.000000] speed [22.443176];
		sleep 352;
	}
	sleep 25;
}

deactivatescr()
{
	if( TRUE )
	{
		move door1 to y-axis [-3.400000] now;
		move door1 to y-axis [-3.400000] speed [0.000000];
		move door2 to y-axis [-3.400000] now;
		move door2 to y-axis [-3.400000] speed [0.000000];
		move door3 to y-axis [-3.400000] now;
		move door3 to y-axis [-3.400000] speed [0.000000];
		move door4 to y-axis [-3.400000] now;
		move door4 to y-axis [-3.400000] speed [0.000000];
		move barrel to z-axis [0.000000] now;
		move barrel to z-axis [-7.900000] speed [24.687500];
		sleep 320;
	}
	if( TRUE )
	{
		move door1 to y-axis [-3.400000] speed [0.000000];
		move door2 to y-axis [-3.400000] speed [0.000000];
		move door3 to y-axis [-3.400000] speed [0.000000];
		move door4 to y-axis [-3.400000] speed [0.000000];
		turn gun to x-axis <-90.379121> speed <281.571429>;
		sleep 321;
	}
	if( TRUE )
	{
		move door1 to y-axis [-3.399994] speed [0.000000];
		move door2 to y-axis [-3.400000] speed [0.000000];
		move door3 to y-axis [-3.400000] speed [0.000000];
		move door4 to y-axis [-3.400000] speed [0.000000];
		move turret to y-axis [-14.350000] speed [44.704053];
		sleep 321;
	}
	if( TRUE )
	{
		move door1 to y-axis [-3.399994] speed [0.000000];
		move door2 to y-axis [-3.399994] speed [0.000000];
		move door3 to y-axis [-3.400000] speed [0.000000];
		move door4 to y-axis [-3.400000] speed [0.000000];
		move stand to y-axis [-1.500000] speed [3.012042];
		turn stand to y-axis <-180.280220> speed <362.016484>;
		sleep 498;
	}
	if( TRUE )
	{
		move door1 to y-axis [0.000000] speed [6.679761];
		move door2 to y-axis [0.000000] speed [6.679761];
		move door3 to y-axis [0.000000] speed [6.679761];
		move door4 to y-axis [0.000000] speed [6.679761];
		move stand to y-axis [-5.350000] speed [7.563849];
		turn stand to y-axis <-360.082418> speed <353.236264>;
		sleep 509;
	}
	if( TRUE )
	{
		turn door1 to x-axis <90.379121> speed <225.956044>;
		turn door2 to z-axis <-90.379121> speed <225.956044>;
		turn door3 to x-axis <-90.379121> speed <225.956044>;
		turn door4 to z-axis <90.379121> speed <225.956044>;
		sleep 400;
	}
	sleep 17;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache barrel;
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
	dont-cache flare;
	dont-cache gun;
	dont-cache stand;
	dont-cache turret;
	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	Static_Var_1 = 1;
	set ARMORED to 0;
}

Stop()
{
	set ARMORED to 1;
	Static_Var_1 = 0;
	call-script deactivatescr();
	cache barrel;
	cache door1;
	cache door2;
	cache door3;
	cache door4;
	cache flare;
	cache gun;
	cache stand;
	cache turret;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	signal 8;
	set-signal-mask 8;
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

Create()
{
	dont-shade barrel;
	dont-shade base;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	dont-shade flare;
	dont-shade gun;
	dont-shade stand;
	dont-shade turret;
	hide flare;
	Static_Var_1 = 1;
	Static_Var_5 = 0;
	restore_delay = 3000;
	start-script SmokeUnit();
	call-script InitState();
	start-script RequestState(0);
	set-signal-mask 2;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script RestoreAfterDelay();
}

Reload1()
{
	sleep 1800;
	Static_Var_5 = 0;
}

Reload2()
{
	sleep 3240;
	Static_Var_5 = 0;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

AimWeapon1(heading, pitch)
{
	start-script RequestState(0);
	signal 2;
	set-signal-mask 2;
	if( pitch >= 10012 OR Static_Var_5 == 1 )
	{
		return (0);
	}
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <100.016484>;
	turn gun to x-axis <0.000000> - pitch speed <50.005495>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1()
{
	Static_Var_5 = 1;
	start-script Reload1();
	move barrel to z-axis [-5.000000] speed [500.000000];
	show flare;
	sleep 250;
	hide flare;
	move barrel to z-axis [0.000000] speed [3.000000];
}

AimFromWeapon1(piecenum)
{
	piecenum = gun;
}

QueryWeapon1(piecenum)
{
	piecenum = flare;
}

AimWeapon2(heading, pitch)
{
	start-script RequestState(0);
	signal 4;
	set-signal-mask 4;
	if( pitch < 10012 OR Static_Var_5 == 1 )
	{
		return (0);
	}
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <100.016484>;
	turn gun to x-axis <0.000000> - pitch speed <50.005495>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon2()
{
	Static_Var_5 = 1;
	start-script Reload2();
	move barrel to z-axis [-5.000000] speed [500.000000];
	show flare;
	sleep 250;
	hide flare;
	move barrel to z-axis [0.000000] speed [3.000000];
}

AimFromWeapon2(piecenum)
{
	piecenum = gun;
}

QueryWeapon2(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 1;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 2;
		}
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP2;
		explode door3 type BITMAPONLY | BITMAP2;
		explode door4 type BITMAPONLY | BITMAP2;
		explode flare type BITMAPONLY | BITMAP3;
		explode gun type BITMAPONLY | BITMAP4;
		explode stand type BITMAPONLY | BITMAP5;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 50 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 2;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 3;
		}
		explode barrel type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type FALL | BITMAP3;
		explode door2 type FALL | BITMAP3;
		explode door3 type FALL | BITMAP3;
		explode door4 type FALL | BITMAP3;
		explode flare type FALL | BITMAP3;
		explode gun type BITMAPONLY | BITMAP4;
		explode stand type BITMAPONLY | BITMAP5;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	if( severity <= 99 )
	{
		if( Static_Var_1 )
		{
			corpsetype = 3;
		}
		if( !Static_Var_1 )
		{
			corpsetype = 4;
		}
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode gun type BITMAPONLY | BITMAP4;
		explode stand type BITMAPONLY | BITMAP5;
		explode turret type BITMAPONLY | BITMAP1;
		return (0);
	}
	corpsetype = 4;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode door1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door3 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode door4 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode gun type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode stand type BITMAPONLY | BITMAP5;
	explode turret type BITMAPONLY | BITMAP1;
}
