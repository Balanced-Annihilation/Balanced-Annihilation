#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  gauss, turret, flash, torso, ruparm, luparm, pelvis, lthigh,
       rthigh, rleg, rfoot, lleg, lfoot, lloarm, lhand, rloarm,
       rhand, ground;

static-var  restore_delay, Static_Var_2, gun_2, statechg_DesiredState,
			statechg_StateChanging, moveSpeed, currentSpeed, animSpeed;

// Signal definitions
#define SIG_MOVE			2
#define SIG_AIM				4
#define SIG_AIM_2			8


walk()
{
	while( TRUE )
	{
		move torso to y-axis [0.000000] now;
		move ruparm to y-axis [0.000000] now;
		move ruparm to z-axis [0.000000] now;
		move luparm to y-axis [-0.300000] speed [3.578313] *  currentSpeed / 100;
		move luparm to z-axis [0.300000] speed [3.578313] *  currentSpeed / 100;
		turn pelvis to z-axis <-3.582418> speed <42.730046> *  currentSpeed / 100;
		turn torso to z-axis <5.390110> speed <64.291673> *  currentSpeed / 100;
		turn lthigh to x-axis <33.758242> speed <402.658549> *  currentSpeed / 100;
		turn rthigh to x-axis <0.000000> now;
		turn rleg to x-axis <42.747253> speed <509.876873> *  currentSpeed / 100;
		turn rfoot to x-axis <-31.945055> speed <381.031379> *  currentSpeed / 100;
		turn lleg to x-axis <7.181319> speed <85.656697> *  currentSpeed / 100;
		turn lfoot to x-axis <-11.692308> speed <139.462469> *  currentSpeed / 100;
		turn ruparm to x-axis <22.945055> speed <273.681981> *  currentSpeed / 100;
		turn luparm to x-axis <-51.302198> speed <611.917783> *  currentSpeed / 100;
		turn lloarm to x-axis <21.137363> speed <252.120354> *  currentSpeed / 100;
		turn lhand to x-axis <36.445055> speed <434.706078> *  currentSpeed / 100;
		turn rloarm to x-axis <0.000000> now;
		turn rhand to x-axis <-5.835165> speed <69.600161> *  currentSpeed / 100;
		sleep animSpeed;

		move torso to y-axis [0.150000] speed [1.789157] *  currentSpeed / 100;
		move ruparm to y-axis [0.600000] speed [7.156627] *  currentSpeed / 100;
		move ruparm to z-axis [-0.350000] speed [4.174699] *  currentSpeed / 100;
		move luparm to y-axis [0.000000] speed [3.578313] *  currentSpeed / 100;
		move luparm to z-axis [0.200000] speed [1.192771] *  currentSpeed / 100;
		turn pelvis to z-axis <-2.236264> speed <16.056536> *  currentSpeed / 100;
		turn torso to z-axis <2.236264> speed <37.618163> *  currentSpeed / 100;
		turn lthigh to x-axis <47.247253> speed <160.893023> *  currentSpeed / 100;
		turn rthigh to x-axis <6.736264> speed <80.348209> *  currentSpeed / 100;
		turn rleg to x-axis <-28.791209> speed <853.290089> *  currentSpeed / 100;
		turn rfoot to x-axis <16.637363> speed <579.477034> *  currentSpeed / 100;
		turn lleg to x-axis <-5.835165> speed <155.256857> *  currentSpeed / 100;
		turn lfoot to x-axis <0.000000> speed <139.462469> *  currentSpeed / 100;
		turn ruparm to x-axis <7.181319> speed <188.025285> *  currentSpeed / 100;
		turn luparm to x-axis <-29.236264> speed <263.196080> *  currentSpeed / 100;
		turn lloarm to x-axis <13.489011> speed <91.227331> *  currentSpeed / 100;
		turn lhand to x-axis <16.192308> speed <241.568910> *  currentSpeed / 100;
		turn rloarm to x-axis <3.582418> speed <42.730046> *  currentSpeed / 100;
		turn rhand to x-axis <106.214286> speed <1336.493452> *  currentSpeed / 100;
		sleep animSpeed;

		move torso to y-axis [0.350000] speed [2.385542] *  currentSpeed / 100;
		move ruparm to z-axis [-0.100000] speed [2.981928] *  currentSpeed / 100;
		move luparm to z-axis [0.000000] speed [2.385542] *  currentSpeed / 100;
		turn pelvis to z-axis <-0.890110> speed <16.056536> *  currentSpeed / 100;
		turn torso to z-axis <-1.335165> speed <42.598972> *  currentSpeed / 100;
		turn lthigh to x-axis <51.302198> speed <48.366211> *  currentSpeed / 100;
		turn rthigh to x-axis <9.434066> speed <32.178602> *  currentSpeed / 100;
		turn rleg to x-axis <10.791209> speed <472.127636> *  currentSpeed / 100;
		turn rfoot to x-axis <-10.335165> speed <321.720515> *  currentSpeed / 100;
		turn lleg to x-axis <0.000000> speed <69.600161> *  currentSpeed / 100;
		turn lfoot to x-axis <21.137363> speed <252.120354> *  currentSpeed / 100;
		turn luparm to x-axis <0.000000> speed <348.721703> *  currentSpeed / 100;
		turn lloarm to x-axis <0.000000> speed <160.893023> *  currentSpeed / 100;
		turn lhand to x-axis <0.000000> speed <193.137168> *  currentSpeed / 100;
		turn rloarm to x-axis <-40.945055> speed <531.110823> *  currentSpeed / 100;
		turn rhand to x-axis <143.115385> speed <440.145639> *  currentSpeed / 100;
		sleep animSpeed;

		move torso to y-axis [0.200000] speed [1.789157] *  currentSpeed / 100;
		move ruparm to z-axis [0.100000] speed [2.385542] *  currentSpeed / 100;
		turn pelvis to z-axis <2.236264> speed <37.290485> *  currentSpeed / 100;
		turn torso to z-axis <-4.934066> speed <42.926650> *  currentSpeed / 100;
		turn lthigh to x-axis <0.890110> speed <601.300809> *  currentSpeed / 100;
		turn rthigh to x-axis <20.692308> speed <134.285055> *  currentSpeed / 100;
		turn rleg to x-axis <3.582418> speed <85.984375> *  currentSpeed / 100;
		turn rfoot to x-axis <-14.835165> speed <53.674699> *  currentSpeed / 100;
		turn lleg to x-axis <55.802198> speed <665.592482> *  currentSpeed / 100;
		turn lfoot to x-axis <0.890110> speed <241.503379> *  currentSpeed / 100;
		turn ruparm to x-axis <-17.978022> speed <300.093344> *  currentSpeed / 100;
		turn luparm to x-axis <17.978022> speed <214.436648> *  currentSpeed / 100;
		turn lloarm to x-axis <-3.137363> speed <37.421559> *  currentSpeed / 100;
		turn lhand to x-axis <-5.390110> speed <64.291673> *  currentSpeed / 100;
		sleep animSpeed;

		move torso to y-axis [0.000000] speed [2.385542] *  currentSpeed / 100;
		move ruparm to y-axis [-0.150000] speed [8.945783] *  currentSpeed / 100;
		move ruparm to z-axis [0.200000] speed [1.192771] *  currentSpeed / 100;
		turn pelvis to z-axis <3.582418> speed <16.056536> *  currentSpeed / 100;
		turn torso to z-axis <-4.489011> speed <5.308487> *  currentSpeed / 100;
		turn lthigh to x-axis <-16.192308> speed <203.754142> *  currentSpeed / 100;
		turn rthigh to x-axis <35.538462> speed <177.080632> *  currentSpeed / 100;
		turn rfoot to x-axis <-8.989011> speed <69.731234> *  currentSpeed / 100;
		turn lleg to x-axis <54.901099> speed <10.748048> *  currentSpeed / 100;
		turn lfoot to x-axis <-21.593407> speed <268.176890> *  currentSpeed / 100;
		turn ruparm to x-axis <-48.593407> speed <365.171460> *  currentSpeed / 100;
		turn luparm to x-axis <20.225275> speed <26.804584> *  currentSpeed / 100;
		turn lloarm to x-axis <8.989011> speed <144.639883> *  currentSpeed / 100;
		turn lhand to x-axis <-17.093407> speed <139.593543> *  currentSpeed / 100;
		turn rloarm to x-axis <14.390110> speed <660.021848> *  currentSpeed / 100;
		turn rhand to x-axis <46.346154> speed <1154.235406> *  currentSpeed / 100;
		sleep animSpeed;

		move torso to y-axis [0.150000] speed [1.789157] *  currentSpeed / 100;
		move ruparm to z-axis [0.200000] now;
		move luparm to y-axis [0.600000] speed [7.156627] *  currentSpeed / 100;
		turn pelvis to z-axis <2.236264> speed <16.056536> *  currentSpeed / 100;
		turn torso to z-axis <-2.236264> speed <26.870115> *  currentSpeed / 100;
		turn lthigh to x-axis <0.000000> speed <193.137168> *  currentSpeed / 100;
		turn rthigh to x-axis <46.346154> speed <128.911025> *  currentSpeed / 100;
		turn rfoot to x-axis <5.835165> speed <176.818485> *  currentSpeed / 100;
		turn lleg to x-axis <0.000000> speed <654.844434> *  currentSpeed / 100;
		turn lfoot to x-axis <0.000000> speed <257.559915> *  currentSpeed / 100;
		turn ruparm to x-axis <-33.758242> speed <176.949558> *  currentSpeed / 100;
		turn luparm to x-axis <11.247253> speed <107.087250> *  currentSpeed / 100;
		turn lloarm to x-axis <0.000000> speed <107.218324> *  currentSpeed / 100;
		turn lhand to x-axis <116.560440> speed <1594.184440> *  currentSpeed / 100;
		turn rhand to x-axis <20.225275> speed <311.562292> *  currentSpeed / 100;
		sleep animSpeed;

		move torso to y-axis [0.350000] speed [2.385542] *  currentSpeed / 100;
		move ruparm to z-axis [0.100000] speed [1.192771] *  currentSpeed / 100;
		move luparm to y-axis [0.600000] now;
		turn pelvis to z-axis <0.890110> speed <16.056536> *  currentSpeed / 100;
		turn torso to z-axis <1.335165> speed <42.598972> *  currentSpeed / 100;
		turn lthigh to x-axis <11.247253> speed <134.153982> *  currentSpeed / 100;
		turn rthigh to x-axis <60.302198> speed <166.463657> *  currentSpeed / 100;
		turn rfoot to x-axis <10.791209> speed <59.114260> *  currentSpeed / 100;
		turn lleg to x-axis <13.038462> speed <155.519005> *  currentSpeed / 100;
		turn lfoot to x-axis <-14.835165> speed <176.949558> *  currentSpeed / 100;
		turn ruparm to x-axis <5.390110> speed <466.950223> *  currentSpeed / 100;
		turn luparm to x-axis <-8.989011> speed <241.372306> *  currentSpeed / 100;
		turn lloarm to x-axis <-28.791209> speed <343.413216> *  currentSpeed / 100;
		turn lhand to x-axis <148.967033> speed <386.536471> *  currentSpeed / 100;
		turn rloarm to x-axis <-5.835165> speed <241.241232> *  currentSpeed / 100;
		turn rhand to x-axis <6.736264> speed <160.893023> *  currentSpeed / 100;
		sleep animSpeed;

		move torso to y-axis [0.200000] speed [1.789157] *  currentSpeed / 100;
		move ruparm to z-axis [0.000000] speed [1.192771] *  currentSpeed / 100;
		move luparm to y-axis [0.000000] speed [7.156627] *  currentSpeed / 100;
		turn pelvis to z-axis <-1.780220> speed <31.850924> *  currentSpeed / 100;
		turn torso to z-axis <5.390110> speed <48.366211> *  currentSpeed / 100;
		turn lthigh to x-axis <36.890110> speed <305.860583> *  currentSpeed / 100;
		turn rthigh to x-axis <26.989011> speed <397.350062> *  currentSpeed / 100;
		turn rleg to x-axis <39.148352> speed <424.220177> *  currentSpeed / 100;
		turn lleg to x-axis <-0.434066> speed <160.696418> *  currentSpeed / 100;
		turn lfoot to x-axis <-17.093407> speed <26.935658> *  currentSpeed / 100;
		turn luparm to x-axis <-21.137363> speed <144.902030> *  currentSpeed / 100;
		turn lloarm to x-axis <-40.489011> speed <139.528000> *  currentSpeed / 100;
		turn lhand to x-axis <90.016484> speed <703.145103> *  currentSpeed / 100;
		turn rloarm to x-axis <4.038462> speed <117.769768> *  currentSpeed / 100;
		turn rhand to x-axis <-9.890110> speed <198.314581> *  currentSpeed / 100;
		sleep animSpeed;
	}
}

UnitSpeed()
{
	while(TRUE)
	{
		currentSpeed = (get CURRENT_SPEED)*100/moveSpeed;
		if (currentSpeed<20) currentSpeed=20;
		animSpeed = 11000 / currentSpeed;
		sleep 142;
	}
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	start-script UnitSpeed();
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from torso;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			Static_Var_2 = 0;
			currentstate = 1;
		}
		else
		{
			Static_Var_2 = 1;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	hide flash;
	dont-cache flash;
	restore_delay = 3000;
	Static_Var_2 = 0;
	gun_2 = gauss;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	moveSpeed = get MAX_SPEED;
	animSpeed = 110;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

Reload()
{
	sleep 2450;
	gun_2 = gauss;
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	start-script walk();
}

StopMoving()
{
	signal SIG_MOVE;
}

SweetSpot(piecenum)
{
	piecenum = gauss;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	turn turret to y-axis <0.000000> speed <90.000000>;
	turn gauss to x-axis <0.000000> speed <50.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn gauss around x-axis;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( Static_Var_2 == 1 OR gun_2 == 1 )
	{
		sleep 100;
	}
	turn turret to y-axis heading speed <150.000000>;
	turn gauss to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn gauss around x-axis;
	while( Static_Var_2 == 1 OR gun_2 == 1 )
	{
		sleep 100;
	}
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	while( Static_Var_2 == 0 OR gun_2 == 1 )
	{
		sleep 100;
	}
	turn turret to y-axis heading speed <150.000000>;
	turn gauss to x-axis <0.000000> - pitch speed <50.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn gauss around x-axis;
	while( Static_Var_2 == 0 OR gun_2 == 1 )
	{
		sleep 100;
	}
	start-script RestoreAfterDelay();
	return (1);
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

AimFromSecondary(piecenum)
{
	piecenum = turret;
}

FirePrimary()
{
	gun_2 = turret;
	show flash;
	sleep 150;
	hide flash;
	start-script Reload();
}

FireSecondary()
{
	gun_2 = turret;
	show flash;
	sleep 150;
	hide flash;
	start-script Reload();
}

QueryPrimary(piecenum)
{
	piecenum = flash;
}

QuerySecondary(piecenum)
{
	piecenum = flash;
}

Killed(severity, corpsetype)
{
	hide flash;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode flash type BITMAPONLY | BITMAP1;
		explode gauss type BITMAPONLY | BITMAP2;
		explode ground type BITMAPONLY | BITMAP3;
		explode lfoot type BITMAPONLY | BITMAP4;
		explode lhand type BITMAPONLY | BITMAP5;
		explode lleg type BITMAPONLY | BITMAP1;
		explode lloarm type BITMAPONLY | BITMAP2;
		explode lthigh type BITMAPONLY | BITMAP3;
		explode luparm type BITMAPONLY | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP5;
		explode rfoot type BITMAPONLY | BITMAP1;
		explode rhand type BITMAPONLY | BITMAP2;
		explode rleg type BITMAPONLY | BITMAP3;
		explode rloarm type BITMAPONLY | BITMAP4;
		explode rthigh type BITMAPONLY | BITMAP5;
		explode ruparm type BITMAPONLY | BITMAP1;
		explode torso type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode flash type FALL | BITMAP1;
		explode gauss type SHATTER | BITMAP2;
		explode ground type FALL | BITMAP3;
		explode lfoot type FALL | BITMAP4;
		explode lhand type FALL | BITMAP5;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lloarm type FALL | BITMAP2;
		explode lthigh type FALL | BITMAP3;
		explode luparm type FALL | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP5;
		explode rfoot type FALL | BITMAP1;
		explode rhand type FALL | BITMAP2;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rloarm type FALL | BITMAP4;
		explode rthigh type FALL | BITMAP5;
		explode ruparm type FALL | BITMAP1;
		explode torso type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode flash type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode gauss type SHATTER | BITMAP2;
		explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode lhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode pelvis type BITMAPONLY | BITMAP5;
		explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode rhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode torso type BITMAPONLY | BITMAP2;
		explode turret type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode flash type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode gauss type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode ground type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode lfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode lhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode lleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode lloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode lthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode luparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode pelvis type BITMAPONLY | BITMAP5;
	explode rfoot type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode rhand type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode rleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode rloarm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode rthigh type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode ruparm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode torso type BITMAPONLY | BITMAP2;
	explode turret type BITMAPONLY | BITMAP3;
}
