#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, blink, beama, beamb, turreta, turretb, gunb, guna,
       explodpt1, explodpt2, slip;

static-var  Static_Var_1, unitviewer, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_ACTIVATE			2


activatescr()
{
	if( TRUE )
	{
		move turreta to y-axis [0.00000] now;
		move turreta to y-axis [17.22499] speed [12.50000];
		move turretb to y-axis [0.00000] now;
		move turretb to y-axis [17.34999] speed [12.50000];
		sleep 1177;
	}
	if( TRUE )
	{
		move turreta to y-axis [17.34999] speed [0.00000];
		move turretb to y-axis [17.37500] speed [0.00000];
		turn turreta to y-axis <-33.00549> speed <47.00000>;
		turn turretb to y-axis <-43.00549> speed <59.00000>;
		turn gunb to z-axis <-71.01648> speed <99.00000>;
		turn gunb to x-axis <-28.00549> speed <39.00000>;
		turn guna to z-axis <66.01099> speed <92.00000>;
		turn guna to x-axis <28.00549> speed <39.00000>;
		sleep 722;
	}
	sleep 11;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		move turreta to y-axis [17.34999] now;
		move turreta to y-axis [17.22499] speed [0.00000];
		move turretb to y-axis [17.37500] now;
		move turretb to y-axis [17.34999] speed [0.00000];
		turn turreta to y-axis <-33.97802> now;
		turn turreta to y-axis <0.00000> speed <50.00000>;
		turn turretb to y-axis <-43.00549> now;
		turn turretb to y-axis <0.00000> speed <63.00000>;
		turn gunb to z-axis <-71.69231> now;
		turn gunb to z-axis <0.00000> speed <106.00000>;
		turn gunb to x-axis <-28.66484> now;
		turn gunb to x-axis <0.00000> speed <42.00000>;
		turn guna to z-axis <66.91209> now;
		turn guna to z-axis <0.00000> speed <98.00000>;
		turn guna to x-axis <28.66484> now;
		turn guna to x-axis <0.00000> speed <42.00000>;
		sleep 676;
	}
	if( TRUE )
	{
		move turreta to y-axis [0.00000] speed [12.50000];
		move turretb to y-axis [0.00000] speed [12.50000];
		sleep 1222;
	}
	sleep 7;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

OpenYard()
{
	set YARD_OPEN to 1;
	while( !get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 1;
	}
	set BUGGER_OFF to 0;
	return (0);
}

CloseYard()
{
	set YARD_OPEN to 0;
	while( get YARD_OPEN )
	{
		set BUGGER_OFF to 1;
		sleep 1500;
		set YARD_OPEN to 0;
	}
	set BUGGER_OFF to 0;
	return (0);
}

Go()
{
	dont-cache beama;
	dont-cache beamb;
	dont-cache guna;
	dont-cache gunb;
	dont-cache turreta;
	dont-cache turretb;
	call-script activatescr();
	call-script OpenYard();
	set INBUILDSTANCE to 1;
	return (0);
}

Stop()
{
	set INBUILDSTANCE to 0;
	call-script CloseYard();
	call-script deactivatescr();
	cache beama;
	cache beamb;
	cache guna;
	cache gunb;
	cache turreta;
	cache turretb;
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

Create()
{
	dont-shade blink;
	dont-cache blink;
	dont-cache beama;
	dont-shade beamb;
	dont-shade guna;
	dont-shade gunb;
	dont-shade turreta;
	dont-shade turretb;
	unitviewer = FALSE;
	Static_Var_1 = 0;
	call-script InitState();
	start-script SmokeUnit();
	turn slip to y-axis <90.02198> now;
	return (0);
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_1 == 0 )
	{
		piecenum = beama;
		Static_Var_1 = 1;
		return (0);
	}
	if( Static_Var_1 == 1 )
	{
		piecenum = beamb;
		Static_Var_1 = 0;
	}
	return (0);
}

Demo()
{
	unitviewer = TRUE;
	return (0);
}

Activate()
{
	signal SIG_ACTIVATE;
	start-script RequestState(0);
	return (0);
}

Deactivate()
{
	signal SIG_ACTIVATE;
	set-signal-mask SIG_ACTIVATE;
	if( !unitviewer )
	{
		sleep 5000;
	}
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

QueryBuildInfo(piecenum)
{
	piecenum = slip;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = blink;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode beama type BITMAPONLY | BITMAP2;
		explode beamb type BITMAPONLY | BITMAP3;
		explode blink type BITMAPONLY | BITMAP4;
		explode guna type BITMAPONLY | BITMAP5;
		explode gunb type BITMAPONLY | BITMAP1;
		explode turreta type BITMAPONLY | BITMAP2;
		explode turretb type BITMAPONLY | BITMAP3;
		explode explodpt1 type BITMAPONLY | BITMAP2;
		explode explodpt2 type BITMAPONLY | BITMAP3;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type SHATTER | BITMAP1;
		explode beama type FALL | BITMAP2;
		explode beamb type FALL | BITMAP3;
		explode blink type FALL | BITMAP4;
		explode guna type FALL | BITMAP5;
		explode gunb type FALL | BITMAP1;
		explode turreta type FALL | BITMAP2;
		explode turretb type FALL | BITMAP3;
		explode explodpt1 type FALL | BITMAP2;
		explode explodpt2 type FALL | BITMAP3;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type SHATTER | BITMAP1;
		explode beama type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode beamb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode blink type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode guna type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode gunb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode turreta type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode turretb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode explodpt1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode explodpt2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode beama type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode beamb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode blink type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode guna type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode gunb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode turreta type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode turretb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode explodpt1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
	explode explodpt2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	return (corpsetype);
}
