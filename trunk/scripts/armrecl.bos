#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, flare, exhaust, door1, door2, boom, neck, gun;

static-var  Static_Var_1, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_MOVE			2


activatescr()
{
	if( TRUE )
	{
		move exhaust to y-axis [-0.403192] now;
		move exhaust to z-axis [3.775989] now;
		move flare to y-axis [0.172803] now;
		move flare to z-axis [-1.375995] now;
		turn door1 to z-axis <0.000000> now;
		turn door1 to z-axis <-227.868132> speed <209.241758>;
		turn door2 to z-axis <0.000000> now;
		turn door2 to z-axis <227.516484> speed <208.917582>;
		sleep 300;
	}
	if( TRUE )
	{
		turn boom to x-axis <39.384615> speed <42.994505>;
		turn neck to x-axis <-39.027473> speed <42.609890>;
		sleep 150;
	}
	sleep 16;
}

deactivatescr()
{
	if( TRUE )
	{
		move exhaust to y-axis [-0.403192] now;
		move exhaust to z-axis [3.775989] now;
		move flare to y-axis [0.172803] now;
		move flare to z-axis [-1.375995] now;
		turn boom to x-axis <39.384615> now;
		turn boom to x-axis <0.000000> speed <51.818681>;
		turn door1 to z-axis <-227.868132> now;
		turn door2 to z-axis <227.516484> now;
		turn neck to x-axis <-39.027473> now;
		turn neck to x-axis <0.000000> speed <51.357143>;
		sleep 400;
	}
	if( TRUE )
	{
		turn door1 to z-axis <0.000000> speed <185.258242>;
		turn door2 to z-axis <0.000000> speed <184.972527>;
		sleep 600;
	}
	sleep 12;
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		emit-sfx 256 | 3 from exhaust;
		sleep 250;
	}
}

StopMoving()
{
	signal SIG_MOVE;
}

Go()
{
	call-script activatescr();
	turn neck to y-axis Static_Var_1 speed <240.038462>;
	wait-for-turn neck around y-axis;
	set INBUILDSTANCE to 1;
}

Stop()
{
	set INBUILDSTANCE to 0;
	turn neck to y-axis <0.000000> speed <240.038462>;
	wait-for-turn neck around y-axis;
	call-script deactivatescr();
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	Static_Var_1 = 0;
	call-script InitState();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = flare;
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode boom type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode exhaust type BITMAPONLY | BITMAP5;
		explode flare type BITMAPONLY | BITMAP1;
		explode gun type BITMAPONLY | BITMAP2;
		explode neck type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode boom type FALL | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode exhaust type FALL | BITMAP5;
		explode flare type FALL | BITMAP1;
		explode gun type FALL | BITMAP2;
		explode neck type FALL | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode boom type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP3;
		explode door2 type BITMAPONLY | BITMAP4;
		explode exhaust type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode flare type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode gun type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode neck type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode boom type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type BITMAPONLY | BITMAP3;
	explode door2 type BITMAPONLY | BITMAP4;
	explode exhaust type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode flare type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode gun type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode neck type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
}
