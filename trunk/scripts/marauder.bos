#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  lleg, rleg, llowleg, rlowleg, lfoot, rfoot, pivot, misflare,
       body, rbarrel, lbarrel, flarea, flareb, mispack, aimpt, guna,
       gunb, misa;

static-var  bMoving, bAiming, Static_Var_3, restore_delay, gun_1;

// Signal definitions
#define SIG_AIM				2
#define SIG_AIM_2			4
#define SIG_AIM_3			8

walk()
{
	if( TRUE )
	{
		turn lleg to x-axis <50.010989> speed <188.000000>;
		turn rleg to x-axis <-70.016484> speed <184.000000>;
		turn llowleg to x-axis <40.005495> speed <188.000000>;
		turn rlowleg to x-axis <70.016484> speed <184.000000>;
		turn lfoot to x-axis <-80.016484> speed <258.000000>;
		move pivot to y-axis [1.4000000] speed [10.000000];
		sleep 464;
	}
	if( TRUE )
	{
		turn lleg to x-axis <0.000000> speed <184.000000>;
		turn rleg to x-axis <0.000000> speed <188.000000>;
		turn llowleg to x-axis <0.000000> speed <184.000000>;
		turn rlowleg to x-axis <0.000000> speed <188.000000>;
		turn lfoot to x-axis <0.000000> speed <214.000000>;
		move pivot to y-axis [0.8000000] speed [10.000000];
		sleep 364;
	}
	if( TRUE )
	{
		turn lleg to x-axis <-70.016484> speed <184.000000>;
		turn rleg to x-axis <50.010989> speed <188.000000>;
		turn llowleg to x-axis <70.016484> speed <188.000000>;
		turn rlowleg to x-axis <40.005495> speed <188.000000>;
		turn rfoot to x-axis <-80.016484> speed <254.000000>;
		move pivot to y-axis [1.400000] speed [10.000000];
		sleep 464;
	}
	if( TRUE )
	{
		turn lleg to x-axis <0.000000> speed <184.000000>;
		turn rleg to x-axis <0.000000> speed <188.000000>;
		turn llowleg to x-axis <0.000000> speed <184.000000>;
		turn rlowleg to x-axis <0.000000> speed <188.000000>;
		turn rfoot to x-axis <0.000000> speed <214.000000>;
		move pivot to y-axis [0.80000] speed [10.000000];
		sleep 364;
	}
	move pivot to y-axis [0.000000] speed [10.000000];
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

walklegs()
{
	if( TRUE )
	{
		turn lleg to x-axis <50.010989> speed <188.000000>;
		turn rleg to x-axis <-70.016484> speed <184.000000>;
		turn llowleg to x-axis <40.005495> speed <188.000000>;
		turn rlowleg to x-axis <70.016484> speed <184.000000>;
		turn lfoot to x-axis <-80.016484> speed <258.000000>;
		sleep 464;
	}
	if( TRUE )
	{
		turn lleg to x-axis <0.000000> speed <184.000000>;
		turn rleg to x-axis <0.000000> speed <188.000000>;
		turn llowleg to x-axis <0.000000> speed <184.000000>;
		turn rlowleg to x-axis <0.000000> speed <188.000000>;
		turn lfoot to x-axis <0.000000> speed <214.000000>;
		sleep 364;
	}
	if( TRUE )
	{
		turn lleg to x-axis <-70.016484> speed <184.000000>;
		turn rleg to x-axis <50.010989> speed <188.000000>;
		turn llowleg to x-axis <70.016484> speed <188.000000>;
		turn rlowleg to x-axis <40.005495> speed <188.000000>;
		turn rfoot to x-axis <-80.016484> speed <254.000000>;
		sleep 464;
	}
	if( TRUE )
	{
		turn lleg to x-axis <0.000000> speed <184.000000>;
		turn rleg to x-axis <0.000000> speed <188.000000>;
		turn llowleg to x-axis <0.000000> speed <184.000000>;
		turn rlowleg to x-axis <0.000000> speed <188.000000>;
		turn rfoot to x-axis <0.000000> speed <214.000000>;
		sleep 364;
	}
	
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from aimpt;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

MotionControl(moving, aiming, justmoved)
{
	justmoved = TRUE;
	while( TRUE )
	{
		moving = bMoving;
		aiming = bAiming;
		if( moving )
		{
			if( aiming )
			{
				Static_Var_3 = 1;
				call-script walklegs();
			}
			if( !aiming )
			{
				Static_Var_3 = 0;
				call-script walk();
			}
			justmoved = TRUE;
		}
		if( !moving )
		{
			Static_Var_3 = 1;
			if( justmoved )
			{
				turn lleg to x-axis <0.000000> speed <94.000000>;
				turn rleg to x-axis <0.000000> speed <94.000000>;
				justmoved = FALSE;
			}
			sleep 100;
		}
	}
}

Create()
{
	bMoving = FALSE;
	bAiming = FALSE;
	Static_Var_3 = 1;
	gun_1 = rleg;
	hide misflare;
	hide flarea;
	hide flareb;
	dont-cache lleg;
	dont-cache rleg;
	dont-cache llowleg;
	dont-cache rlowleg;
	dont-shade lleg;
	dont-shade rleg;
	dont-shade llowleg;
	dont-shade rlowleg;
	dont-shade body;
	restore_delay = 3000;
	start-script MotionControl();
	start-script SmokeUnit();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	turn body to y-axis <0.000000> speed <120.000000>;
	turn mispack to y-axis <0.000000> speed <120.000000>;
	bAiming = FALSE;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	bAiming = TRUE;
	while( !Static_Var_3 )
	{
		sleep 250;
	}
	turn body to y-axis heading speed <140.000000>;
	wait-for-turn body around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimSecondary(heading, pitch)
{
	signal SIG_AIM_2;
	set-signal-mask SIG_AIM_2;
	turn mispack to y-axis heading speed <180.000000>;
	wait-for-turn mispack around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

AimTertiary(heading, pitch)
{
	signal SIG_AIM_3;
	set-signal-mask SIG_AIM_3;
	turn mispack to y-axis heading speed <180.000000>;
	wait-for-turn mispack around y-axis;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 1 )
	{
		move lbarrel to z-axis [-2.000000] speed [30.000000];
		show flareb;
		sleep 150;
		hide flareb;
		move lbarrel to z-axis [0.000000] speed [10.000000];
		gun_1 = llowleg;
		return (0);
	}
	if( gun_1 == 2 )
	{
		move rbarrel to z-axis [-2.000000] speed [30.000000];
		show flarea;
		sleep 150;
		hide flarea;
		move rbarrel to z-axis [0.000000] speed [10.000000];
		gun_1 = rleg;
		return (0);
	}
}

FireSecondary()
{
	show misflare;
	sleep 150;
	hide misflare;
}

FireTertiary()
{
	show misflare;
	sleep 150;
	hide misflare;
}

AimFromPrimary(piecenum)
{
	piecenum = aimpt;
}

AimFromSecondary(piecenum)
{
	piecenum = aimpt;
}

AimFromTertiary(piecenum)
{
	piecenum = aimpt;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = guna;
	}
	if( gun_1 == 2 )
	{
		piecenum = gunb;
	}
}

QuerySecondary(piecenum)
{
	piecenum = misa;
}

QueryTertiary(piecenum)
{
	piecenum = misa;
}

SweetSpot(piecenum)
{
	piecenum = aimpt;
}

Killed(severity, corpsetype)
{
	hide misflare;
	hide flarea;
	hide flareb;
	if( severity <= 25 )
	{
		corpsetype = 0;
		explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode pivot type BITMAPONLY | BITMAP1;
		explode mispack type BITMAPONLY | BITMAP2;
		explode misa type BITMAPONLY | BITMAP2;
		explode guna type BITMAPONLY | BITMAP3;
		explode gunb type BITMAPONLY | BITMAP1;
		explode aimpt type BITMAPONLY | BITMAP1;
		explode rbarrel type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode lbarrel type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode llowleg type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode rlowleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode misflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flarea type BITMAPONLY | BITMAP2;
		explode flareb type BITMAPONLY | BITMAP3;
		explode lleg type BITMAPONLY | BITMAP2;
		explode rleg type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 1;
		explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode pivot type BITMAPONLY | BITMAP1;
		explode mispack type BITMAPONLY | BITMAP2;
		explode misa type BITMAPONLY | BITMAP2;
		explode guna type BITMAPONLY | BITMAP3;
		explode gunb type BITMAPONLY | BITMAP1;
		explode aimpt type BITMAPONLY | BITMAP1;
		explode rbarrel type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode lbarrel type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode llowleg type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode rlowleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode misflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flarea type BITMAPONLY | BITMAP2;
		explode flareb type BITMAPONLY | BITMAP3;
		explode lleg type BITMAPONLY | BITMAP2;
		explode rleg type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 2;
		explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode pivot type BITMAPONLY | BITMAP1;
		explode mispack type BITMAPONLY | BITMAP2;
		explode misa type BITMAPONLY | BITMAP2;
		explode guna type BITMAPONLY | BITMAP3;
		explode gunb type BITMAPONLY | BITMAP1;
		explode aimpt type BITMAPONLY | BITMAP1;
		explode rbarrel type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode lbarrel type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		explode llowleg type SHATTER | EXPLODE_ON_HIT | BITMAP1;
		explode rlowleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode misflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flarea type BITMAPONLY | BITMAP2;
		explode flareb type BITMAPONLY | BITMAP3;
		explode lleg type BITMAPONLY | BITMAP2;
		explode rleg type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode body type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode pivot type BITMAPONLY | BITMAP1;
	explode mispack type BITMAPONLY | BITMAP2;
	explode misa type BITMAPONLY | BITMAP2;
	explode guna type BITMAPONLY | BITMAP3;
	explode gunb type BITMAPONLY | BITMAP1;
	explode aimpt type BITMAPONLY | BITMAP1;
	explode rbarrel type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode lbarrel type SHATTER | EXPLODE_ON_HIT | BITMAP4;
	explode llowleg type SHATTER | EXPLODE_ON_HIT | BITMAP1;
	explode rlowleg type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode misflare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode flarea type BITMAPONLY | BITMAP2;
	explode flareb type BITMAPONLY | BITMAP3;
	explode lleg type BITMAPONLY | BITMAP2;
	explode rleg type BITMAPONLY | BITMAP3;
}
