#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare, base, box, wake1, wake2, wake3, wake4, wake5,
       wake6, wake7, wake8;

static-var  Static_Var_1, Static_Var_2, restore_delay, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2
#define SIG_MOVE			4


activatescr()
{
	if( TRUE )
	{
		turn base to x-axis <0.00000> now;
		turn base to x-axis <1.00000> speed <3.00000>;
		turn box to x-axis <0.00000> now;
		turn box to x-axis <-20.00000> speed <58.00000>;
		sleep 352;
	}
	if( TRUE )
	{
		turn base to x-axis <0.00000> speed <3.00000>;
		turn box to x-axis <-70.01648> speed <141.00000>;
		sleep 354;
	}
	if( TRUE )
	{
		turn base to x-axis <-3.00000> speed <9.00000>;
		turn box to x-axis <-93.02198> speed <64.00000>;
		sleep 353;
	}
	if( TRUE )
	{
		turn base to x-axis <0.00000> speed <9.00000>;
		turn box to x-axis <-90.02198> speed <8.00000>;
		sleep 355;
	}
	sleep 16;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

deactivatescr()
{
	if( TRUE )
	{
		turn base to x-axis <0.00000> now;
		turn base to x-axis <-3.00000> speed <12.00000>;
		turn box to x-axis <-90.02198> now;
		turn box to x-axis <-93.02198> speed <12.00000>;
		sleep 262;
	}
	if( TRUE )
	{
		turn base to x-axis <0.00000> speed <11.00000>;
		turn box to x-axis <-70.01648> speed <86.00000>;
		sleep 266;
	}
	if( TRUE )
	{
		turn base to x-axis <1.00000> speed <4.00000>;
		turn box to x-axis <-20.00000> speed <189.00000>;
		sleep 264;
	}
	if( TRUE )
	{
		turn base to x-axis <0.00000> speed <4.00000>;
		turn box to x-axis <0.00000> speed <76.00000>;
		sleep 267;
	}
	sleep 13;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

HitByWeapon(anglex, anglez)
{
	turn base to z-axis anglez speed <105.00000>;
	turn base to x-axis anglex speed <105.00000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.00000> speed <30.00000>;
	turn base to x-axis <0.00000> speed <30.00000>;
	return (0);
}

Go()
{
	if( !Static_Var_1 )
	{
		call-script activatescr();
	}
	Static_Var_1 = 1;
	return (0);
}

Stop()
{
	Static_Var_1 = 0;
	call-script deactivatescr();
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

StartMoving()
{
	signal SIG_MOVE;
	set-signal-mask SIG_MOVE;
	while( TRUE )
	{
		if( Static_Var_2 == 1 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		if( Static_Var_2 == 2 )
		{
			emit-sfx 5 from wake1;
			emit-sfx 5 from wake2;
			emit-sfx 5 from wake3;
			emit-sfx 5 from wake4;
			emit-sfx 5 from wake5;
			emit-sfx 5 from wake6;
			emit-sfx 5 from wake7;
			emit-sfx 5 from wake8;
			emit-sfx 3 from wake1;
			emit-sfx 3 from wake2;
			emit-sfx 3 from wake3;
			emit-sfx 3 from wake4;
			emit-sfx 3 from wake5;
			emit-sfx 3 from wake6;
			emit-sfx 3 from wake7;
			emit-sfx 3 from wake8;
		}
		sleep 300;
	}
	return (0);
}

StopMoving()
{
	sleep 150;
	return (0);
}

setSFXoccupy(state)
{
	Static_Var_2 = state;
	return (0);
}

Create()
{
	Static_Var_1 = 0;
	restore_delay = 3000;
	call-script InitState();
	start-script SmokeUnit();
	return (0);
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
	return (0);
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 200;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	sleep 150;
	return (0);
}

AimFromPrimary(piecenum)
{
	piecenum = box;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = flare;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( Static_Var_2 == 1 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode base type NOHEATCLOUD;
			explode flare type FALL | BITMAP2 | NOHEATCLOUD;
			explode box type SHATTER | BITMAP3 | NOHEATCLOUD;
			return (corpsetype);
		}
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode box type SHATTER | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( Static_Var_2 == 2 )
	{
		if( severity <= 50 )
		{
			corpsetype = 2;
			explode base type NOHEATCLOUD;
			explode flare type FALL | BITMAP2 | NOHEATCLOUD;
			explode box type SHATTER | BITMAP3 | NOHEATCLOUD;
			return (corpsetype);
		}
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode box type SHATTER | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type NOHEATCLOUD;
		explode flare type NOHEATCLOUD;
		explode box type NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type NOHEATCLOUD;
		explode flare type FALL | BITMAP2 | NOHEATCLOUD;
		explode box type SHATTER | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type NOHEATCLOUD;
		explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
		explode box type SHATTER | BITMAP3 | NOHEATCLOUD;
		return (corpsetype);
	}
	corpsetype = 3;
	explode base type NOHEATCLOUD;
	explode flare type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2 | NOHEATCLOUD;
	explode box type SHATTER | EXPLODE_ON_HIT | BITMAP3 | NOHEATCLOUD;
	return (corpsetype);
}
