#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, door1, door2, door3, door4, turret, launcher, firep1,
       firep2;

static-var  Static_Var_1, Static_Var_2, restore_delay, Static_Var_4, statechg_DesiredState,
            statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


Activatescr()
{
	move door1 to y-axis [0.000000] now;
	move door1 to y-axis [-3.000000] speed [16.000000];
	move door2 to y-axis [0.000000] now;
	move door2 to y-axis [-3.000000] speed [16.000000];
	move door3 to y-axis [0.000000] now;
	move door3 to y-axis [-3.000000] speed [16.000000];
	move door4 to y-axis [0.000000] now;
	move door4 to y-axis [-3.000000] speed [16.000000];
	move turret to y-axis [0.000000] speed [50.000000];
	turn door1 to x-axis <90.016484> now;
	turn door1 to x-axis <0.000000> speed <450.000000>;
	turn door2 to z-axis <-90.016484> now;
	turn door2 to z-axis <0.000000> speed <450.000000>;
	turn door3 to x-axis <-90.016484> now;
	turn door3 to x-axis <0.000000> speed <450.000000>;
	turn door4 to z-axis <90.016484> now;
	turn door4 to z-axis <0.000000> speed <450.000000>;
	move turret to y-axis [3.000000] speed [30.000000];
	sleep 200;
}

Deactivatescr()
{
	move door1 to y-axis [0.000000] now;
	move door1 to y-axis [0.000000] speed [0.000000];
	move door2 to y-axis [0.000000] now;
	move door2 to y-axis [0.000000] speed [0.000000];
	move door3 to y-axis [0.000000] now;
	move door3 to y-axis [0.000000] speed [0.000000];
	move door4 to y-axis [0.000000] now;
	move door4 to y-axis [0.000000] speed [0.000000];
	turn launcher to x-axis <0.000000> speed <80.000000>;
	turn launcher to y-axis <0.000000> speed <100.000000>;
	wait-for-turn launcher around x-axis;
	wait-for-turn launcher around y-axis;
	move turret to y-axis [-15.000000] speed [22.000000];
	turn door1 to x-axis <90.016484> speed <225.000000>;
	turn door2 to z-axis <-90.016484> speed <225.000000>;
	turn door3 to x-axis <-90.016484> speed <225.000000>;
	turn door4 to z-axis <90.016484> speed <225.000000>;
	sleep 300;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	dont-cache door1;
	dont-cache door2;
	dont-cache door3;
	dont-cache door4;
	if( !Static_Var_1 )
	{
		call-script Activatescr();
	}
	Static_Var_1 = 1;
	set ARMORED to 0;
}

Stop()
{
	cache door1;
	cache door2;
	cache door3;
	cache door4;
	set ARMORED to 1;
	Static_Var_1 = 0;
	call-script Deactivatescr();
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script Stop();
			currentstate = 1;
		}
		else
		{
			call-script Go();
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

RestoreAfterDelay()
{
	sleep restore_delay;
	set-signal-mask 0;
	start-script RequestState(1);
}

Create()
{
	dont-shade base;
	dont-shade door1;
	dont-shade door2;
	dont-shade door3;
	dont-shade door4;
	Static_Var_1 = 1;
	Static_Var_2 = 0;
	Static_Var_4 = 1;
	restore_delay = 3000;
	move launcher to y-axis [2.0] now;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
	start-script RequestState(0);
	set-signal-mask SIG_AIM;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 1000;
	}
	start-script RestoreAfterDelay();
}

SetMaxReloadTime(Func_Var_1)
{
	restore_delay = Func_Var_1 * 2;
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 250;
	}
	turn turret to y-axis heading speed <900.000000>;
	turn launcher to x-axis <0.000000> - pitch speed <240.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn launcher around x-axis;
	start-script RestoreAfterDelay();
	return (1);
}

QueryPrimary(piecenum)
{
	piecenum = firep1 + Static_Var_2;
}

AimFromPrimary(piecenum)
{
	piecenum = turret;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Shot1()
{
	Static_Var_2 = !Static_Var_2;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode launcher type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP5;
		explode door2 type BITMAPONLY | BITMAP5;
		explode door3 type BITMAPONLY | BITMAP5;
		explode door4 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode launcher type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode door1 type BITMAPONLY | BITMAP5;
		explode door2 type BITMAPONLY | BITMAP5;
		explode door3 type BITMAPONLY | BITMAP5;
		explode door4 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		if( Static_Var_1 )
		{
			explode launcher type SHATTER | EXPLODE_ON_HIT | BITMAP4;
		}
		if( !Static_Var_1 )
		{
			explode launcher type BITMAPONLY | BITMAP5;
		}
		explode door1 type BITMAPONLY | BITMAP2;
		explode door2 type BITMAPONLY | BITMAP2;
		explode door3 type BITMAPONLY | BITMAP2;
		explode door4 type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 4;
	explode base type BITMAPONLY | BITMAP1;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode launcher type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode door1 type BITMAPONLY | BITMAP3;
	explode door2 type BITMAPONLY | BITMAP3;
	explode door3 type BITMAPONLY | BITMAP3;
	explode door4 type BITMAPONLY | BITMAP3;
}
