#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, emit, rupleg1, rupleg2, rupleg3, lupleg1, lupleg2, lupleg3,
       lleg3, lleg2, lleg1, rleg3, rleg2, rleg1, lbody, rbody,
       launcher, lffoot, lrfoot, rffoot, rrfoot;

static-var  Static_Var_1, Static_Var_2, bMoving, statechg_DesiredState, statechg_StateChanging;

// Signal definitions
#define SIG_AIM				2


walk()
{
	if( bMoving )
	{
		turn base to x-axis <2.098901> now;
		turn base to x-axis <0.000000> speed <14.000000>;
		turn base to y-axis <1.049451> now;
		turn base to y-axis <0.000000> speed <2.000000>;
		turn rupleg1 to y-axis <27.423077> now;
		turn rupleg1 to y-axis <7.000000> speed <132.000000>;
		turn rupleg2 to y-axis <-13.351648> now;
		turn rupleg2 to z-axis <0.000000> now;
		turn rupleg2 to z-axis <27.005495> speed <184.000000>;
		turn rupleg3 to y-axis <27.774725> now;
		turn rupleg3 to y-axis <7.000000> speed <136.000000>;
		turn lupleg1 to y-axis <21.434066> now;
		turn lupleg1 to z-axis <0.000000> now;
		turn lupleg1 to z-axis <-24.005495> speed <165.000000>;
		turn lupleg2 to y-axis <-14.412088> now;
		turn lupleg2 to y-axis <0.000000> speed <92.000000>;
		turn lupleg2 to z-axis <-7.379121> now;
		turn lupleg2 to z-axis <0.000000> speed <49.000000>;
		turn lupleg3 to y-axis <13.351648> now;
		turn lupleg3 to z-axis <0.000000> now;
		turn lupleg3 to z-axis <-45.010989> speed <304.000000>;
		turn lleg3 to z-axis <0.000000> now;
		turn lleg3 to z-axis <35.005495> speed <238.000000>;
		turn lleg2 to z-axis <0.000000> now;
		turn lleg2 to z-axis <-11.000000> speed <80.000000>;
		turn lleg1 to z-axis <0.000000> now;
		turn lleg1 to z-axis <11.000000> speed <77.000000>;
		turn rleg3 to z-axis <0.000000> now;
		turn rleg3 to z-axis <8.000000> speed <56.000000>;
		turn rleg2 to z-axis <0.000000> now;
		turn rleg2 to z-axis <-34.005495> speed <233.000000>;
		turn rleg1 to z-axis <0.000000> now;
		turn rleg1 to z-axis <9.000000> speed <63.000000>;
		sleep 149;
	}
	if( bMoving )
	{
		turn base to x-axis <-1.000000> speed <7.000000>;
		turn base to y-axis <0.000000> speed <7.000000>;
		turn rupleg1 to y-axis <-13.000000> speed <138.000000>;
		turn rupleg2 to y-axis <8.000000> speed <147.000000>;
		turn rupleg2 to z-axis <54.010989> speed <178.000000>;
		turn rupleg3 to y-axis <-14.000000> speed <145.000000>;
		turn lupleg1 to y-axis <1.000000> speed <133.000000>;
		turn lupleg1 to z-axis <-64.010989> speed <267.000000>;
		turn lupleg2 to y-axis <20.000000> speed <143.000000>;
		turn lupleg3 to y-axis <-10.000000> speed <157.000000>;
		turn lupleg3 to z-axis <-75.016484> speed <203.000000>;
		turn lleg3 to z-axis <63.010989> speed <187.000000>;
		turn lleg2 to z-axis <0.000000> speed <79.000000>;
		turn lleg1 to z-axis <66.010989> speed <365.000000>;
		turn rleg3 to z-axis <0.000000> speed <56.000000>;
		turn rleg2 to z-axis <-63.010989> speed <192.000000>;
		turn rleg1 to z-axis <0.000000> speed <63.000000>;
		sleep 150;
	}
	if( bMoving )
	{
		turn base to x-axis <-1.000000> speed <2.000000>;
		turn base to y-axis <-1.000000> speed <4.000000>;
		turn rupleg1 to y-axis <-20.000000> speed <46.000000>;
		turn rupleg2 to y-axis <17.000000> speed <55.000000>;
		turn rupleg2 to z-axis <8.000000> speed <302.000000>;
		turn rupleg3 to y-axis <-20.000000> speed <37.000000>;
		turn lupleg1 to y-axis <-10.000000> speed <79.000000>;
		turn lupleg1 to z-axis <-14.000000> speed <333.000000>;
		turn lupleg2 to y-axis <31.005495> speed <69.000000>;
		turn lupleg3 to y-axis <-15.000000> speed <37.000000>;
		turn lupleg3 to z-axis <-10.000000> speed <430.000000>;
		turn lleg3 to z-axis <17.000000> speed <302.000000>;
		turn lleg1 to z-axis <10.000000> speed <370.000000>;
		turn rleg2 to z-axis <-9.000000> speed <356.000000>;
		sleep 151;
	}
	if( bMoving )
	{
		turn base to x-axis <0.000000> speed <4.000000>;
		turn base to y-axis <0.000000> speed <7.000000>;
		turn rupleg1 to y-axis <-13.000000> speed <46.000000>;
		turn rupleg1 to z-axis <39.005495> speed <262.000000>;
		turn rupleg2 to y-axis <11.000000> speed <39.000000>;
		turn rupleg2 to z-axis <-2.000000> speed <70.000000>;
		turn rupleg3 to y-axis <-3.000000> speed <112.000000>;
		turn rupleg3 to z-axis <28.005495> speed <189.000000>;
		turn lupleg1 to y-axis <0.000000> speed <67.000000>;
		turn lupleg1 to z-axis <2.000000> speed <110.000000>;
		turn lupleg2 to y-axis <19.000000> speed <77.000000>;
		turn lupleg2 to z-axis <-40.005495> speed <271.000000>;
		turn lupleg3 to y-axis <-7.000000> speed <56.000000>;
		turn lupleg3 to z-axis <4.000000> speed <100.000000>;
		turn lleg3 to z-axis <0.000000> speed <119.000000>;
		turn lleg2 to z-axis <32.005495> speed <218.000000>;
		turn lleg1 to z-axis <0.000000> speed <70.000000>;
		turn rleg3 to z-axis <-17.000000> speed <117.000000>;
		turn rleg2 to z-axis <0.000000> speed <65.000000>;
		turn rleg1 to z-axis <-19.000000> speed <131.000000>;
		sleep 150;
	}
	if( bMoving )
	{
		turn base to x-axis <0.000000> speed <9.000000>;
		turn base to y-axis <1.000000> speed <9.000000>;
		turn rupleg1 to y-axis <8.000000> speed <140.000000>;
		turn rupleg1 to z-axis <52.010989> speed <89.000000>;
		turn rupleg2 to y-axis <0.000000> speed <75.000000>;
		turn rupleg3 to y-axis <15.000000> speed <126.000000>;
		turn rupleg3 to z-axis <48.010989> speed <131.000000>;
		turn lupleg1 to y-axis <9.000000> speed <65.000000>;
		turn lupleg2 to y-axis <3.000000> speed <105.000000>;
		turn lupleg2 to z-axis <-68.016484> speed <185.000000>;
		turn lupleg3 to y-axis <1.000000> speed <60.000000>;
		turn lleg3 to z-axis <-10.000000> speed <67.000000>;
		turn lleg2 to z-axis <64.010989> speed <210.000000>;
		turn lleg1 to z-axis <-5.000000> speed <39.000000>;
		turn rleg3 to z-axis <-52.010989> speed <232.000000>;
		turn rleg2 to z-axis <3.000000> speed <23.000000>;
		turn rleg1 to z-axis <-50.010989> speed <206.000000>;
		sleep 150;
	}
	if( bMoving )
	{
		turn base to x-axis <1.000000> speed <4.000000>;
		turn base to y-axis <1.000000> speed <2.000000>;
		turn rupleg1 to y-axis <16.000000> speed <56.000000>;
		turn rupleg1 to z-axis <39.005495> speed <89.000000>;
		turn rupleg2 to y-axis <-11.000000> speed <75.000000>;
		turn rupleg3 to y-axis <24.005495> speed <58.000000>;
		turn rupleg3 to z-axis <28.005495> speed <131.000000>;
		turn lupleg1 to y-axis <20.000000> speed <70.000000>;
		turn lupleg2 to y-axis <-3.000000> speed <51.000000>;
		turn lupleg2 to z-axis <-40.005495> speed <185.000000>;
		turn lupleg3 to y-axis <18.000000> speed <110.000000>;
		turn lleg3 to z-axis <0.000000> speed <67.000000>;
		turn lleg2 to z-axis <37.005495> speed <178.000000>;
		turn lleg1 to z-axis <0.000000> speed <39.000000>;
		turn rleg3 to z-axis <-17.000000> speed <232.000000>;
		turn rleg2 to z-axis <0.000000> speed <23.000000>;
		turn rleg1 to z-axis <-23.005495> speed <178.000000>;
		sleep 150;
	}
	sleep 150;
	return (0);
	// Build by COBBLER Ver4.0 Copyright @1998 DIGITAL CONCEPT SOFTWARE (MANU@inext.fr) / http://www.annihilationcenter.com/DCS/  
}

activatescr()
{
	if( TRUE )
	{
		move lbody to x-axis [-4.375000] speed [20.000000];
		move rbody to x-axis [4.000000] speed [20.000000];
		wait-for-move lbody along x-axis;
		wait-for-move rbody along x-axis;
	}
	if( TRUE )
	{
		turn launcher to x-axis <98.021978> speed <500.000000>;
		wait-for-turn launcher around x-axis;
	}
	return (0);
}

deactivatescr()
{
	if( TRUE )
	{
		move lbody to x-axis [-4.375000] now;
		move rbody to x-axis [4.000000] now;
		turn launcher to x-axis <98.450549> now;
		turn launcher to x-axis <92.021978> speed <31.000000>;
		sleep 200;
	}
	if( TRUE )
	{
		turn launcher to x-axis <70.016484> speed <107.000000>;
		sleep 200;
	}
	if( TRUE )
	{
		turn launcher to x-axis <17.000000> speed <267.000000>;
		sleep 200;
	}
	if( TRUE )
	{
		turn launcher to x-axis <0.000000> speed <84.000000>;
		sleep 200;
	}
	if( TRUE )
	{
		move lbody to x-axis [0.000000] speed [20.000000];
		move rbody to x-axis [0.000000] speed [20.000000];
		sleep 200;
	}
	sleep 200;
	return (0);
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
	return (0);
}

HitByWeapon(Func_Var_1, Func_Var_2)
{
	turn base to z-axis Func_Var_2 speed <105.000000>;
	turn base to x-axis Func_Var_1 speed <105.000000>;
	wait-for-turn base around z-axis;
	wait-for-turn base around x-axis;
	turn base to z-axis <0.000000> speed <30.000000>;
	turn base to x-axis <0.000000> speed <30.000000>;
	return (0);
}

Go()
{
	call-script activatescr();
	Static_Var_1 = 1;
	return (0);
}

Stop()
{
	Static_Var_1 = 0;
	call-script deactivatescr();
	return (0);
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	return (0);
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
	return (0);
}

MotionControl(Func_Var_1)
{
	while( TRUE )
	{
		Func_Var_1 = bMoving;
		if( Func_Var_1 )
		{
			call-script walk();
		}
		if( !Func_Var_1 )
		{
			sleep 100;
		}
	}
	return (0);
}

Create()
{
	bMoving = FALSE;
	Static_Var_1 = 0;
	Static_Var_2 = 10000;
	start-script SmokeUnit();
	call-script InitState();
	start-script MotionControl();
	return (0);
}

StartMoving()
{
	bMoving = TRUE;
	return (0);
}

StopMoving()
{
	bMoving = FALSE;
	return (0);
}

RestoreAfterDelay()
{
	sleep Static_Var_2;
	set-signal-mask 0;
	start-script RequestState(1);
	return (0);
}

AimPrimary(heading, pitch)
{
	start-script RequestState(0);
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while( !Static_Var_1 )
	{
		sleep 100;
	}
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary()
{
	sleep 100;
	return (0);
}

QueryPrimary(piecenum)
{
	piecenum = emit;
	return (0);
}

SweetSpot(piecenum)
{
	piecenum = base;
	return (0);
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode launcher type BITMAPONLY | BITMAP2;
		explode lbody type BITMAPONLY | BITMAP3;
		explode lffoot type BITMAPONLY | BITMAP4;
		explode lleg1 type BITMAPONLY | BITMAP5;
		explode lleg2 type BITMAPONLY | BITMAP1;
		explode lleg3 type BITMAPONLY | BITMAP2;
		explode lrfoot type BITMAPONLY | BITMAP3;
		explode lupleg1 type BITMAPONLY | BITMAP4;
		explode lupleg2 type BITMAPONLY | BITMAP5;
		explode lupleg3 type BITMAPONLY | BITMAP1;
		explode rbody type BITMAPONLY | BITMAP2;
		explode rffoot type BITMAPONLY | BITMAP3;
		explode rleg1 type BITMAPONLY | BITMAP4;
		explode rleg2 type BITMAPONLY | BITMAP5;
		explode rleg3 type BITMAPONLY | BITMAP1;
		explode rrfoot type BITMAPONLY | BITMAP2;
		explode rupleg1 type BITMAPONLY | BITMAP3;
		explode rupleg2 type BITMAPONLY | BITMAP4;
		explode rupleg3 type BITMAPONLY | BITMAP5;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode launcher type BITMAPONLY | BITMAP2;
		explode lbody type BITMAPONLY | BITMAP3;
		explode lffoot type FALL | BITMAP4;
		explode lleg1 type FALL | BITMAP5;
		explode lleg2 type FALL | BITMAP1;
		explode lleg3 type FALL | BITMAP2;
		explode lrfoot type FALL | BITMAP3;
		explode lupleg1 type FALL | BITMAP4;
		explode lupleg2 type FALL | BITMAP5;
		explode lupleg3 type FALL | BITMAP1;
		explode rbody type BITMAPONLY | BITMAP2;
		explode rffoot type FALL | BITMAP3;
		explode rleg1 type FALL | BITMAP4;
		explode rleg2 type FALL | BITMAP5;
		explode rleg3 type FALL | BITMAP1;
		explode rrfoot type FALL | BITMAP2;
		explode rupleg1 type FALL | BITMAP3;
		explode rupleg2 type FALL | BITMAP4;
		explode rupleg3 type FALL | BITMAP5;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode launcher type BITMAPONLY | BITMAP2;
		explode lbody type BITMAPONLY | BITMAP3;
		explode lffoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode lleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode lleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode lleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode lrfoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode lupleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode lupleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode lupleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode rbody type BITMAPONLY | BITMAP2;
		explode rffoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode rleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode rleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		explode rleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
		explode rrfoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
		explode rupleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
		explode rupleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
		explode rupleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode launcher type BITMAPONLY | BITMAP2;
	explode lbody type BITMAPONLY | BITMAP3;
	explode lffoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode lleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode lleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode lleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode lrfoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode lupleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode lupleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode lupleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode rbody type BITMAPONLY | BITMAP2;
	explode rffoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode rleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode rleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	explode rleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP1;
	explode rrfoot type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP2;
	explode rupleg1 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP3;
	explode rupleg2 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP4;
	explode rupleg3 type FALL | FIRE | SMOKE | EXPLODE_ON_HIT | BITMAP5;
	return (0);
}
