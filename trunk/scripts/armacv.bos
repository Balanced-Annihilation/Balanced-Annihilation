#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

#define SIG_BUILD		4	

piece  base, beam, door1, door2, plate, arm, nano, turret;

static-var  statechg_DesiredState, statechg_StateChanging, notBuilding;


activatescr()
{
	turn door1 to z-axis <0.000000> now;
	turn door1 to z-axis <-65.714286> speed <154.258242>;
	turn door2 to z-axis <0.000000> now;
	turn door2 to z-axis <65.258242> speed <153.203297>;
	sleep 40;

	move door1 to y-axis [-3.099994] speed [7.242981];
	move door2 to y-axis [-3.050000] speed [7.126172];
	sleep 40;

	move plate to y-axis [3.800000] speed [8.878510];
	sleep 40;

	turn arm to x-axis <85.967033> speed <200.390110>;
	turn nano to x-axis <-69.758242> speed <162.626374>;
	sleep 40;
}

deactivatescr()
{
	move plate to y-axis [3.800000] now;
	move door1 to y-axis [-3.099994] now;
	move door2 to y-axis [-3.050000] now;
	turn door1 to z-axis <-65.714286> now;
	turn door2 to z-axis <65.258242> now;
	turn arm to x-axis <85.967033> now;
	turn arm to x-axis <0.000000> speed <221.571429>;
	turn nano to x-axis <-69.758242> now;
	turn nano to x-axis <0.000000> speed <179.802198>;
	sleep 40;

	move plate to y-axis [0.000000] speed [9.768640];
	sleep 40;

	move door1 to y-axis [0.000000] speed [7.969147];
	move door2 to y-axis [0.000000] speed [7.840619];
	sleep 40;

	turn door1 to z-axis <0.000000> speed <168.500000>;
	turn door2 to z-axis <0.000000> speed <167.346154>;
	sleep 40;

	set INBUILDSTANCE to 0;
	turn turret to y-axis <0.000000> speed <160.038462>;
	wait-for-turn turret around y-axis;
}

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	var Func_Var_4;
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			Func_Var_4 = Rand( 1, 2 );
			if( Func_Var_4 == 1 )
			{
				emit-sfx smoketype from door1;
			}
			if( Func_Var_4 == 2 )
			{
				emit-sfx smoketype from door2;
			}
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

/*
Go()
{
	call-script activatescr();
}

Stop()
{
	call-script deactivatescr();
}
*/

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState )
		{
			call-script deactivatescr();
			notBuilding = 1;
			currentstate = 1;
		}
		else
		{
			call-script activatescr();
			notBuilding = 0;
			currentstate = 0;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	notBuilding = 1;
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

/*
TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}
*/

StartBuilding(heading, pitch)
{
	start-script RequestState(0);
	while( notBuilding ) sleep 100;
	signal SIG_BUILD;
	turn turret to y-axis heading speed <160.038462>;
	wait-for-turn turret around y-axis;
	set INBUILDSTANCE to 1;
}

StopBuilding()
{
	signal SIG_BUILD;	
	set-signal-mask SIG_BUILD;
	sleep 6000;
	set-signal-mask 0;
	signal SIG_BUILD;	
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	piecenum = beam;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode arm type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode nano type BITMAPONLY | BITMAP3;
		explode beam type BITMAPONLY | BITMAP4;
		explode door1 type BITMAPONLY | BITMAP5;
		explode door2 type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		explode plate type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode arm type FALL | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode nano type FALL | BITMAP3;
		explode beam type FALL | BITMAP4;
		explode door1 type BITMAPONLY | BITMAP5;
		explode door2 type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP2;
		explode plate type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode arm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode base type BITMAPONLY | BITMAP2;
		explode nano type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode door1 type BITMAPONLY | BITMAP5;
		explode door2 type BITMAPONLY | BITMAP1;
		explode turret type SHATTER | BITMAP2;
		explode plate type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode arm type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode base type BITMAPONLY | BITMAP2;
	explode nano type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode beam type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode door1 type BITMAPONLY | BITMAP5;
	explode door2 type BITMAPONLY | BITMAP1;
	explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP2;
	explode plate type BITMAPONLY | BITMAP3;
}
