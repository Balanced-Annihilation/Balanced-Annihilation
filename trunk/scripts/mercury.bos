#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  flare1, flare2, base, turret, axel, firepoint, firea, fireb, foot1, foot2, joint;
       
static-var gun_1, last_fire, firstaim;

// Signal definitions
#define SIG_AIM				2
#define CHANGE_TARGET       98
#define DELAY_UNIT_VAR 1024
#define GAME_FRAME 134

lua_TargetCheck() { return 0; }

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
	hide flare1;
	hide flare2;
	dont-cache flare1;
	dont-cache flare2;
	dont-shade flare1;
	dont-shade flare2;
	gun_1 = flare2;
	firstaim = 1;
	start-script SmokeUnit();
}

RestoreDelay()
{
  sleep 1000;
  firstaim = 1;
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	call-script lua_TargetCheck();
	if ((get DELAY_UNIT_VAR) == 0) {
	  return(0);
	}
	turn turret to y-axis heading speed <125.000000>;
	turn axel to x-axis <0.000000> - pitch speed <100.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn axel around x-axis;
	start-script RestoreDelay();
	return (1);
}

FirePrimary()
{
	if( gun_1 == 1 )
	{
		show flare1;
		sleep 150;
		hide flare1;
		gun_1 = base;
		return (0);
	}
	if( gun_1 == 2 )
	{
		show flare2;
		sleep 150;
		hide flare2;
		gun_1 = flare2;
		return (0);
	}
	set DELAY_UNIT_VAR to 0;
}

QueryPrimary(piecenum)
{
	if( gun_1 == 1 )
	{
		piecenum = firea;
	}
	if( gun_1 == 2 )
	{
		piecenum = fireb;
	}
}

AimFromPrimary(piecenum)
{
	piecenum = axel;
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	hide flare1;
	hide flare2;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode foot1 type BITMAPONLY | BITMAP2;
		explode foot2 type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode joint type BITMAPONLY | BITMAP5;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode firea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flare2 type BITMAPONLY | BITMAP1;
		explode fireb type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode foot1 type BITMAPONLY | BITMAP2;
		explode foot2 type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode joint type BITMAPONLY | BITMAP5;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode firea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode fireb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode foot1 type BITMAPONLY | BITMAP2;
		explode foot2 type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP4;
		explode joint type BITMAPONLY | BITMAP5;
		explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
		explode firea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
		explode fireb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode foot1 type BITMAPONLY | BITMAP2;
	explode foot2 type BITMAPONLY | BITMAP3;
	explode turret type BITMAPONLY | BITMAP4;
	explode joint type BITMAPONLY | BITMAP5;
	explode flare1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP5;
	explode firea type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode flare2 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode fireb type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
}
