#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, blades, post;

static-var  Static_Var_1, Static_Var_2, statechg_DesiredState, statechg_StateChanging;


SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	spin blades around z-axis speed Static_Var_1;
	turn post to y-axis Static_Var_2 speed <30.000000>;
}

Stop()
{
	spin blades around z-axis speed <0.000000>;
	turn post to y-axis Static_Var_2 speed <0.000000>;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}

Create()
{
	dont-cache blades;
	dont-cache post;
	dont-shade blades;
	dont-shade post;
	Static_Var_1 = 800;
	Static_Var_2 = 0;
	call-script InitState();
	start-script SmokeUnit();
}

Activate()
{
	start-script RequestState(0);
}

Deactivate()
{
	start-script RequestState(1);
}

SetSpeed(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
	if( !get BUILD_PERCENT_LEFT )
	{
		spin blades around z-axis speed Static_Var_1;
		set ACTIVATION to 100;
	}
}

SetDirection(Func_Var_1)
{
	Static_Var_2 = Func_Var_1;
	if( !get BUILD_PERCENT_LEFT )
	{
		turn post to y-axis Func_Var_1 speed <20.000000>;
	}
}

SweetSpot(piecenum)
{
	piecenum = base;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode base type BITMAPONLY | BITMAP1;
		explode blades type BITMAPONLY | BITMAP2;
		explode post type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode base type BITMAPONLY | BITMAP1;
		explode blades type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP2;
		explode post type BITMAPONLY | BITMAP3;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode base type BITMAPONLY | BITMAP1;
		explode blades type SHATTER | BITMAP2;
		explode post type BITMAPONLY | BITMAP3;
		return (0);
	}
	corpsetype = 3;
	explode base type BITMAPONLY | BITMAP1;
	explode blades type SHATTER | BITMAP2;
	explode post type BITMAPONLY | BITMAP3;
}
