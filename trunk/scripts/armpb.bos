#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

//-------------------------------------------------------------------------------------------------
// Pieces
//-------------------------------------------------------------------------------------------------
piece base, turret, dome, post, gun, barrel, flare;

//-------------------------------------------------------------------------------------------------
// Static var
//-------------------------------------------------------------------------------------------------
static-var  isFullyOpen;

//-------------------------------------------------------------------------------------------------
// Signal definitions
//-------------------------------------------------------------------------------------------------
#define SIG_AIM 2
#define SIG_OPENCLOSE 4

//-------------------------------------------------------------------------------------------------
// Functions
//-------------------------------------------------------------------------------------------------
FClose()
{
    // Signal guard
    signal SIG_OPENCLOSE;
    set-signal-mask SIG_OPENCLOSE;
    
    // State
    isFullyOpen = 0;
    
    // Animation
	turn gun to x-axis <0.000000> speed <90.000000>;
	move barrel to z-axis [-5.500000] speed [15.000000];
	move gun to x-axis [0.000000] speed [5.000000];
	wait-for-move gun along x-axis;
	wait-for-turn gun around x-axis;
	wait-for-move barrel along z-axis;
	move post to y-axis [-17.600000] speed [25.000000];
	wait-for-move post along y-axis;
	turn dome to x-axis <0.000000> speed <550.000000>;
	wait-for-turn dome around x-axis;
    
    // Fully closed -> Gain armor
	set ARMORED to 1;
}

FCloseAfterDelay()
{
    // Signals
    set-signal-mask SIG_OPENCLOSE;
    
    // Script
    sleep 4000;
    set-signal-mask 0; // To stop FClose from inheriting SIG_OPENCLOSE and killing itself
    start-script FClose();
}

FOpen()
{
    // Signals
    signal SIG_OPENCLOSE;
    set-signal-mask SIG_OPENCLOSE;
    
    // Lose armor immediately
    set ARMORED to 0;
    
    // Animation
	turn dome to x-axis <-135.032967> speed <550.000000>;
	wait-for-turn dome around x-axis;
	move post to y-axis [0.000000] speed [25.000000];
	move barrel to z-axis [0.000000] speed [15.000000];
	move gun to x-axis [1.500000] speed [5.000000];
	wait-for-move post along y-axis;
	wait-for-move barrel along z-axis;
	wait-for-move gun along x-axis;
    
    // Done
	isFullyOpen = 1;
    
    // Remember to close later
    start-script FCloseAfterDelay();
}

//-------------------------------------------------------------------------------------------------
// Callins
//-------------------------------------------------------------------------------------------------
SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 500;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 258;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 257;
			}
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Create()
{
    // Pieces
	hide flare;
	dont-cache turret;
	dont-cache dome;
	dont-cache post;
	dont-cache gun;
	dont-cache barrel;
	dont-cache flare;
	dont-shade turret;
	dont-shade dome;
	dont-shade post;
	dont-shade gun;
	dont-shade barrel;
	dont-shade flare;
    
    // State (Fully open)
    isFullyOpen = 1;
    start-script FCloseAfterDelay();
    
    // Other threads
	start-script SmokeUnit();
    
    // Alignment
	turn dome to x-axis <-135.000000> now;
	move gun to x-axis [1.500000] now;
}

AimPrimary(heading, pitch)
{
    // Signal guard
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
    
    // Open up
    start-script FOpen();
	while(!isFullyOpen)
	{
		sleep 100;
	}
    
	turn turret to y-axis heading speed <200.000000>;
	turn gun to x-axis <0.000000> - pitch speed <200.000000>;
	wait-for-turn turret around y-axis;
	wait-for-turn gun around x-axis;
	return (1);
}

FirePrimary()
{
	show flare;
	sleep 150;
	hide flare;
}

QueryPrimary(piecenum)
{
	piecenum = flare;
}

SweetSpot(piecenum)
{
	piecenum = turret;
}

AimFromPrimary(piecenum)
{
	piecenum = gun;
}

Killed(severity, corpsetype)
{
	hide flare;
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode barrel type BITMAPONLY | BITMAP1;
		explode base type BITMAPONLY | BITMAP3;
		explode post type BITMAPONLY | BITMAP1;
		explode gun type BITMAPONLY | BITMAP3;
		explode dome type BITMAPONLY | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode barrel type FALL | BITMAP1;
		explode post type BITMAPONLY | BITMAP3;
		explode gun type BITMAPONLY | BITMAP3;
		explode base type SHATTER | BITMAP1;
		explode dome type BITMAPONLY | BITMAP3;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
		explode base type BITMAPONLY | BITMAP5;
		explode post type BITMAPONLY | BITMAP3;
		explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
		explode dome type SHATTER | BITMAP1;
		explode turret type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode barrel type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP3;
	explode base type BITMAPONLY | BITMAP5;
	explode post type BITMAPONLY | BITMAP3;
	explode gun type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP4;
	explode dome type SHATTER | BITMAP1;
	explode turret type BITMAPONLY | BITMAP2;
}
